<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>한참치의 Study Blog</title>
    <link>https://hdw0903.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description> 공부 내용 정리 블로그입니다. </description>
    <pubDate>Sun, 10 May 2020 07:54:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>prototype -Core JavaScript</title>
      <link>https://hdw0903.github.io/2020/05/05/prototype-Core-JavaScript/</link>
      <guid>https://hdw0903.github.io/2020/05/05/prototype-Core-JavaScript/</guid>
      <pubDate>Tue, 05 May 2020 08:57:53 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;프로토타입 (prototype)&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/05/05/prototype-Core-JavaScript/#프로토타입의-개념-이해&quot;&gt;프로토타입의 개념 이해&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;constructor, prototype, instance&lt;/li&gt;
&lt;li&gt;constructor 프로퍼티&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/05/05/prototype-Core-JavaScript/#prototype_chain&quot;&gt;프로토타입 체인&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;메서드 오버라이드&lt;/li&gt;
&lt;li&gt;프로토타입 체인&lt;/li&gt;
&lt;li&gt;객체 전용 메서드의 예외사항&lt;/li&gt;
&lt;li&gt;다중 프로토타입 체인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/05/05/prototype-Core-JavaScript/#point&quot;&gt;정리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>프로토타입 (prototype)<ul><li><a href="/2020/05/05/prototype-Core-JavaScript/#프로토타입의-개념-이해">프로토타입의 개념 이해</a><ul><li>constructor, prototype, instance</li><li>constructor 프로퍼티</li></ul></li><li><a href="/2020/05/05/prototype-Core-JavaScript/#prototype_chain">프로토타입 체인</a><ul><li>메서드 오버라이드</li><li>프로토타입 체인</li><li>객체 전용 메서드의 예외사항</li><li>다중 프로토타입 체인</li></ul></li><li><a href="/2020/05/05/prototype-Core-JavaScript/#point">정리</a></li></ul></li></ul><a id="more"></a><hr><h2 id="프로포타입의-개념-이해">프로토타입의 개념 이해</h2><h3 id="constructor-prototype-instance"><a href="#constructor-prototype-instance" class="headerlink" title="constructor, prototype, instance"></a>constructor, prototype, instance</h3><blockquote><p>var instance = new Constructor();</p></blockquote><p>위 코드를 추상화 하여 나타내면 다음과 같습니다.</p><p><img src="/images/prototype_schematic.png" alt="prototype schematic"></p><p>윗변(실선)의 왼쪽 꼭지점에는 <code>Constructor</code>(생성자 함수)를, 오른쪽 꼭짓점에는 <code>Constructor.prototype</code>이라는 프로퍼티를 위치시켰습니다.<br>왼쪽 꼭짓점부터 아래를 향한 화살표 중간에 <code>new</code>가 있고, 화살표의 종점에는 <code>instance</code>가 있습니다.<br>오른쪽 꼭짓점으로부터 대각선 아래로 향하는 화살표의 종점에는 <code>instance.__proto__</code>이라는 프로퍼티를 위치시켰습니다. </p><hr><ul><li><p>어떤 생성자 함수(<code>Constructor</code>)를 <code>new</code> 연산자와 함께 호출하면</p></li><li><p><code>Constructor</code>에서 정의된 내용을 바탕으로 새로운 인스턴스(<code>instance</code>)가 생성됩니다.</p></li><li><p>이떄 <code>instance</code>에는 <code>__proto__</code>라는 프로퍼티가 자동으로 부여되는데,</p></li><li><p>이 프로퍼티는 <code>Constructor</code>의 <code>prototype</code>이라는 프로퍼티를 참조합니다.</p></li></ul><p><code>prototype</code>이라는 프로퍼티와 <code>__proto__</code> <mark>이 둘의 관계가 프로토타입 개념의 핵심입니다.</mark></p><p><code>prototype</code>은 객체입니다. 이를 참조하는 <code>__proto__</code> 역시 객체입니다.</p><p><code>prototype</code> 객체 내부에는 <code>instance</code>가 사용할 메서드를 저장합니다. 그러면 <code>instance</code>에서도 숨겨진 프로퍼티인 <code>__proto__</code>를 통해 이 메서드들에 접근할 수 있게 됩니다.</p><hr><figure class="highlight js"><figcaption><span>Person이라는 생성자 함수의 prototype에 getName이라는 메서드를 지정한 예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._name = name;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이제 <code>Person</code>의 <code>instance</code>는 <code>__proto__</code>프로퍼티를 통해 <code>getName</code>을 호출할 수 있습니다.<br><code>instance</code>의 <code>__proto__</code>가 <code>Constructor</code>의 <code>prototype</code>프로퍼티를 참조하므로 결국 둘은 같은 객체를 바라보기 때문입니다.</p><figure class="highlight js"><figcaption><span>this 바인딩 값</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> suzi = <span class="keyword">new</span> Person(<span class="string">'Suzi'</span>);</span><br><span class="line">suzi.__proto__.getName(); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">Person.prototype === suzi.__proto__ <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>suzi.__proto__.getName();</code>를 실행해 <code>undefined</code>가 나왔다는 것은 이 변수가 “호출할 수 있는 함수”에 해당한다는 것을 의미합니다. </li></ul><ul><li>만약 함수가 아닌 다른 데이터 값이었다면 <code>TypeError</code>가 발생했을 것입니다. 에러가 아닌 <code>undefined</code>를 반환했으므로 <code>getName</code>이 실제로 실행됐고 <code>getName</code>이 함수라는 것이 입증됐습니다.</li></ul><ul><li><code>undefined</code>를 반환한 이유는 <code>this</code>의 바인딩 값이 잘못됐음을 의미합니다.</li></ul><ul><li><code>suzi.__proto__.getName();</code>에서 <code>getName</code> 함수 내부에서의 <code>this</code>는 <code>suzi</code>가 아니라 메서드명 바로앞의 객체 즉, <code>suzi.__proto__</code>를 참조하게 되는 것입니다. </li></ul><ul><li><code>suzi.__proto__</code> 내부에 <code>name</code>프로퍼티가 없으므로 엔진이 “데이터 영역에 지정되지 않은 식별자에 접근할 때”를 뜻하는 <code>undefined</code>를 반환하게 됩니다. </li></ul><hr><p><code>__proto__</code> 객체에 <code>name</code> 프로퍼티가 있다면 <code>undefined</code>가 아니라 프로퍼티 값이 출력 되겠죠?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> suzi = <span class="keyword">new</span> Person(<span class="string">'Suzi'</span>);</span><br><span class="line">suzi.__proto__._name = <span class="string">'SUZI__proto__'</span>;</span><br><span class="line">suzi.__proto__.getName(); <span class="comment">// SUZI__proto__</span></span><br></pre></td></tr></table></figure><p>위 예제 코드들의 관건은 <code>this</code>가 어떤 값을 참조하게 되는가 였습니다.<br><code>this</code>가 <code>instance</code>를 참조하게 하는 방법은 간단합니다.<br><code>__proto__</code>를 생략하고 <code>instance</code>뒤에 바로 메서드를 작성하면 됩니다.</p><figure class="highlight js"><figcaption><span>__proto__ 생략</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> suzi = <span class="keyword">new</span> Person(<span class="string">'Suzi'</span>, <span class="number">28</span>);</span><br><span class="line">suzi.getName(); <span class="comment">// Suzi</span></span><br></pre></td></tr></table></figure><p>이런 코드가 실행되는 이유는 <code>__proto__</code>가 생략 가능한 프로퍼티이기 때문입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">suzi.__proto__.getName</span><br><span class="line">&gt; suzi(.__proto__).getName</span><br><span class="line">== suzi.getName</span><br></pre></td></tr></table></figure><ul><li><p>정리하면 </p><ul><li><code>__proto__</code>를 생략하지 않으면 <code>this</code>는 <code>suzi.__proto__</code>를 참조 (내부에 name프로퍼티 존재하지 않음)</li><li>생략하면 <code>suzi</code>를 참조 가능해짐. (suzi.getName 형태, name 프로퍼티 존재)</li></ul><p><img src="/images/prototype_schematic2.png" alt="prototype schematic2"></p><ul><li>new 연산자로 <code>Constructor</code> 호출시 <code>instance</code> 생성되고<br><code>instance</code>의 생략가능한 프로퍼티인 <code>__proto__</code>는<br><code>Constructor</code>의 <code>prototype</code>을 참조</li></ul></li></ul><figure class="highlight js"><figcaption><span>prototype과 __proto__</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Constructor = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">Constructor.prototype.method1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Constructor.prototype.property1 = <span class="string">'Constructor Prototype Property'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> Constructor(<span class="string">'Instance'</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(Constructor); <span class="comment">//Constructor의 디렉터리 구조 출력</span></span><br><span class="line"><span class="built_in">console</span>.dir(instance); <span class="comment">//instance의 디렉터리 구조 출력</span></span><br></pre></td></tr></table></figure><ul><li>위 예제를 크롬 개발자도구에서 실행한 결과</li></ul><p><img src="/images/prototype_Constructor.png" alt="prototype Constructor"></p><ul><li><code>Constructor</code>의 디렉터리 구조를 출력한<ul><li>첫 번째 줄에 함수라는 의미의 <code>f</code> 와 함수이름 <code>Constructor</code>, 인자 <code>name</code>이 출력되었습니다.</li><li>그 내부에는 <mark>옅은 색</mark>의 argument, caller, length, name, <code>prototype</code>, &#95;&#95;proto&#95;&#95;등의 프로퍼티들이 나타납니다.</li><li>내부 프로퍼티중 <code>prototype</code>을 열면 개발자가 직접 추가한 <code>metod1</code>, <code>property1</code>등의 값은 <mark>짙은 색</mark>으로 보이고, constructor, &#95;&#95;proto&#95;&#95; 등은 <mark>옅은 색</mark>으로 보입니다.<pre><code>이런 색상의 차이는 { enumerable: false } 속성이 부여된 프로퍼티인지 여부에 따릅니다.짙은 색은 enumerable, 즉 열거 가능한 프로퍼티임을 의미하고, 옅은 색은 innumerable, 즉 열거할 수 없는 프로퍼티입니다.for in 문 등으로 객체의 프로퍼티 전체에 접근할 때 접근 가능 여부를 색상으로 구분지어 표기하는 것입니다.</code></pre></li></ul></li></ul><div align="center"><p><img src="/images/prototype_Instance.png" alt="prototype Instance"></p></div><ul><li><code>instance</code>의 디렉터리 구조를 출력한<ul><li>첫 번째 줄에 <code>Constructor</code>가 출력됩니다.<br>생성자 함수의 <code>instance</code>는 해당 생성자 함수의 이름을 표기함으로<br>해당 함수의 <code>instance</code>임을 나타냅니다.</li><li><code>Constructor</code>를 열어보면 <code>name</code>프로퍼티가 짙은 색으로 표기되고, <code>__proto__</code>프로퍼티가 옅은 색으로 표기됩니다.</li><li><code>__proto__</code>를 열어보면 <code>method1</code>, <code>property1</code>, <code>constructor</code>, <code>__proto__</code> 등이 있으므로,<br><code>Constructor</code>의 <code>prototype</code>과 동일한 내용으로 구성돼 있음을 확인할 수 있습니다.</li></ul></li></ul><hr><h4 id="내장-built-in-생성자-함수-Array-구조"><a href="#내장-built-in-생성자-함수-Array-구조" class="headerlink" title="내장(built-in) 생성자 함수 Array 구조"></a>내장(built-in) 생성자 함수 Array 구조</h4><figure class="highlight js"><figcaption><span>Array</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.dir(arr);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/prototype_arr_Array.png" alt="prototype arr and Array"></p><ul><li><p>arr</p><ul><li>첫 줄에 <code>Array(2)</code>가 표기됩니다.</li><li><code>Array</code> 생성자 함수를 원본으로 생성됐고, <code>length</code> 값 2를 알 수 있습니다.</li><li><code>index 0, 1</code>은 짙은 색으로 length와 &#95;&#95;proto&#95;&#95;는 옅은 색으로 표기됩니다.</li><li>&#95;&#95;proto&#95;&#95; 에는 Array 메서드 들이 포함되어 있습니다.</li></ul></li><li><p>Array</p><ul><li>첫 줄에 함수를 뜻하는 <code>f</code>가 표시됩니다.</li><li>함수의 프로퍼티인 <code>argument</code>, <code>caller</code>, <code>length</code>, <code>name</code>등이 표기됩니다.</li><li>또한 <code>Array</code> 함수의 정적 메서드 <code>from</code>, <code>isArray</code> <code>of</code> 등도 있습니다.</li><li><code>prototype</code>을 열어보면 왼쪽(arr)의 &#95;&#95;proto&#95;&#95;와 동일한 구성임을 확인할 수 있습니다.</li></ul></li></ul><ul><li><p>위 결과를 도식으로 나타면 다음과 같습니다.<br><img src="/images/prototype_Array_schematic.png" alt="prototype Array schematic"></p></li><li><p>Array를 new 연산자와 함께 호출하든, 배열 리터럴을 생성하든 <code>instance</code>인 [1, 2]가 만들어집니다.</p></li></ul><ul><li><code>instance</code>의 <code>__proto__</code>은 Array.prototype을 참조함으로 <code>instance</code>가 push, pop, forEach 등 Array 메서드를 자신의 것처럼 호출할 수 있습니다.(<code>__proto__</code>가 생략 가능하도록 설계돼 있기 때문에)</li></ul><ul><li><strong>한편 <code>Array의 prototype 프로퍼티 내부</code>에 있지 않은 <code>from, isArray</code> 등의 메서드들은 <code>instance</code>가 직접 호출할 수 없습니다. 이들은 <code>Array 생성자 함수</code>에서 직접 접근해야 실행 가능합니다.</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array 생성자 함수를 원본으로하는 instance인 arr</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// __proto__ 생략 가능으로 인한 Array 메서드 직접 호출 </span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// (o)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array의 prototype 프로퍼티 내부에 없는 메서드는</span></span><br><span class="line"><span class="comment">// instance가 직접 호출 불가능</span></span><br><span class="line">arr.isArray(); <span class="comment">// (x) TypeError: arr.isArray is not a function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array 생성자 함수에서 직접 접근하여 실행해야 됨</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr); <span class="comment">// (o) true</span></span><br></pre></td></tr></table></figure><hr><h3 id="constructor-프로퍼티"><a href="#constructor-프로퍼티" class="headerlink" title="constructor 프로퍼티"></a>constructor 프로퍼티</h3><p><code>생성자 함수</code>의 프로퍼티인 <code>prototype</code> 객체 내부에는 <code>constructor</code> 프로퍼티가 있습니다.<br><code>instance</code>의 <code>__proto__</code> 객체 내부에도 마찬가지로 존재합니다.<br><code>constructor</code> 프로퍼티는 원래의 생성자 함수(자기 자신)를 참조하고,<br><code>instance</code>로부터 그 원형을 알 수 있는 수단으로 <code>instance</code>와의 관계에 있어 필요한 정보입니다.</p><figure class="highlight js"><figcaption><span>constructor 프로퍼티 </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.constructor === <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line">arr.__proto__.constructor === <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line">arr.constructor === <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> arr.constructor(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [3, 4]</span></span><br></pre></td></tr></table></figure><hr><h4 id="다양한-constructor-접근-방법"><a href="#다양한-constructor-접근-방법" class="headerlink" title="다양한 constructor 접근 방법"></a>다양한 constructor 접근 방법</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'사람1'</span>); <span class="comment">// Person &#123; name: "사람1" &#125; true</span></span><br><span class="line"><span class="keyword">var</span> p1Proto = <span class="built_in">Object</span>.getPrototypeOf(p1);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person.prototype.constructor(<span class="string">'사람2'</span>); <span class="comment">// Person &#123; name: "사람2" &#125; true</span></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> p1Proto.constructor(<span class="string">'사람3'</span>); <span class="comment">// Person &#123; name: "사람3" &#125; true</span></span><br><span class="line"><span class="keyword">var</span> p4 = <span class="keyword">new</span> p1.__proto__.constructor(<span class="string">'사람4'</span>); <span class="comment">// Person &#123; name: "사람4" &#125; true</span></span><br><span class="line"><span class="keyword">var</span> p5 = <span class="keyword">new</span> p1.constructor(<span class="string">'사람5'</span>); <span class="comment">// Person &#123; name: "사람5" &#125; true</span></span><br><span class="line"></span><br><span class="line">[p1, p2, p3, p4, p5].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p, p <span class="keyword">instanceof</span> Person);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>다음은 모두 동일한 대상을 가리키게 됩니다.</strong></li></ul><pre><code>1. [Constructor]2. [instance].__proto__.constructor3. [instance].constructor4. Object.getPrototypeOf([instance]).constructor5. [Constructor].prototype.constructor</code></pre><ul><li><strong>다음은 모두 동일한 객체에 접근할 수 있습니다.</strong></li></ul><pre><code>1. [Constructor].prototype2. [instance].__proto__3. [instance]4. Object.getPrototypeOf([instance])</code></pre><ul><li>따라서 p1 부터 p5까지 모두 Person의 instance입니다.</li></ul><hr><h2 id="prototype_chain">프로토타입 체인</h2><hr><h3 id="메서드-오버라이드"><a href="#메서드-오버라이드" class="headerlink" title="메서드 오버라이드"></a>메서드 오버라이드</h3><p><code>instance</code>가 동일한 이름의 프로퍼티 또는 메서드를 가지고 있는 상황이라면</p><p><code>instance.method()</code> 형태로 호출했을 때<br><code>instance.__proto__.method</code>가 아닌 <code>instance</code>객체에 있는 해당 <code>method</code>가 호출됩니다.<br>여기서 일어난 현상을 메서드 위에 메서드를 덮어씌웠다고 하여 <mark>메서드 오버라이드</mark>라고합니다.</p><ul><li>자바스크립트 엔진은 프로퍼티(혹은 메서드)를 찾을 때 가장 가까운 대상인 자신의 프로퍼티를 먼저 검색하고, 없으면 그다음으로 가까운 대상인 &#95;&#95;proto&#95;&#95;를 검색합니다.<br>그러므로 메서드 오버라이드 됐을 때 &#95;&#95;proto&#95;&#95;에 있는 메서드는 우선 순위에서 밀려 호출되지 않는 것입니다.</li></ul><hr><h4 id="메서드-오버라이드된-상태에서-prototype에-있는-메서드에-접근법"><a href="#메서드-오버라이드된-상태에서-prototype에-있는-메서드에-접근법" class="headerlink" title="메서드 오버라이드된 상태에서 prototype에 있는 메서드에 접근법"></a>메서드 오버라이드된 상태에서 prototype에 있는 메서드에 접근법</h4><blockquote><p>instance.&#95;&#95;proto&#95;&#95;.method()</p></blockquote><p>형태로 호출하면 정상적으로 <code>prototype</code>에 있는 <code>method</code>에 접근할 수 있습니다.<br>하지만 <code>this</code>가 <code>instance</code>를 바라보지 않고 있습니다.</p><p><code>call</code>이나 <code>apply</code>를 사용하면</p><blockquote><p>instance.&#95;&#95;proto&#95;&#95;.method.call(thisArg) 형태로 작성하여 <code>this</code> 대상을 지정합니다.</p></blockquote><hr><h3 id="프로토타입-체인"><a href="#프로토타입-체인" class="headerlink" title="프로토타입 체인"></a>프로토타입 체인</h3><p><mark>자바스크립트의 모든 객체의 최상위 객체에는 Object 객체가 존재합니다.</mark></p><p>따라서 모든 객체의 <code>__proto__</code>에는 <code>Object.prototype</code>이 연결됩니다.</p><p><strong>Array 객체를 예시로 든 최상위 객체 Object와의 구조 도식(<del>prototype 역시 객체입니다.</del>)</strong></p><p><img src="/images/%EA%B0%9D%EC%B2%B4%EC%9D%98_%EC%B5%9C%EC%83%81%EC%9C%84_%EA%B0%9D%EC%B2%B4_Object.png" alt="객체의 최상위 객체 Object"></p><ul><li><p>앞에서 <code>__proto__</code>는 생략가능한 프로퍼티이므로 <code>배열[]</code>에서 <code>Array.prototype</code> 내부의 메서드를 직접 호출할 수 있었습니다. </p></li><li><p>마찬가지로 <code>배열[]</code>의 <code>__proto__</code>를 계속 따라가다 보면 <code>Object.prototype</code>이 있으므로 <code>Object.prototype</code>의 내부 메서드도 직접 호출할 수 있습니다.</p></li></ul><hr><p>이러한 <code>__proto__</code> 프로퍼티 내부에 다시 <code>__proto__</code>프로퍼티가 연쇄적으로 이어진 것을<br><strong>프로토타입 체인</strong>(<code>prototype chain</code>)이라 하고, </p><p>이 체인을 따라 검색하는 것을 <strong>프로토타입 체이닝</strong>(<code>prototype chaining</code>)이라고 합니다.</p><hr><h3 id="객체-전용-메서드의-예외사항"><a href="#객체-전용-메서드의-예외사항" class="headerlink" title="객체 전용 메서드의 예외사항"></a>객체 전용 메서드의 예외사항</h3><p>어떤 생성자 함수이든 <code>prototype</code>은 객체이기 때문에 <code>Object.prototype</code>이 언제나 프로토타입 체인의 최상단에 존재하게 됩니다.</p><p>따라서 <strong>객체에서만 사용할 메서드는 다른 데이터 타입처럼 프로토타입 객체 안에 정의할 수 없습니다.</strong></p><p><strong>객체에서만 사용할 메서드를 <code>Object.prototype</code>내부에 정의한다면 다른 데이터 타입도 해당 메서드를 사용할 수 있게 되기 때문입니다.</strong>(참조형 데이터뿐 아니라 기본형 데이터도 &#95;&#95;proto&#95;&#95;에 반복적으로 접근하여 도달하는 최상위 객체가 Object.prototype이 됨)</p><ul><li>이 같은 이유로 객체만을 대상으로 동작하는 <strong>Object 전용 메서드</strong>들은 부득이 <code>Object.prototype</code>이 아닌 <code>Object</code>에 정적(<code>static</code>)메서드로 구현돼 있습니다.</li></ul><p><img src="/images/Object_prototype.png" alt="Object-prototype"></p><ul><li>한편 <code>Object.prototype</code>에는 어떤 데이터에서도 활용할 수 있는 범용적인 메서드들만 있습니다.<br>toString, hasOwnProperty, valueOf, isPrototypeOf 등은 모든 <code>instance</code>가 직접 호출할 수 있습니다.</li></ul><hr><h3 id="다중-프로토타입-체인"><a href="#다중-프로토타입-체인" class="headerlink" title="다중 프로토타입 체인"></a>다중 프로토타입 체인</h3><p>자바스크립트의 기본 내장 데이터 타입들은 모두 프로토타입 체인 1단계(객체), 2단계(나머지)로 끝나는 경우가 있지만 <strong>사용자가 새롭게 만드는 경우 계속해서 단계를 추가할 수 있습니다.</strong></p><p><code>__proto__</code>를 연결하는 방법은 <code>__proto__</code>가 가리키는 대상을<br>생성자 함수의 <code>prototype</code>이 연결하고자 하는 상위 생성자 함수의 <code>instance</code>를 지정해 주면됩니다.</p><figure class="highlight js"><figcaption><span>다중 프로토타입 체인</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Grade = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>[i] = args[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.length = args.length;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> g = <span class="keyword">new</span> Grade(<span class="number">100</span>, <span class="number">80</span>);</span><br><span class="line">Grade.prototype = [];</span><br></pre></td></tr></table></figure><ul><li><code>Grade</code>의 <code>instance</code>는 여러개의 인자를 받아 각 순서대로 인덱싱해서 저장합니다. (<code>유사배열객체</code>)</li></ul><ul><li><code>변수 g</code> 가 <code>Grade</code>의 <code>instance</code>를 바라봅니다.</li></ul><ul><li><code>유사배열객체</code>지만 <strong>배열 메서드를 직접 호출할 수 있게</strong> 만들고자 합니다.</li></ul><ul><li><code>g.__proto__</code> 즉, <code>Grade.prototype</code>이 배열의 <code>instance</code>를 바라보게 해주면 됩니다.<br><code>Grade.prototype = [];</code></li></ul><ul><li><code>Grade</code>의 <code>instance</code>인 <code>g</code>에서 직접 배열 메서드를 사용할수 있게됩니다.</li></ul><p><code>g</code>의 <code>instance</code>는 프로토타입 체인을 따라 <code>Grade.prototype</code>, <code>Array.prototype</code>, <code>Object.prototype</code>에 접근할 수 있는 <strong>3단계 다중프로토타입 체인 형식</strong>입니다.</p><hr><h2 id="point">정리</h2><ul><li><code>__proto__</code>는 생략 가능한 속성이므로 <code>instance</code>에서 상위 객체의 <code>prototype</code>에 있는 메서드를 직접호출할 수 있습니다.</li></ul><ul><li><code>Constructor</code> <strong>프로퍼티는 생성자 함수 자기 자신을 가리킵니다.</strong><br><code>instance</code>에서 <strong>자신의 생성자 함수가 무엇인지 알고자할 때 필요한 수단입니다.</strong></li></ul><ul><li><strong>참조형 데이터뿐 아니라 기본형 데이터도 &#95;&#95;proto&#95;&#95;에 반복적으로 접근하면 최상위 객체 <code>Object.prototype</code>에 도달하게 됩니다.</strong></li></ul><ul><li><code>Object.prototype</code>에는 <strong>모든 데이터 타입에서 사용할 수 있는 범용적인 메서드만 존재합니다.</strong><br><code>Object</code> 전용 메서드는 <code>Object</code> 생성자 함수에 정적(<code>static</code>)하게 담겨있습니다.</li></ul>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/05/05/prototype-Core-JavaScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>클로저 -Core JavaScript</title>
      <link>https://hdw0903.github.io/2020/05/03/%ED%81%B4%EB%A1%9C%EC%A0%80-Core-JavaScript/</link>
      <guid>https://hdw0903.github.io/2020/05/03/%ED%81%B4%EB%A1%9C%EC%A0%80-Core-JavaScript/</guid>
      <pubDate>Sun, 03 May 2020 06:56:17 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;클로저 (Closure)&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/05/03/클로저-Core-JavaScript/#closure&quot;&gt;클로저의 의미 및 원리 이해&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/05/03/클로저-Core-JavaScript/#closure_memory&quot;&gt;클로저와 메모리 관리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/05/03/클로저-Core-JavaScript/#closure_ex&quot;&gt;클로저 활용 사례&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;콜백 함수 내부에서 외부 데이터를 사용하고자 할 때&lt;/li&gt;
&lt;li&gt;접근 권한 제어 (정보 은닉)&lt;/li&gt;
&lt;li&gt;부분 적용 함수&lt;/li&gt;
&lt;li&gt;커링 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/05/03/클로저-Core-JavaScript/#&quot;&gt;정리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>클로저 (Closure)<ul><li><a href="/2020/05/03/클로저-Core-JavaScript/#closure">클로저의 의미 및 원리 이해</a></li><li><a href="/2020/05/03/클로저-Core-JavaScript/#closure_memory">클로저와 메모리 관리</a></li><li><a href="/2020/05/03/클로저-Core-JavaScript/#closure_ex">클로저 활용 사례</a><ul><li>콜백 함수 내부에서 외부 데이터를 사용하고자 할 때</li><li>접근 권한 제어 (정보 은닉)</li><li>부분 적용 함수</li><li>커링 함수</li></ul></li><li><a href="/2020/05/03/클로저-Core-JavaScript/#">정리</a></li></ul></li></ul><a id="more"></a><hr><h2 id="closure">클로저의 의미 및 원리 이해</h2><p>클로저(<code>Closure</code>)는 여러 함수형 프로그래밍 언어에서 등장하는 보편적인 특성입니다.<br>자바스크립트 고유의 개념이 아니라서 ECMAScript 명세에서도 클로저의 정의를 다루지 않고 있고, 다양한 문헌에서 제각각 클로저를 다르게 정의 또는 설명하고 있습니다.</p><p>다양한 서적에서 클로저를 한 문장으로 요약해서 설명하는 부분들을 소개하면 다음과 같습니다.<br>    * 자신을 내포하는 함수의 컨텍스트에 접근할 수 있는 함수</p><pre><code>* 함수가 특정 스코프에 접근할 수 있도록 의도적으로 그 스코프에서 정의하는 것* 함수를 선언할 때 만들어지는 유효범위가 사라진 후에도 호출할 수 있는 함수* 이미 생명 주기상 끝난 외부 함수의 변수를 참조하는 함수* 자유변수가 있는 함수와 자유변수를 알 수 있는 환경의 결합* 로컬 변수를 참조하고 있는 함수 내의 함수* 자신이 생성될 때의 스코프에서 알 수 있었던 변수들 중 언젠가 자신이 실행될 때 사용할 변수들만을 기억하여 유지시키는 함수</code></pre><p><strong>MDN</strong> 에서는 클로저를 함수와 그 함수가 선언될 당시의 <code>LexicalEnvironment</code>의 조합이라고 소개하고,<br>다른 말로 클로저는 내부 함수에서 외부 함수의 범위로 접근할 수 있게 해주는 함수라고 합니다.</p><p>선언될 당시의 <code>LexicalEnvironment</code>는 실행 컨텍스트의 구성 요소 중 하나인 <code>outerEnvironmentReference</code>에 해당합니다.<br><code>LexicalEnvironment</code>의 <code>environmentRecord</code>와 <code>outerEnvironmentReference</code>에 의해 변수의 유효범위인 스코프가 결정되고 스코프 체인이 가능해집니다.</p><ul><li><code>컨텍스트 A</code>에서 선언한 <code>내부 함수B</code>의 실행 컨텍스트가 활성화된 시점에서는 B의 <code>outerEnvironmentReference</code>가 참조하는 대상인 A의 <code>LexicalEnvironment</code>에도 접근이 가능해 집니다. A에서는 B에서 선언한 변수에 접근할 수 없지만 B에서는 A에 선언한 변수에 접근이 가능해집니다.</li></ul><ul><li>이런 내부함수에서 외부 변수를 참조하게 되는 경우가, 선언될 당시의 <code>LexicalEnvironment</code>와의 상호관계(조합)의 의미가 됩니다.</li></ul><figure class="highlight js"><figcaption><span>외부 함수의 변수를 참조하는 내부 함수 -1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++a);</span><br><span class="line">  &#125;;</span><br><span class="line">  inner();</span><br><span class="line">&#125;;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure><ol><li><code>outer</code> 함수에 변수 a를 선언했고 1을 할당했습니다.</li></ol><ol start="2"><li><code>outer</code>의 내부함수인 <code>inner</code> 함수에서 a의 값을 1 증가시키고 출력합니다.</li></ol><ul><li><code>inner</code>함수 내부에서는 a를 선언하지 않았기 때문에 <code>environmentRecord</code>에서 값을 찾지 못하므로 <code>outerEnvironmentReference</code>에 지정된 상위 컨텍스트인 <code>outer</code>의 <code>LexicalEnvironment</code>에 접근하여 다시 a를 찾습니다.</li></ul><ul><li><code>outer</code> 함수의 실행 컨텍스트가 종료되면 <code>LexicalEnvironment</code>에 저장된 식별자들(a,inner)에 대한 참조를 지웁니다. 그러면 각 주소에 저장돼 있던 값들은 자신을 참조하는 변수가 하나도 없게 되므로 <code>가비지컬렉터(GC)</code>의 수집 대상이 됩니다.</li></ul><figure class="highlight js"><figcaption><span>외부 함수의 변수를 참조하는 내부 함수 -2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++a;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> inner();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> outer2 = outer();</span><br><span class="line"><span class="built_in">console</span>.log(outer2); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>이 예제 역시 <code>inner</code>함수 내부에서 외부변수인 a를 사용했습니다.<br><code>inner</code> 함수를 실행한 결과를 <code>return</code> 하고 나면 <code>outer</code>함수의 실행 컨텍스트가 종료된 시점에는 a변수를 참조하는 대상이 없어집니다. 그러므로 예제1과 마찬가지로 식별자들의(a,inner) 값들은 <code>가비지컬렉터(GC)</code>에 의해 소멸됩니다.</li></ul><ul><li>예제1과 예제2는 <code>outer</code>함수의 실행 컨텍스트가 종료되기 이전에 <code>inner</code> 함수의 실행 컨텍스트가 종료돼 있으며, 이후 별도로 <code>inner</code> 함수를 호출할 수 없다는 공통점을 가지고 있습니다.</li></ul><p><mark>그렇다면 outer의 실행 컨텍스트가 종료된 후에도 inner 함수를 호출할 수 있게 만들면 어떨까요?</mark></p><figure class="highlight js"><figcaption><span>외부 함수의 변수를 참조하는 내부 함수 -3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++a;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> outer2 = outer();</span><br><span class="line"><span class="built_in">console</span>.log(outer2()); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(outer2()); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ol><li><code>return inner()</code> 함수의 실행 결과가 아닌 <code>return inner</code> 함수 자체를 반환했습니다.</li></ol><ol start="2"><li><code>outer2</code> 변수는 <code>outer</code>함수의 실행 결과인 <code>inner</code>함수 자체를 참조하게 됩니다.<br><code>outer2</code> 호출시 <code>inner</code> 함수가 실행됨.</li></ol><ol start="3"><li><code>inner</code> 함수의 실행 컨텍스트의 <code>environmentRecord</code>에는 수집할 정보가 없습니다. <code>outerEnvironmentReference</code>에는 <code>inner</code> 함수가 선언된 위치의 <code>LexicalEnvironment</code>가 참조복사 됩니다. <code>inner</code>함수는 <code>outer</code> 함수 내부에서 선언됐으므로, <code>outer</code> 함수의 <code>LexicalEnvironment</code>가 담깁니다.</li></ol><ol start="4"><li>스코프체이닝에 따라 <code>outer</code>에서 선언한 변수 a에 접근해 1만큼 증가시킨후 결과 값인 2를 반환하고, <code>inner</code>함수의 실행 컨텍스트가 종료됩니다.</li></ol><ol start="5"><li><code>outer2</code><u>를 다시 호출하면 같은 방식으로 a의 값을 2에서 1만큼 증가시켜 그 결과 값인 3을 반환합니다.</u></li></ol><p><strong>중요 포인트</strong></p><ul><li><code>outer</code>함수의 실행 컨텍스트는 종료된 상태인데 어떻게 외부 함수의 변수(<code>outer</code> 함수의 <code>LexicalEnvironment</code>)에 접근할 수 있는 걸까?</li></ul><ul><li>이는 가비지컬렉터의 동작 방식 때문입니다.</li></ul><ul><li><mark>어떤 값을 참조하는 변수가 하나라도 있다면 그 값은 가비지컬렉터(GC)의 대상이 되지 않습니다.</mark></li></ul><ul><li><code>outer</code> 함수는 실행 종료 시점에 <code>inner</code> 함수를 반환했습니다. <code>outer</code> 함수는 <code>inner</code>함수를 참조하게 되고 외부함수인 <code>outer</code>의 실행이 종료되었지만 내부함수인 <code>inner</code>함수는 언젠가 <code>outer()</code>형식 (변수 outer2와 같은)으로 호출될 수 있습니다.</li></ul><ul><li><code>inner</code> 함수 역시 <code>outer</code>의 변수를 참조하므로 실행 컨텍스트가 활성화 되면 <code>outerEnvironmentReference</code>가 <code>outer</code> 함수의 <code>LexicalEnvironment</code>를 필요로 하게되므로 <code>가비지컬렉터(GC)</code>의 대상에서 제외됩니다. 그 덕에 <code>inner</code>함수가 외부함수의 변수에 접근할 수 있는 것입니다.</li></ul><ul><li>클로저란 :<br><mark>외부 함수에서 선언한 변수를 참조하는 내부 함수를 외부로 전달할 경우 외부 함수의 실행 컨텍스트가 종료된 이후에도 변수가 사라지지 않는 현상</mark></li></ul><ul><li>“내부함수를 외부로 전달”이 return만을 의미하는 것은 아님. 다른 경우도 존재</li></ul><figure class="highlight js"><figcaption><span>return 없이 클로저가 발생하는 경우</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) setInterval/setTimeout</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>; <span class="comment">// 외부 함수의 변수를 내부 함수에서</span></span><br><span class="line">  <span class="keyword">var</span> intervalId = <span class="literal">null</span>; <span class="comment">// 참조하고 있으므로 GC의 대상이 되지 않음. </span></span><br><span class="line">  <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (++a &gt;= <span class="number">10</span>) &#123; <span class="comment">// 외부 함수의 변수a 참조</span></span><br><span class="line">      clearInterval(intervalId); <span class="comment">// 외부 함수의 변수 intervalId 참조</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;;</span><br><span class="line">  intervalId = setInterval(inner, <span class="number">1000</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>별도의 외부객체인 window의 메서드(setTimeout 또는 setInterval)에 전달할 콜백 함수 내부에서 지역변수를 참조합니다.</p><figure class="highlight js"><figcaption><span>return 없이 클로저가 발생하는 경우</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (2) eventListener</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  button.innerText = <span class="string">'click'</span>;</span><br><span class="line">  button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++count, <span class="string">'times clicked'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(button);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>별도의 외부 객체인 DOM의 메서드 (addEventListener)에 등록할 handler 함수 내부에서 지역변수를 참조합니다.</p><p><mark>두 상황 모두 두 지역변수를 참조하는 내부함수를 외부에 전달했기 때문에 클로저(closure)입니다.</mark></p><hr><h2 id="closure_memory">클로저와 메모리 관리</h2><ul><li><p><mark>클로저는 객체지향과 함수형 모두를 아우르는 매우 중요한 개념입니다.</mark></p></li><li><p>메모리 누수:<br>개발자의 의도와 달리 어떤 값의 참조 카운트가 0이 되지 않아 GC의 수거 대상이 되지 않는 경우 발생할 수 있습니다.<br>(개발자가 의도적으로 참조 카운트가 0이 되지 않게 설계한 경우는 ‘누수’라는 표현은 맞지 않습니다.)</p></li><li><p><mark>클로저는 의도대로 설계한 “메모리 소모”에 대한 관리법을 잘 파악해서 적용하는 것이 중요합니다.</mark></p></li></ul><hr><h3 id="메모리-관리-방법"><a href="#메모리-관리-방법" class="headerlink" title="메모리 관리 방법"></a>메모리 관리 방법</h3><p>클로저는 필요에 의해 의도적으로 함수의 지역변수를 메모리를 소모하도록 함으로써 발생합니다.<br>그렇다면 <u>필요성이 사라진 시점</u>에는 더는 메모리를 소모하지 않게 해주면 됩니다.</p><p>참조 카운트를 0으로 만들면(GC의 작동원리) GC가 수거해 갈것이고, 이때 소모됐던 메모리가 회수됩니다.</p><ul><li>참조 카운트를 0으로 만드는 방법 ?<br>식별자에 참조형이 아닌 기본형 데이터(보통 <code>null</code>이나 <code>undefined</code>)를 할당하면 됩니다.</li></ul><figure class="highlight js"><figcaption><span>클로저의 메모리 관리 - return</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (1) return에 의한 클로저의 메모리 해제</span></span><br><span class="line"><span class="keyword">var</span> outer = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++a;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(outer());</span><br><span class="line"><span class="built_in">console</span>.log(outer());</span><br><span class="line">outer = <span class="literal">null</span>; <span class="comment">// outer 식별자의 inner 함수 참조를 끊음</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>클로저의 메모리 관리 - setInterval</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (2) setInterval에 의한 클로저의 메모리 해제</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> intervalId = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (++a &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      clearInterval(intervalId);</span><br><span class="line">      inner = <span class="literal">null</span>; <span class="comment">// inner 식별자의 함수 참조를 끊음</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;;</span><br><span class="line">  intervalId = setInterval(inner, <span class="number">1000</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>클로저의 메모리 관리 - eventListener</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (3) eventListener에 의한 클로저의 메모리 해제</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">  button.innerText = <span class="string">'click'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> clickHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++count, <span class="string">'times clicked'</span>);</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      button.removeEventListener(<span class="string">'click'</span>, clickHandler);</span><br><span class="line">      clickHandler = <span class="literal">null</span>; <span class="comment">// clickHandler 식별자의 함수 참조를 끊음</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  button.addEventListener(<span class="string">'click'</span>, clickHandler);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(button);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><hr><h2 id="closure_ex">클로저 활용 사례</h2><p>클로저가 실제로 등장하는 활용 사례</p><h3 id="콜백-함수-내부에서-외부-데이터를-사용하고자-할-때"><a href="#콜백-함수-내부에서-외부-데이터를-사용하고자-할-때" class="headerlink" title="콜백 함수 내부에서 외부 데이터를 사용하고자 할 때"></a>콜백 함수 내부에서 외부 데이터를 사용하고자 할 때</h3><p>대표적인 콜백 함수 중 하나인 이벤트 리스너에 관한 예시</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'peach'</span>];</span><br><span class="line"><span class="keyword">var</span> $ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>); <span class="comment">// (공통 코드)</span></span><br><span class="line"></span><br><span class="line">fruits.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// (A)</span></span><br><span class="line">  <span class="keyword">var</span> $li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">  $li.innerText = fruit;</span><br><span class="line">  $li.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// (B)</span></span><br><span class="line">    alert(<span class="string">'your choice is '</span> + fruit);</span><br><span class="line">  &#125;);</span><br><span class="line">  $ul.appendChild($li);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild($ul);</span><br></pre></td></tr></table></figure><ol><li><code>fruits</code> 변수를 순회하며 <code>li</code>를 생성하고 각 <code>li</code>를 클릭하면 해당 리스너의 콜백 함수가 실행됩니다.</li></ol><ol start="2"><li><code>forEach</code>메서드에 넘겨준 익명의 콜백 함수(A)는 내부에서 외부 변수를 사용하지 않으므로 클로저가 없습니다.</li></ol><ol start="3"><li><code>addEventListener</code>에 넘겨준 콜백 함수(B)에는 함수내의 <code>fruit</code>라는 외부 변수를 참조하고 있으므로 클로저가 있습니다.</li></ol><ol start="4"><li>(A)는 <code>fruits</code>의 개수만큼 실행되며, 그때마다 새로운 실행 컨텍스트가 생성됩니다.</li></ol><ol start="5"><li>(A)의 실행 종료 여부와 무관하게 클릭 이벤트에 의해 각 컨텍스트의 (B)가 실행될 때는 (B)의 <code>outerEnvironmentReference</code>가 (A)의 <code>LexicalEnvironment</code>를 참조하게 됩니다.</li></ol><ol start="6"><li>따라서 (B)함수가 참조할 예정인 변수 <code>fruit</code>에 대해서는 (A)함수가 종료된 후에도 <code>CG</code> 대상에서 제외되어 계속 참조 가능하게 됩니다.</li></ol><p>그런데 (B)함수의 쓰임이 콜백 함수에 국한되지 않는 경우라면 반복을 줄이기 위해 (B)함수를 외부로 분리하는 편이 나을 수 있습니다.</p><p>따라서 다음은 <code>fruit</code>을 인자로 받아 출력하는 형태입니다.</p><figure class="highlight js"><figcaption><span>콜백 함수 외부로꺼내어 공통 함수로 사용</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'peach'</span>];</span><br><span class="line"><span class="keyword">var</span> $ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> alertFruit = <span class="function"><span class="keyword">function</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'your choice is '</span> + fruit);</span><br><span class="line">&#125;;</span><br><span class="line">fruits.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">  $li.innerText = fruit;</span><br><span class="line">  $li.addEventListener(<span class="string">'click'</span>, alertFruit);</span><br><span class="line">  $ul.appendChild($li);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild($ul);</span><br><span class="line">alertFruit(fruits[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><ul><li><p>공통 함수로 사용하고자 콜백 함수를 외부로 꺼내어 <code>alertFruit</code>라는 변수에 담았습니다.<br><code>alertFruit</code>를 직접 실행할 수 있게 되었습니다.</p></li><li><p>하지만 각 <code>li</code>를 클릭하면 클릭한 대상의 과일명이 아닌 <code>[object MouseEvent]</code>라는 값이 출력됩니다.<br>이는 콜백 함수의 인자에 대한 제어권을 <code>addEventListener</code>가 가진 상태이며, <code>addEventListener</code>는 콜백 함수를 호출할 때 첫 번째 인자에 “이벤트 객체”를 주입하기 때문입니다.</p></li></ul><p>이 문제는 <code>bind</code>메서드를 활용하면 해결할 수 있습니다.</p><figure class="highlight js"><figcaption><span>bind 메서드 사용</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'peach'</span>];</span><br><span class="line"><span class="keyword">var</span> $ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> alertFruit = <span class="function"><span class="keyword">function</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'your choice is '</span> + fruit);</span><br><span class="line">&#125;;</span><br><span class="line">fruits.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">  $li.innerText = fruit;</span><br><span class="line">  $li.addEventListener(<span class="string">'click'</span>, alertFruit.bind(<span class="literal">null</span>, fruit));</span><br><span class="line">  $ul.appendChild($li);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild($ul);</span><br></pre></td></tr></table></figure><ul><li><p>하지만 <code>bind</code>를 활용하면 이벤트 객체가 인자로 넘어오는 순서가 바뀌는 점과,<br>함수 내부에서 <code>this</code>가 참조하는 값이 달라지는점을 감안해야 합니다.</p></li><li><p>이러한 변경사항 마저 발생하지 않게 만들려면 <code>bind</code>메서드가 아닌 다른 방식으로 만들어야 합니다.</p></li></ul><figure class="highlight js"><figcaption><span>고차함수를 사용하여 클로저를 적극적으로 활용</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'peach'</span>];</span><br><span class="line"><span class="keyword">var</span> $ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> alertFruitBuilder = <span class="function"><span class="keyword">function</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'your choice is '</span> + fruit);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">fruits.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">  $li.innerText = fruit;</span><br><span class="line">  $li.addEventListener(<span class="string">'click'</span>, alertFruitBuilder(fruit));</span><br><span class="line">  $ul.appendChild($li);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild($ul);</span><br></pre></td></tr></table></figure><ul><li>고차함수란 함수를 인자로 받거나 함수를 리턴하는 함수입니다.</li></ul><ol><li><code>alertFruit</code> 함수 대신 <code>alertFruitBuilder</code>라는 이름의 함수를 작성했습니다.<br><code>alertFruitBuilder</code> 함수 내부에서는 다시 익명함수를 반환합니다.</li></ol><ol start="2"><li>이 익명함수 내부의 코드가 기존의 <code>alertFruit</code> 함수의 코드입니다. </li></ol><ol start="3"><li><code>alertFruitBuilder</code> 함수를 실행하면서 <code>fruit</code> 값을 인자로 전달하면, 함수의 실행 결과가<br>다시 함수(<code>return function</code>)가 되며, 이렇게 반환된 함수를 리스너의 콜백 함수로써 전달할 것입니다.</li></ol><ol start="4"><li>클릭 이벤트가 발생하면 이 함수의 실행 컨텍스트가 열리면서 <code>alertFruitBuilder</code>의 파라미터로 넘어온 <code>fruit</code>를 <code>outerEnvironmentReference</code>에 의해 참조할 수 있게됩니다.<br>즉, <code>alertFruitBuilder</code>의 실행 결과로 반환된 함수에는 클로저가 존재합니다.</li></ol><hr><h4 id="콜백-함수-내부에서-외부변수를-참조하기-위한-방법-정리"><a href="#콜백-함수-내부에서-외부변수를-참조하기-위한-방법-정리" class="headerlink" title="콜백 함수 내부에서 외부변수를 참조하기 위한 방법 정리."></a>콜백 함수 내부에서 외부변수를 참조하기 위한 방법 정리.</h4><ol><li>콜백 함수를 내부함수로 선언하여 외부변수를 직접 참조하는 방법.(<code>GC의 참조카운트</code> 이용)</li></ol><ol start="2"><li><code>bind</code>메서드를 활용하여 값을 직접넘겨주는 방법. 클로저는 발생하지 않지만 몇가지 제약이 생김</li></ol><ol start="3"><li>콜백 함수를 고차함수로 바꿔서 클로저를 적극적으로 활용하는 방법. </li></ol><hr><h3 id="접근-권한-제어-은닉"><a href="#접근-권한-제어-은닉" class="headerlink" title="접근 권한 제어(은닉)"></a>접근 권한 제어(은닉)</h3><p>정보은닉(information hiding)은 어떤 모듈의 내부 로직에 대해 외부로의 노출을 최소화해서 모듈간의 결합도를 낮추고 유연성을 높이고자 하는 현대 프로그래밍 언어의 중요한 개념 중 하나입니다.</p><p>흔히 접근 권한에는 <code>public</code>, <code>private</code>, <code>protected</code> 세 종류가 있습니다.</p><ul><li><p><code>public</code> : 외부에서 접근 가능한 것</p></li><li><p><code>private</code> : 내부에서만 사용하며 외부에 노출되지 않는 것</p></li></ul><p>자바스크립트는 기본적으로 변수 자체에 이러한 접근 권한을 직접 부여하도록 설계돼 있지 않습니다. 하지만 접근 권한 제어가 불가능한 것은 아닙니다. 클로저를 이용하면 함수 차원에서 <code>public</code>한 값과 <code>private</code>한 값을 구분하는 것이 가능합니다.</p><figure class="highlight js"><figcaption><span>public/private -return</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++a;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> outer2 = outer();</span><br><span class="line"><span class="built_in">console</span>.log(outer2());</span><br><span class="line"><span class="built_in">console</span>.log(outer2());</span><br></pre></td></tr></table></figure><p>이전에 본 클로저 예제 입니다.</p><ul><li><code>outer</code>함수를 종료할 때 <code>inner</code> 함수를 반환함으로써 <code>outer</code>함수의 지역변수 a의 값을 외부에서도 읽을 수 있게 되었습니다.</li></ul><ul><li>이처럼 클로저를 활용하면 외부 스코프에서 함수 내부의 변수들 중 선택적으로 일부 변수에 대한 접근 권환을 부여할 수 있습니다. (<code>return</code>을 활용하여)</li></ul><ul><li><code>outer</code>함수는 외부(전역 스코프)로 부터 철저하게 격리된 닫힌 공간입니다.<br>외부에서는 외부 공간에 노출돼 있는 <code>outer</code>라는 변수를 통해 <code>outer</code>함수를 실행할 수는 있지만, <code>outer</code>함수 내부에는 어떠한 개입도 할 수 없습니다.<br>외부에는 오직 <code>outer</code>함수가 <code>return</code>한 정보에만 접근할 수 있습니다.<br><code>return</code>값이 외부에 정보를 제공하는 유일한 수단이 됩니다.</li></ul><ul><li>외부에 제공하고자 하는 정보들을 모아서 <code>return</code>하고, 내부에서만 사용할 정보들은 <code>return</code>하지 않는 것으로 접근 권한 제어가 가능한 것입니다.</li></ul><ul><li><code>return</code>한 변수들은 공개 맴버(<code>public member</code>)가 되고, 그렇지 않은 변수들은 비공개 맴버(<code>private member</code>)가 되는 것입니다.</li></ul><hr><h4 id="접근-권한-제어를-통한-보드-게임-예시"><a href="#접근-권한-제어를-통한-보드-게임-예시" class="headerlink" title="접근 권한 제어를 통한 보드 게임 예시"></a>접근 권한 제어를 통한 보드 게임 예시</h4><p>자동차 경주 보드 게임.</p><p>규칙</p><pre><code>1. 각 턴마다 주사위를 굴려 나온 숫자(km)만큼 이동.2. 차량별로 연료량(fuel)과 연비(power)는 무작위로 생성.3. 남은 연료가 이동할 거리에 필요한 연료보다 부족하면 이동 불가.4. 모든 유저가 이동할 수 없는 턴에 게임이 종료됨.5. 게임 종료 시 가장 멀리 이동해 있는 사람이 승리.</code></pre><figure class="highlight js"><figcaption><span>규칙에 따른 간단한 자동차 객체</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123;</span><br><span class="line">  fuel: <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">10</span>), <span class="comment">// 연료(L)</span></span><br><span class="line">  power: <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">3</span> + <span class="number">2</span>), <span class="comment">// 연비(km/L)</span></span><br><span class="line">  moved: <span class="number">0</span>, <span class="comment">// 총 이동거리</span></span><br><span class="line">  run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> km = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">var</span> wasteFuel = km / <span class="keyword">this</span>.power;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fuel &lt; wasteFuel) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'이동불가'</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.fuel -= wasteFuel;</span><br><span class="line">    <span class="keyword">this</span>.moved += km;</span><br><span class="line">    <span class="built_in">console</span>.log(km + <span class="string">'km 이동 (총 '</span> + <span class="keyword">this</span>.moved + <span class="string">'km)'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위 코드는 <code>run</code> 메서드를 실행할 때마다 <code>car</code>객체의 <code>fuel</code>, <code>moved</code> 값이 변합니다.</p><p>하지만 자바스크립트를 아는사람이 <code>car</code>객체의 <code>fuel</code>, <code>power</code>, <code>moved</code>값을 직접 지정해 버린다면 공평한 게임이 되지 못합니다. </p><ul><li>이렇게 값을 바꾸지 못하도록 객체가 아닌 함수로 만들고, 필요한 맴버만을 <code>return</code>할 필요가 있습니다.</li></ul><figure class="highlight js"><figcaption><span>함수를 실행함으로써 객체 생성</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createCar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fuel = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">10</span>); <span class="comment">// 연료(L)</span></span><br><span class="line">  <span class="keyword">var</span> power = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">3</span> + <span class="number">2</span>); <span class="comment">// 연비(km / L)</span></span><br><span class="line">  <span class="keyword">var</span> moved = <span class="number">0</span>; <span class="comment">// 총 이동거리</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> moved() &#123;</span><br><span class="line">      <span class="keyword">return</span> moved;</span><br><span class="line">    &#125;,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> km = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">6</span>);</span><br><span class="line">      <span class="keyword">var</span> wasteFuel = km / power;</span><br><span class="line">      <span class="keyword">if</span> (fuel &lt; wasteFuel) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'이동불가'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      fuel -= wasteFuel;</span><br><span class="line">      moved += km;</span><br><span class="line">      <span class="built_in">console</span>.log(km + <span class="string">'km 이동 (총 '</span> + moved + <span class="string">'km). 남은 연료: '</span> + fuel);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> car = createCar();</span><br></pre></td></tr></table></figure><ul><li><p><code>createCar</code>라는 함수를 실행함으로써 객체를 생성하게 했습니다. <code>fuel</code>, <code>power</code> 변수는 비공개 맴버로 지정해 외부에서의 접근을 제한했고, <code>moved</code>변수는 <code>getter</code>만을 부여함으로써 “읽기전용” 속성을 부여했습니다.</p></li><li><p>이제 외부에서는 오직 <code>run</code>메서드를 실행하는 것과 현재의 <code>moved</code>값을 확인하는 두 가지 동작만 할 수 있습니다.</p></li><li><p><code>run</code>메서드를 다른 내용으로 덮어씌우는 어뷰징은 여전히 가능한 상태이긴 하지만 앞서의 코드보다 훨씬 안전한 코드가 됐습니다. 이런 어뷰징까지 막기 위해서는 객체를 <code>return</code>하기 전에 미리 변경할 수 없게끔 조치를 취해야 합니다.</p></li></ul><figure class="highlight js"><figcaption><span>Object.freeze</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createCar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fuel = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">10</span>); <span class="comment">// 연료(L)</span></span><br><span class="line">  <span class="keyword">var</span> power = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">3</span> + <span class="number">2</span>); <span class="comment">// 연비(km / L)</span></span><br><span class="line">  <span class="keyword">var</span> moved = <span class="number">0</span>; <span class="comment">// 총 이동거리</span></span><br><span class="line">  <span class="keyword">var</span> publicMembers = &#123;</span><br><span class="line">    <span class="keyword">get</span> moved() &#123;</span><br><span class="line">      <span class="keyword">return</span> moved;</span><br><span class="line">    &#125;,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> km = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">6</span>);</span><br><span class="line">      <span class="keyword">var</span> wasteFuel = km / power;</span><br><span class="line">      <span class="keyword">if</span> (fuel &lt; wasteFuel) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'이동불가'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      fuel -= wasteFuel;</span><br><span class="line">      moved += km;</span><br><span class="line">      <span class="built_in">console</span>.log(km + <span class="string">'km 이동 (총 '</span> + moved + <span class="string">'km). 남은 연료: '</span> + fuel);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">Object</span>.freeze(publicMembers);</span><br><span class="line">  <span class="keyword">return</span> publicMembers;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> car = createCar();</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze</a>를 사용하여 <code>publicMembers</code>객체를 동결객체로 만들었습니다.</li></ul><ul><li><code>Object.freeze</code>메서드는 호출된 객체의 직속 속성만 동결하며 내부의 속성 값이 객체라면 그 객체는 동결되지 않아 추가/제거/재할당의 대상이 될 수 있으므로 (얕은동결) 주의하여야 합니다.</li></ul><hr><h4 id="클로저를-활용해-접근권한-제어-방법-정리"><a href="#클로저를-활용해-접근권한-제어-방법-정리" class="headerlink" title="클로저를 활용해 접근권한 제어 방법 정리"></a>클로저를 활용해 접근권한 제어 방법 정리</h4><ol><li><p>함수에서 지역변수 및 내부함수 등을 생성</p></li><li><p>외부에 접근권한을 주고자 하는 대상들로 구성된 참조형 데이터(대상이 여럿일 경우 객체 또는 배열, 하나일 경우 함수)를 return 합니다.</p></li><li><p>return한 변수들은 공개 맴버가 되고, 그렇지 않은 변수들은 비공개 맴버가 됩니다.</p></li></ol><hr><h3 id="부분-적용-함수"><a href="#부분-적용-함수" class="headerlink" title="부분 적용 함수"></a>부분 적용 함수</h3><p>부분 적용 함수(<code>partially applied function</code>)란 n개의 인자를 받는 함수에 미리 m개의 인자만 넘겨 기억시켰다가. 나중에 나머지 인자를 넘길 때 원래 함수의 실행 결과를 얻을 수 있게 하는 함수입니다.</p><p><code>this</code>를 바인딩해야 하는 점을 제외하면 <code>bind</code>메서드의 실행 결과가 바로 부분 적용 함수입니다.</p><figure class="highlight js"><figcaption><span>bind - 부분 적용 함수</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    result += <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> addPartial = add.bind(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(addPartial(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><p><code>addPartial</code> 함수에 <code>this</code>값 <code>null</code>과 인자 5개를 미리 적용하고, 대기합니다.<br>추후에 추가적으로 인자들을 전달하며 호출하면 대기중이던 인자들과 차례대로 적용되어 실행합니다.</p><p><code>add</code>함수는 <code>this</code>값을 사용하지 않지만, <code>bind</code>메서드는 <code>this</code>값을 변경할 수 밖에 없기 때문에 <code>this</code>에 관여하지 않는 다른 방법의 부분 적용 함수가 필요합니다.</p><p>// p 135 ~ 137 보류</p><p>디바운스(<code>debounce</code>)는 짧은 시간 동안 동일한 이벤트가 많이 발생한 경우 이를 전부 처리하지 않고 처음 또는 마지막에 발생한 이벤트에 대해 한 번만 처리하는 것으로, <code>scroll</code>, <code>wheel</code>, <code>mousemove</code>, <code>resize</code>등에 적용하기 좋습니다.</p><figure class="highlight js"><figcaption><span>부분 적용 함수 - 디바운스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">eventName, func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeoutId = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(eventName, <span class="string">'event 발생'</span>);</span><br><span class="line">    clearTimeout(timeoutId);</span><br><span class="line">    timeoutId = setTimeout(func.bind(self, event), wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> moveHandler = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'move event 처리'</span>); &#125;;</span><br><span class="line"><span class="keyword">var</span> wheelHandler = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'wheel event 처리'</span>); &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">  <span class="string">'mousemove'</span>,</span><br><span class="line">  debounce(<span class="string">'move'</span>, moveHandler, <span class="number">500</span>));</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">  <span class="string">'mousewheel'</span>,</span><br><span class="line">  debounce(<span class="string">'wheel'</span>, wheelHandler, <span class="number">700</span>));</span><br></pre></td></tr></table></figure><ul><li><code>debounce</code> 함수는 출력 용도로 지정한 <code>eventName</code>과 실행할 함수(<code>func</code>),마지막으로 발생한 이벤트인지 여부를 판단하기 위한 대기시간 (<code>wait(</code>(ms))을 받습니다.</li></ul><ul><li>내부에서는 <code>timeoutId</code> 변수를 생성하고, 클로저로 <code>EventListener</code>에 의해 호출될 함수를 반환합니다. 반환될 함수 내부에서는 <code>setTimeout</code>을 사용하기 위해 <code>this</code>를 별도의 변수에 담고 <code>clearTimeout</code>으로 대기큐를 초기화하게 했습니다.</li></ul><ul><li>마지막으로 <code>setTimeout</code>으로 <code>wait</code> 시간만큼 지연시킨 다음, 원래의 <code>func</code>를 호출하는 형태입니다.</li></ul><ul><li>최초의 event가 발생하면 <code>timeoutId = setTimeout(func,bind(self,event),wait)</code>에 의해 timeout의 대기열에 ‘wait 시간 뒤에 func를 실행 함’이라는 내용이 담깁니다. 그런데 <code>wait</code>시간이 경과하기 전에 동일한 event가 발생하게 되면 앞의 <code>clearTimeout(timeoutId)</code>에 의해 앞에 저장했던 대기열을 초기화하고, 다시 <code>timeoutId = setTimeout(func,bind(self,event),wait)</code>에서 새로운 대기열을 등록합니다.</li></ul><ul><li>결국 각 동일한 이벤트가 이전 이벤트로 부터 <code>wait</code>시간 내에 다시 발생하는 한 마지막에 발생한 이벤트만이 초기화되지 않고 실행됩니다.</li></ul><ul><li><code>debounce</code>함수에서 클로저로 처리되는 변수는 <code>eventName</code>, <code>func</code>, <code>wait</code>, <code>timeoutId</code>입니다.</li></ul><hr><h3 id="커링-함수"><a href="#커링-함수" class="headerlink" title="커링 함수"></a>커링 함수</h3><hr><h2 id="closure">정리</h2><ul><li>클로저란 어떤 함수에서 선언한 변수를 참조하는 내부함수를 외부로 전달할 경우, 함수의 실행 컨텍스트가 종료된 후에도 해당 변수가 사라지지 않는 현상입니다.</li></ul><ul><li>내부 함수를 외부로 전달하는 방법에는 함수를 return하는 경우뿐아니라 콜백으로 전달하는 경우도 포함됩니다.</li></ul><ul><li>클로저는 그 본질이 메모리를 계속 차지하는 개념이므로 더는 사용하지 않게 된 클로저에 대해서는 메모리를 차지하지 않도록 관리해줄 필요가 있습니다.</li></ul>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/05/03/%ED%81%B4%EB%A1%9C%EC%A0%80-Core-JavaScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>콜백 함수 -Core JavaScript</title>
      <link>https://hdw0903.github.io/2020/04/30/%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-Core-JavaScript/</link>
      <guid>https://hdw0903.github.io/2020/04/30/%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-Core-JavaScript/</guid>
      <pubDate>Thu, 30 Apr 2020 11:03:50 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;콜백 함수&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/30/콜백-함수-Core-JavaScript/#callback&quot;&gt;콜백 함수란?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/30/콜백-함수-Core-JavaScript/#callback_제어권&quot;&gt;제어권&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;인자&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/30/콜백-함수-Core-JavaScript/#callback_function&quot;&gt;콜백 함수는 함수다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/30/콜백-함수-Core-JavaScript/#callback_this_binding&quot;&gt;콜백 함수 내부의 this에 다른 값 바인딩하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/30/콜백-함수-Core-JavaScript/#callback_hell&quot;&gt;콜백 지옥과 비동기 제어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>콜백 함수<ul><li><a href="/2020/04/30/콜백-함수-Core-JavaScript/#callback">콜백 함수란?</a></li><li><a href="/2020/04/30/콜백-함수-Core-JavaScript/#callback_제어권">제어권</a><ul><li>인자</li><li>this</li></ul></li><li><a href="/2020/04/30/콜백-함수-Core-JavaScript/#callback_function">콜백 함수는 함수다.</a></li><li><a href="/2020/04/30/콜백-함수-Core-JavaScript/#callback_this_binding">콜백 함수 내부의 this에 다른 값 바인딩하기</a></li><li><a href="/2020/04/30/콜백-함수-Core-JavaScript/#callback_hell">콜백 지옥과 비동기 제어</a></li></ul></li></ul><a id="more"></a><hr><h2 id="callback">콜백 함수란?</h2><p>콜백 함수(<code>callback function</code>)는 다른 코드의 인자로 넘겨주는 함수 입니다.</p><p><code>callback</code>은 부르다, 호출하다, 실행하다의 의미인 call 과 되돌아오다 back의 합성어로,<br>되돌아 호출하다라는 의미로 이해할 수 있습니다.</p><p>특정 <code>함수a</code>를 호출하면서 ‘특정 조건일때 <code>함수b</code>를 실행해서 알려달라는’요청을 보내는 것입니다.<br><code>함수a</code>의 입장에서는 해당 조건이 갖춰졌는지 여부를 스스로 판단하고 <code>함수b</code>를 직접 호출합니다.</p><p>이처럼 콜백 함수는 다른 코드(함수 또는 메서드)에게 인자를 넘겨줌으로써 그 <mark>제어권도 함께 위임한 함수</mark>입니다. (콜백 함수를 위임받은 코드는 자체적인 내부 로직에 의해 이 콜백 함수를 적절한 시점에 실행합니다.)</p><hr><h2 id="callback_제어권">제어권</h2><p>몇 가지 예제</p><hr><h3 id="호출-시점"><a href="#호출-시점" class="headerlink" title="호출 시점"></a>호출 시점</h3><figure class="highlight js"><figcaption><span>setInterval</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="number">2.</span> <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(count);</span><br><span class="line">  <span class="keyword">if</span> (++count &gt; <span class="number">4</span>) clearInterval(timer);</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><p>우선 <code>setInterval</code> 메서드의 형태를 살펴보면 다음과 같습니다.</p><blockquote><p>var 참조변수(interval ID) = scope.setInterval(func, delay[, param1, param2, …]);</p></blockquote><ul><li>socpe :<br><code>Window</code> 객체 또는 <code>Worker</code>의 인스턴스가 들어올 수 있습니다. 두 객체 모두 <code>setInterval</code> 메서드를 제공하기 때문입니다. 일반적인 브라우저 환경에서는 <code>window</code>를 생략하고 함수처럼 사용할 수 있습니다.</li></ul><ul><li>매개변수<br><code>func</code>, <code>delay</code> 값을 반드시 전달해야 합니다.<br>세 번째 매개변수 부터는 선택적 파라미터로 <code>func</code> 함수를 실행할때 전달할 파라미터입니다.<br><code>func</code>에 넘겨준 함수는 매 <code>delay(ms)</code>마다 실행되며, 그 결과로 어떤 값도 반환하지 않습니다.</li></ul><ul><li><code>setInterval</code>을 실행하면 반복적으로 실행되는 내용 자체를 특정할 수 있는 고유 ID 값이 반환됩니다.<br>이를 변수에 담는 이유는 반복 실행되는 중간에 종료(<code>clearInterval</code>)할 수 있게 하기 위해서 입니다.</li></ul><ol><li><p><code>count</code> 변수를 선언하고 0을 할당합니다.</p></li><li><p><code>timer</code> 변수를 선언하고 setInterval 결과를 할당했습니다.</p></li></ol><p><strong>위에 코드를 콜백 함수를 확인하기 쉽게 수정했습니다.</strong></p><figure class="highlight js"><figcaption><span>callback - setInterval</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> cbFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(count);</span><br><span class="line">  <span class="keyword">if</span> (++count &gt; <span class="number">4</span>) clearInterval(timer);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(cbFunc, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 실행 결과 --</span></span><br><span class="line"><span class="comment">// 0  (0.3초)</span></span><br><span class="line"><span class="comment">// 1  (0.6초)</span></span><br><span class="line"><span class="comment">// 2  (0.9초)</span></span><br><span class="line"><span class="comment">// 3  (1.2초)</span></span><br><span class="line"><span class="comment">// 4  (1.5초)</span></span><br></pre></td></tr></table></figure><ul><li><code>timer</code>변수에는 <code>setInterval</code>의 ID 값이 담기게 됩니다.</li></ul><ul><li><code>setInterval</code>에 전달한 첫 번째 인자인 <code>cbFunc</code>함수(이 함수가 곧 콜백함수입니다.)는 0.3초마다 자동으로 실행될 것입니다. </li></ul><ul><li>콜백 함수 내부에서는 <code>count</code> 값을 출력하고 1씩 증가시키며, <code>count</code>값이 4보다 크면 반복 실행이 종료됩니다.</li></ul><ul><li>제어권<br><code>setInterval</code> 메서드에 첫 번째 인자로 <code>cbFunc</code> 함수를 넘겨주자 제어권을 넘겨받은 <code>setInterval</code> 메서드는 0.3초마다 (지정된 시점) 이 익명 함수를 실행했습니다. 이처럼 <u>콜백 함수의 제어권을 넘겨받은 코드</u>는 <mark>콜백 함수 호출 시점에 대한 제어권</mark>을 가집니다.</li></ul><h3 id="인자-파라미터"><a href="#인자-파라미터" class="headerlink" title="인자 (파라미터)"></a>인자 (파라미터)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(currentValue, index);</span><br><span class="line">  <span class="keyword">return</span> currentValue + <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 실행 결과 --</span></span><br><span class="line"><span class="comment">// 10 0</span></span><br><span class="line"><span class="comment">// 20 1</span></span><br><span class="line"><span class="comment">// 30 2</span></span><br><span class="line"><span class="comment">// [15, 25, 35]</span></span><br></pre></td></tr></table></figure><ol><li><p><code>newArr</code> 변수를 선언하고 오른쪽에 배열 <code>[10, 20, 30]</code>에 <code>map</code> 메서드를 호출하고 그 결과를 할당합니다.</p><p><code>map</code>메서드의 동작 방식부터 살펴보도록 하겠습니다.</p><blockquote><p>Array.prototype.map(callback[, thisArg])<br>callback : function(currentValue, index, array)</p></blockquote><p><code>map</code> 메서드는 Array.prototype에 담긴 메서드입니다.</p><ul><li><p>파라미터</p><ul><li>첫 번째 인자: <code>callback</code> 함수를 받습니다</li><li>두 번째 인자: 생략가능한 파라미터이며, 콜백 함수 내부에서 <code>this</code>로 인식할 대상을 지정합니다. 생략시 일반적인 함수와 마찬가지로 전역객체를 참조하게 됩니다.</li></ul></li><li><p>반환 값</p><ul><li><code>map</code>메서드는 메서드의 대상이 되는 배열의 모든 요소들을 차례대로 불러와 콜백 함수를 반복 호출하고, <u>콜백 함수의 실행 결과를 모아 새로운 배열</u>을 반환합니다.</li></ul></li><li><p><code>callback</code>함수<br>콜백 함수의 첫 번째 인자에는 배열의 요소중 <code>현재값</code>, 두 번째 인자에는 <code>현재값의 index</code>, 세 번째 인자에는 <code>map</code>메서드의 <code>대상이 되는 배열</code>이 담깁니다.</p></li></ul></li></ol><ol start="2"><li><code>map</code> 메서드는 배열<code>[10, 20, 30]</code>의 각 요소를 차례대로 꺼내어 콜백 함수를 실행합니다.</li></ol><ol start="3"><li>첫 번째 요소에 대한 콜백 함수는 <code>currentValue</code>에 10이, <code>index</code>에는 index 0이 담긴 채 실행됩니다 <code>return currentValue + 5;</code> 코드를 실행하여 <code>(10 + 5)</code> 값인 <code>15</code>가 반환됩니다.</li></ol><ol start="4"><li>두 번째 요소에 대한 콜백 함수는 <code>currentValue</code>에 20이, <code>index</code>에는 index 1이 담긴 채 실행됩니다 <code>return currentValue + 5;</code> 코드를 실행하여 <code>(20 + 5)</code> 값인 <code>25</code>가 반환됩니다.</li></ol><ol start="5"><li>세 번째 요소에 대한 콜백 함수는 <code>currentValue</code>에 30이, <code>index</code>에는 index 2이 담긴 채 실행됩니다 <code>return currentValue + 5;</code> 코드를 실행하여 <code>(30 + 5)</code> 값인 <code>35</code>가 반환됩니다.</li></ol><ol start="6"><li>모든 요소에 대한 콜백 함수를 마치고 나면 <code>[15, 25, 35]</code>라는 새로운 배열이 만들어져 <code>newArr</code>변수에 할당됩니다.</li></ol><ol start="7"><li><code>console.log(newArr)</code> 코드에서 <code>newArr</code>변수에 할당된 새로운 배열이 출력됩니다.</li></ol><p><strong>중요 포인트</strong></p><p><code>콜백 함수</code>의 파라미터 순서를 바꾸면 안됩니다. <code>currentValue</code>, <code>index</code>순 이어야하며<br>바뀐다면 전혀 다른 값을 반환할 것입니다.</p><p><del>엔진은 파라미터로 받은 값의 단어(name)를 인식하는 것이 아니라 순서(첫 번째, 두 번째)에 의해서만 각각을 구분하고 인식합니다.</del> </p><hr><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>콜백 함수 내부에서의 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;, <span class="number">300</span>); <span class="comment">// (1) Window &#123; ... &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// (2) Window &#123; ... &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML += <span class="string">'&lt;button id="a"&gt;클릭&lt;/button&gt;'</span>;</span><br><span class="line"><span class="number">3.</span> <span class="built_in">document</span>.body.querySelector(<span class="string">'#a'</span>).addEventListener(</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, e); <span class="comment">// (3) &lt;button id="a"&gt;클릭&lt;/button&gt;</span></span><br><span class="line">  &#125; <span class="comment">// MouseEvent &#123; isTrusted: true, ... &#125;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol><li><code>setTimeout</code>은 내부에서 콜백 함수를 호출할 때 <code>call</code>메서드의 첫 번째 인자로 전역객체를 넘기게 됩니다. 콜백 함수 내부에서 <code>this</code>가 전역객체를 가리키게됩니다. </li></ol><ol start="2"><li><code>forEach</code>는 ‘별도의 인자로 this를 받는 경우’에 해당하지만 별도로 <code>this</code>를 지정해주지 않았기 때문에 전역객체를 가리키게됩니다.</li></ol><ol start="3"><li><code>addEventListener</code>는 내부에서 콜백 함수를 호출할 때 <code>call</code>메서드의 첫 번째 인자에 <code>addEventListener</code>메서드의 <code>this</code>를 넘기도록 정의되어 있습니다. 때문에 콜백 함수 내부에서의 <code>this</code>는 <code>addEventListener</code>를 호출한 주체 <code>HTML</code> 엘리먼트를 가리키게 됩니다. </li></ol><hr><h2 id="callback_function">콜백 함수는 함수다.</h2><p>콜백 함수로 객체의 메서드를 전달하더라도 그 메서드는 메서드가 아닌 함수로 호출됩니다.</p><figure class="highlight js"><figcaption><span>메서드를 콜백 함수로 전달한 경우</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  vals: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  logValues: <span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, v, i);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="number">2.</span> obj.logValues(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// &#123; vals: [1, 2, 3], logValues: f &#125; 1 2</span></span><br><span class="line"><span class="number">3.</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].forEach(obj.logValues); <span class="comment">// Window &#123; ... &#125; 4 0</span></span><br><span class="line"><span class="comment">// Window &#123; ... &#125; 5 1</span></span><br><span class="line"><span class="comment">// Window &#123; ... &#125; 6 2</span></span><br></pre></td></tr></table></figure><ol><li><code>obj</code> 객체의 <code>logValues</code>는 메서드로 정의됐습니다.</li></ol><ol start="2"><li>메서드의 이름 앞에 점(.)이 있으니 메서드로서 호출한 것 입니다. <code>this</code>는 <code>obj</code>를 가리키고 파라미터로 넘겨준 1, 2와 함께 출력됩니다.</li></ol><ol start="3"><li><code>obj.logValues</code>메서드를 <code>forEach</code> 함수의 콜백 함수로서 지정했습니다.<br><code>obj</code>를 <code>this</code>로 하는 메서드를 그대로 전달한 것이 아니라, <code>obj.logValues</code>가 가리키는 함수만 전달한 것입니다.<br>이 함수는 메서드로서 호출할 때가 아닌 한 <code>obj</code>와의 직접적인 연관이 없어집니다.<br><code>forEach</code>에 의해 콜백이 함수로서 호출되고, 별도로 <code>this</code>를 지정하지 않았으므로 <code>this</code>는 전역객체를 참조합니다.</li></ol><p><strong>중요 포인트</strong></p><p>어떤 함수의 인자(파라미터)에 객체의 메서드를 전달하더라도 메서드가 아닌 함수일 뿐입니다.<br>이 차이를 정확히 이해하는 것이 중요합니다.</p><hr><h2 id="callback_this_binding">콜백 함수 내부의 this에 다른 값 바인딩 하기</h2><p>콜백 함수에서 <code>this</code>를 지정하지 않으면 전역객체를 참조하게 되므로<br>객체의 메서드를 콜백 함수로 전달하면 해당 객체를 <code>this</code>로 참조할 수 없게됩니다.</p><p>별도의 인자(<code>thisArg</code>)로 <code>this</code>를 받는 함수의 경우에는 원하는 값을 넘겨주면 되지만 그렇지 않은 경우에는 <code>this</code>의 제어권도 넘겨주게 되므로 사용자가 임의로 값을 변경할 수 없습니다.</p><p>그래서 <makr>전통적으로는 <code>this</code>를 다른 변수에 담아 콜백 함수로 활용할 함수에서는 <code>this</code>대신 그 변수를 사용하게 하고, 이를 클로저로 만드는 방식이 많이 쓰였습니다.</mark></p><figure class="highlight js"><figcaption><span>콜백 함수 내부의 this에 다른 값을 바인딩 - 전통적인 방법(변수 사용)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'obj1'</span>,</span><br><span class="line">  func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(self.name);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> callback = obj1.func();</span><br><span class="line">setTimeout(callback, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><ol><li><code>obj1.func</code> 메서드 내부에서 <code>self</code> 변수에 <code>this</code>를 담고, 익명 함수를 선언하고 반환했습니다.</li></ol><ol start="2"><li><code>obj1.func</code>를 호출하면 앞서 선언한 내부함수가 반환되어 <code>callback</code> 변수에 할당됩니다.</li></ol><ol start="3"><li>이 <code>callback</code>변수를 <code>setTimeout</code> 함수에 인자로 전달하면 1초(1000ms) 뒤 <code>callback</code>이 실행되면서 <code>&quot;obj1&quot;</code>을 반환할 것입니다.</li></ol><p><strong>중요 포인트</strong><br>이 방식은 <code>this</code>를 다른 변수에 담아 함수내에서 <code>this</code> 대신 그 변수를 사용하게하여 실제로는 <code>this</code>를 사용하지 않을뿐더러 번거롭습니다.</p><ul><li><p>ES5에 등장한 <code>bind</code>메서드를 사용하면 더욱 간편히 <code>this</code>를 바인딩할 수 있습니다.</p><figure class="highlight js"><figcaption><span>콜백 함수 내부의 this에 다른 값 바인딩 - bind 메서드 사용</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'obj1'</span>,</span><br><span class="line">  func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">setTimeout(obj1.func.bind(obj1), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">'obj2'</span> &#125;;</span><br><span class="line">setTimeout(obj1.func.bind(obj2), <span class="number">1500</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>bind</code> 메서드의 첫 번째 인자(<code>thisArg</code>)로 <code>this</code>로 지정할 값을 전달합니다.<br>함수가 실행될때 <code>this</code>는 <code>thisArg</code>로 전달받은 값을 참조하게 됩니다.</p></li></ul><hr><h2 id="callback_hell">콜백 지옥과 비동기 제어</h2><ul><li><p>콜백 지옥(<code>callback hell</code>)이란?</p><p>콜백 함수를 익명 함수로 전달하는 과정이 반복되어 코드의 들여쓰기 수준이 감당하기 힘들 정도로 깊어지는 현상.<br>주로 이벤트 처리나 서버 통신과 같이 비동기적인 작업을 수행하기 위해 이런 형태가 자주 등장하곤 하는데, 가독성이 떨어질 뿐더러 코드를 수정하기도 힘들다.</p></li></ul><ul><li><p>비동기(<code>asynchronous</code>)란?</p><p>동기(<code>synchronous</code>)의 반대말로 <mark>동기적인 코드는 현재 실행 중인 코드가 완료된 후에야 다음 코드를 실행하는 방식</mark><br>비동기적 코드는 <mark>현재 실행 중인 코드의 완료 여부와 무관하게 즉시 다음 코드로 넘어갑니다.</mark></p></li></ul><ol><li><p>사용자의 요청에 의해 특정 시간이 경과되기 전까지 어떤 함수의 실행을 보류한다거나 -<code>setTimeout</code></p></li><li><p>사용자의 직접적인 개입이 있을 때 어떤 함수를 실행하도록 대기한다거나 -<code>addEventListener</code></p></li><li><p>웹브라우저 자체가 아닌 별도의 대상에 무언가를 요청하고 그에 대한 응답이 왔을 때 어떤 함수를 실행하도록 대기하는 등 -<code>XMLHttpRequest</code></p><p><del>CPU의 계산에 의해 즉시 처리가 가능한 대부분의 코드는 동기적인 코드입니다.</del><br><mark>별도의 요청, 실행 대기, 보류 등과 관련된 코드는 비동기적인 코드입니다.</mark></p></li></ol><ul><li>현대의 자바스크립트는 웹의 복잡도가 높아진 만큼 비동기적인 코드의 비중이 예전보다 훨씬 높아진 상황입니다. (콜백 지옥에 빠지기도 훨씬 쉬워졌습니다.)</li></ul><hr><p><strong>간단한 콜백 지옥 예시를 살펴봅시다.</strong></p><figure class="highlight js"><figcaption><span>callback-hell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> coffeeList = name;</span><br><span class="line">    <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        coffeeList += <span class="string">', '</span> + name;</span><br><span class="line">        <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line"></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">            coffeeList += <span class="string">', '</span> + name;</span><br><span class="line">            <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line"></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">                coffeeList += <span class="string">', '</span> + name;</span><br><span class="line">                <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line">              &#125;, <span class="number">500</span>, <span class="string">'카페라떼'</span>);</span><br><span class="line">          &#125;, <span class="number">500</span>, <span class="string">'카페모카'</span>);</span><br><span class="line">      &#125;, <span class="number">500</span>, <span class="string">'아메리카노'</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>, <span class="string">'에스프레소'</span>);</span><br></pre></td></tr></table></figure><ul><li><p>0.5 초마다 커피 목록을 수집하고 출력합니다. 각 콜백은 커피 이름을 전달하고 <code>coffeeList</code>에 추가합니다. </p></li><li><p>실행에는 지장이 없는 코드입니다만, 들여쓰기 수준이 과도하게 깊어졌을 뿐더러 수정하기도 불편하고 값이 전달되는 순서가 아래에서 위로 향하고 있어 어색하게도 느껴집니다.</p></li></ul><p>가독성 문제와 어색함을 동시에 해결하는 방법은 익명 콜백함수를 모두 기명함수로 전환하는 방법이 있습니다…?!</p><hr><figure class="highlight js"><figcaption><span>기명함수로 변환</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coffeeList = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addEspresso = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  coffeeList = name;</span><br><span class="line">  <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line">  setTimeout(addAmericano, <span class="number">500</span>, <span class="string">'아메리카노'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> addAmericano = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  coffeeList += <span class="string">', '</span> + name;</span><br><span class="line">  <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line">  setTimeout(addMocha, <span class="number">500</span>, <span class="string">'카페모카'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> addMocha = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  coffeeList += <span class="string">', '</span> + name;</span><br><span class="line">  <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line">  setTimeout(addLatte, <span class="number">500</span>, <span class="string">'카페라떼'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> addLatte = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  coffeeList += <span class="string">', '</span> + name;</span><br><span class="line">  <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setTimeout(addEspresso, <span class="number">500</span>, <span class="string">'에스프레소'</span>);</span><br></pre></td></tr></table></figure><ul><li>익명함수를 기명함수로 변환하므로서 콜백 지옥을 해결한 예시입니다.</li></ul><p>함수 선언과 함수 호출을 구분한다면 코드의 가독성을 높여 코드를 위에서 아래로 읽어내려가는데 어려움이 없습니다. 변수가 전역으로 전개되긴 했지만 즉시 실행 함수 등으로 감싸면 해결할 수 있는 문제입니다.</p><p>하지만 코드명을 일일이 따라다녀야 하므로 오히려 헷갈릴 여지도 있습니다.</p><ul><li>자바스크립트는 비동기적인 작업들을 동기적으로(혹은 동기적인 것처럼 보이도록) 처리해주는 방법을 고안했고, 그 결과 <code>ES6</code>에서 <code>Promise</code>, <code>Generator</code>등이 도입됐으며, <code>ES8(ES2017)</code>에서는 <code>async</code>, <code>wait</code>가 도입됐습니다.</li></ul><hr><p><strong>이들을 활용한 표현법도 알아봅시다.</strong></p><figure class="highlight js"><figcaption><span>비동기 작업의 동기적 표현 -Promise</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'에스프레소'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">    resolve(name);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">prevName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name = prevName + <span class="string">', 아메리카노'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">        resolve(name);</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">prevName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name = prevName + <span class="string">', 카페모카'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">        resolve(name);</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">prevName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name = prevName + <span class="string">', 카페라떼'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">        resolve(name);</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><code>ES6</code>의 <code>Promise</code>를 이용한 방법입니다. <code>new</code>연산자와 함께 호출한 <code>Promise</code>의 인자로 넘겨주는 콜백 함수는 호출할 때 바로 실행되지만 내부에 <code>resolve</code> 또는 <code>reject</code> 함수를 호출하는 구문이 있을 경우 둘 중하나가 충족되어 실행되기 전까지는 <code>.then</code> 또는 <code>.catch</code> 구문으로 넘어가지 않습니다.</p><p>따라서 비동기 작업이 완료될 때 <code>resolve</code> 또는 <code>reject</code>를 호출하는 방법으로 비동기 작업의 동기적 표현이 가능합니다.</p><hr><p>다음은 위에 코드의 반복적인 내용을 함수화 하여 더욱 짧게 표현한 것입니다.</p><figure class="highlight js"><figcaption><span>Promise 동기적표현 함수화</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addCoffee = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">prevName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> newName = prevName ? prevName + <span class="string">', '</span> + name : name;</span><br><span class="line">        <span class="built_in">console</span>.log(newName);</span><br><span class="line">        resolve(newName);</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">addCoffee(<span class="string">'에스프레소'</span>)()</span><br><span class="line">  .then(addCoffee(<span class="string">'아메리카노'</span>))</span><br><span class="line">  .then(addCoffee(<span class="string">'카페모카'</span>))</span><br><span class="line">  .then(addCoffee(<span class="string">'카페라떼'</span>));</span><br></pre></td></tr></table></figure><hr><ul><li>Generator 활용</li></ul><figure class="highlight js"><figcaption><span>비동기 작업의 동기적 표현 -Generator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addCoffee = <span class="function"><span class="keyword">function</span>(<span class="params">prevName, name</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    coffeeMaker.next(prevName ? prevName + <span class="string">', '</span> + name : name);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> coffeeGenerator = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> espresso = <span class="keyword">yield</span> addCoffee(<span class="string">''</span>, <span class="string">'에스프레소'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(espresso);</span><br><span class="line">  <span class="keyword">var</span> americano = <span class="keyword">yield</span> addCoffee(espresso, <span class="string">'아메리카노'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(americano);</span><br><span class="line">  <span class="keyword">var</span> mocha = <span class="keyword">yield</span> addCoffee(americano, <span class="string">'카페모카'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(mocha);</span><br><span class="line">  <span class="keyword">var</span> latte = <span class="keyword">yield</span> addCoffee(mocha, <span class="string">'카페라떼'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(latte);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> coffeeMaker = coffeeGenerator();</span><br><span class="line">coffeeMaker.next();</span><br></pre></td></tr></table></figure><p><code>ES6</code>의 <code>Generator</code>를 이용한 방법입니다.<br><code>Generator</code> 함수를 실행하여 <code>Iterator</code>을 반환받고 <code>Iterator</code>의 메서드 <code>next</code>를 사용할 수 있습니다</p><p><code>next</code> 메서드를 호출하면 <code>Generator</code> 함수 내부에서 첫 번째 <code>yield</code>를 만나면 함수 실행을 멈추게 되고 다시 <code>next</code>를 호출하면 멈춘 부분부터 그 다음에 등장하는 <code>yield</code>에서 함수 실행을 멈추게 됩니다.</p><p>즉, 비동기 작업이 완료되는 시점마다 <code>next</code> 메서드를 호출해준다면 <code>Generator</code> 함수 내부의 소스가 순차적으로 진행되게 합니다.</p><hr><ul><li>Promise + async/await</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addCoffee = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(name);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> coffeeMaker = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> coffeeList = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> _addCoffee = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    coffeeList += (coffeeList ? <span class="string">','</span> : <span class="string">''</span>) + (<span class="keyword">await</span> addCoffee(name));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">await</span> _addCoffee(<span class="string">'에스프레소'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line">  <span class="keyword">await</span> _addCoffee(<span class="string">'아메리카노'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line">  <span class="keyword">await</span> _addCoffee(<span class="string">'카페모카'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line">  <span class="keyword">await</span> _addCoffee(<span class="string">'카페라떼'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(coffeeList);</span><br><span class="line">&#125;;</span><br><span class="line">coffeeMaker();</span><br></pre></td></tr></table></figure><p><code>ES8(ES2017)</code>에서 추가된 <code>async/await</code>는 비동기 작업을 수행하고자 하는 함수 앞에 <code>async</code>를 표기하고, 함수 내부에서 비동기 작업이 필요한 위치마다 <code>await</code>를 표기하는 것만으로 뒤의 내용을 <code>Promise</code>로 자동 전환하고, 해당 내용이 <code>resolve</code>된 이후에야 다음으로 진행합니다.</p><p><code>Promise</code>의 <code>then</code>과 비슷한 효과를 얻을 수 있습니다.</p><hr><h2 id="callback">정리</h2><ul><li>콜백 함수는 다른 코드에 인자를 넘겨줌으로써 <mark>제어권도 함께 위임</mark>.</li></ul><ul><li><p>제어권을 넘겨받은 코드는 </p><ol><li><p>콜백 함수를 호출하는 시점을 지정.</p></li><li><p>콜백 함수를 호출할 때 <mark>인자로 넘겨줄 값의 순서를 변경하지 말 것.</mark></p></li><li><p>콜백 함수는 <code>this</code>를 지정하여 사용할 수 있는 함수가 존재, 지정하지 않을 경우 전역객체를 참조<br>사용자 임의로 <code>this</code>를 변경하고 싶은 경우 <code>bind</code> 메서드 활용</p></li></ol></li></ul><ul><li>함수에 인자로 메서드를 전달하더라도 이는 <mark>함수로서 실행됨</mark>.</li></ul><ul><li>비동기 제어를 위해 콜백 함수를 사용하다 보면 콜백 지옥에 빠지기 쉬움.<br>최근의 자바스크립트에서는 <mark>Promise, Generator, async/await</mark> 등 콜백 지옥을 벗어날 수 있는 방법들이 등장함.</li></ul>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/30/%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-Core-JavaScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>this -Core JavaScript</title>
      <link>https://hdw0903.github.io/2020/04/27/this-Core-JavaScript/</link>
      <guid>https://hdw0903.github.io/2020/04/27/this-Core-JavaScript/</guid>
      <pubDate>Mon, 27 Apr 2020 12:50:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;자바스크립트에서의 this는 어디서든 사용할 수 있습니다.&lt;br&gt;this는 상황에 따라 참조하는 대상이 달라질 수 있습니다.&lt;br&gt;함수와 객체(메서드) 구분이 느슨한 자바스크립트에서 이 둘을 구분하는 유일한 기능입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/27/this-Core-JavaScript/#this&quot;&gt;상황에 따라 달라지는 this&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;전역 공간에서의 this&lt;/li&gt;
&lt;li&gt;메서드로서 호출할 때 메서드 내부의 this&lt;ul&gt;
&lt;li&gt;함수 vs 메서드&lt;/li&gt;
&lt;li&gt;메서드 내부에서의 this&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;함수로서 호출할 때 그 함수 내부에서의 this&lt;ul&gt;
&lt;li&gt;함수 내부에서의 this&lt;/li&gt;
&lt;li&gt;메서드의 내부함수에서의 this&lt;/li&gt;
&lt;li&gt;메서드 내부 함수에서의 this를 우회하는 방법&lt;/li&gt;
&lt;li&gt;this를 바인딩하지 않는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;콜백 함수 호출시 그 함수 내부에서의 this&lt;/li&gt;
&lt;li&gt;Class 함수 내부에서의 this &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/27/this-Core-JavaScript/#this_binding&quot;&gt;명시적으로 this를 바인딩하는 방법&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;call 메서드&lt;/li&gt;
&lt;li&gt;apply 메서드&lt;/li&gt;
&lt;li&gt;call / apply 메서드의 활용&lt;ul&gt;
&lt;li&gt;생성자 내부에서 다른 생성자를 호출&lt;/li&gt;
&lt;li&gt;여러 인수를 묶어 하나의 배열로 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bind 메서드&lt;ul&gt;
&lt;li&gt;name 프로퍼티&lt;/li&gt;
&lt;li&gt;상위 컨텍스트의 this를 내부함수나 콜백 함수에 전달하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;화살표 =&amp;gt; 함수의 예외사항&lt;/li&gt;
&lt;li&gt;별도의 인자로 this를 받는 경우(콜백 함수 내에서의 this)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/27/this-Core-JavaScript/#this_point&quot;&gt;this 정리&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>자바스크립트에서의 this는 어디서든 사용할 수 있습니다.<br>this는 상황에 따라 참조하는 대상이 달라질 수 있습니다.<br>함수와 객체(메서드) 구분이 느슨한 자바스크립트에서 이 둘을 구분하는 유일한 기능입니다.</p><ul><li>this<ul><li><a href="/2020/04/27/this-Core-JavaScript/#this">상황에 따라 달라지는 this</a><ul><li>전역 공간에서의 this</li><li>메서드로서 호출할 때 메서드 내부의 this<ul><li>함수 vs 메서드</li><li>메서드 내부에서의 this</li></ul></li><li>함수로서 호출할 때 그 함수 내부에서의 this<ul><li>함수 내부에서의 this</li><li>메서드의 내부함수에서의 this</li><li>메서드 내부 함수에서의 this를 우회하는 방법</li><li>this를 바인딩하지 않는 함수</li></ul></li><li>콜백 함수 호출시 그 함수 내부에서의 this</li><li>Class 함수 내부에서의 this </li></ul></li><li><a href="/2020/04/27/this-Core-JavaScript/#this_binding">명시적으로 this를 바인딩하는 방법</a><ul><li>call 메서드</li><li>apply 메서드</li><li>call / apply 메서드의 활용<ul><li>생성자 내부에서 다른 생성자를 호출</li><li>여러 인수를 묶어 하나의 배열로 전달</li></ul></li><li>bind 메서드<ul><li>name 프로퍼티</li><li>상위 컨텍스트의 this를 내부함수나 콜백 함수에 전달하기</li></ul></li><li>화살표 =&gt; 함수의 예외사항</li><li>별도의 인자로 this를 받는 경우(콜백 함수 내에서의 this)</li></ul></li><li><a href="/2020/04/27/this-Core-JavaScript/#this_point">this 정리</a> </li></ul></li></ul><a id="more"></a><hr><h2 id="this">상황에 따라 달라지는 this</h2><ul><li><code>this</code>는 기본적으로 <mark>실행 컨텍스트가 생성될 때 함께 결정됩니다.</mark><br>실행 컨텍스트는 함수를 호출할 때 생성되므로, <code>this</code><mark>는 함수를 호출할 때 결정된다고 할 수 있습니다.</mark></li></ul><hr><h3 id="전역-공간에서의-this"><a href="#전역-공간에서의-this" class="headerlink" title="전역 공간에서의 this"></a>전역 공간에서의 this</h3><p>전역 공간에서 <code>this</code>는 전역 객체를 가리킵니다. 브라우저 환경에서 전역객체는 <code>window</code>이고 Node.js 환경에서는 <code>global</code>입니다.</p><ul><li><p>참고 : 전역 변수<br>전역 변수를 선언하면 자바스크립트 엔진은 전역객체의 프로퍼티로 할당시킴.</p><figure class="highlight js"><figcaption><span>전역객체 window의 프로퍼티</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 1 (전역객체의 프로퍼티)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 1 (this는 현재 전역객체 참조)</span></span><br></pre></td></tr></table></figure><p><mark>사실 자바스크립트의 모든 변수는 실은 특정 객체의 프로퍼티로 동작합니다.</mark><br>이 특정 객체란 실행 컨텍스트의 <code>LexicalEnvironment</code>를 말합니다.<br>실행 컨텍스트는 변수를 수집하여 <code>LexicalEnvironment</code>의 프로퍼티로 지정합니다.<br>이후 변수를 호출하면 <code>LexicalEnvironment</code>를 조회하여 일치하는 프로퍼티가 있을 경우 그 값을 반환합니다.</p><p>전역 컨텍스트의 <code>LexicalEnvironment</code>는 전역객체를 참조하므로 var a 선언/할당 이후 <code>window.a</code> 와 <code>this.a</code>가 1이 나오는 이유는 당연합니다.<br><mark>a를 직접 호출했을 때도 1이 나오는 이유는 무엇일까요?</mark><br>변수 a에 접근하려고 하면 스코프 체인에서 a를 검색하다가 가장 마지막에 도달하는 전역 스코프의 <code>LexicalEnvironment</code>에서 해당 프로퍼티 a를 조회하여 그 값을 반환하기 때문입니다.</p></li></ul><ul><li><p>전역 공간에서 var로 변수를 선언하는 대신 window의 프로퍼티에 직접 할당하더라도 결과적으로 똑같이 동작합니다. 하지만 <code>delete</code> 연산자를 사용하는 경우 다른 결과를 반환합니다.</p><ul><li><code>var</code> 변수로 선언한 경우 : delete window 형식으로 삭제 불가,<br>delete 변수명 형식으로도 삭제 불가</li><li><code>window</code> 프로퍼티에 직접 할당한 경우: delete window 형식으로 삭제 가능,<br>delete 변수명 형식으로도 삭제 가능</li></ul></li></ul><hr><h3 id="메서드로서-호출할-때-그-메서드-내부에서의-this"><a href="#메서드로서-호출할-때-그-메서드-내부에서의-this" class="headerlink" title="메서드로서 호출할 때 그 메서드 내부에서의 this"></a>메서드로서 호출할 때 그 메서드 내부에서의 this</h3><h4 id="함수-vs-메서드"><a href="#함수-vs-메서드" class="headerlink" title="함수 vs 메서드"></a>함수 vs 메서드</h4><p>함수를 실행하는 방법 중에는 함수로 호출하는 경우와 메서드로서 호출하는 경우가 있습니다.<br>함수와 메서드를 구분하는 유일한 차이는 <u>독립성</u>에 있습니다.</p><ul><li><p>함수는 그 자체로 독립적인 기능을 수행합니다.</p></li><li><p>메서드는 자신을 호출한 대상 객체에 관한 동작을 수행합니다.</p></li></ul><p><mark>어떤 함수를 객체의 프로퍼티에 할당한다고 해서 무조건 메서드가 되는 것이 아니라<br>객체의 메서드로서 호출할 경우에만 메서드로 동작하고, 그렇지 않으면 함수로 동작합니다.</mark></p><figure class="highlight js"><figcaption><span>메서드로 호출 (점 표기법, 대괄호 표기법)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, x);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.method(<span class="number">1</span>); <span class="comment">// &#123; method: f &#125; 1</span></span><br><span class="line">obj[<span class="string">'method'</span>](<span class="number">2</span>); <span class="comment">// &#123; method: f &#125; 2</span></span><br></pre></td></tr></table></figure><p>다시 말해 점 표기법이든 대괄호 표기법이든, 어떤 함수를 호출할 때 그 함수 이름 앞에<br>객체가 명시돼 있는 경우 메서드로 호출한 것이고, 그렇지 않은 경우에는 함수로 호출한 것입니다.</p><h4 id="메서드-내부에서의-this"><a href="#메서드-내부에서의-this" class="headerlink" title="메서드 내부에서의 this"></a>메서드 내부에서의 this</h4><p><code>this</code>에는 호출한 주체에 대한 정보가 담깁니다. 어떤 함수를 메서드로서 호출하는 경우 호출 주체는 바로 함수명(프로퍼티 명)앞의 객체입니다. 점 표기법의 경우 마지막 점 앞에 명시된 객체가 곧 <code>this</code>가 됩니다.</p><figure class="highlight js"><figcaption><span>메서드 내부에서의 this</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  methodA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  inner: &#123;</span><br><span class="line">    methodB: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.methodA(); <span class="comment">// &#123; methodA: f, inner: &#123;...&#125; &#125;    ( === obj)</span></span><br><span class="line">obj[<span class="string">'methodA'</span>](); <span class="comment">// &#123; methodA: f, inner: &#123;...&#125; &#125; ( === obj)</span></span><br><span class="line"></span><br><span class="line">obj.inner.methodB(); <span class="comment">// &#123; methodB: f &#125;            ( === obj.inner)</span></span><br><span class="line">obj.inner[<span class="string">'methodB'</span>](); <span class="comment">// &#123; methodB: f &#125;         ( === obj.inner)</span></span><br><span class="line">obj[<span class="string">'inner'</span>].methodB(); <span class="comment">// &#123; methodB: f &#125;         ( === obj.inner)</span></span><br><span class="line">obj[<span class="string">'inner'</span>][<span class="string">'methodB'</span>](); <span class="comment">// &#123; methodB: f &#125;      ( === obj.inner)</span></span><br></pre></td></tr></table></figure><hr><h3 id="함수로서-호출할-때-그-함수-내부에서의-this"><a href="#함수로서-호출할-때-그-함수-내부에서의-this" class="headerlink" title="함수로서 호출할 때 그 함수 내부에서의 this"></a>함수로서 호출할 때 그 함수 내부에서의 this</h3><hr><h4 id="함수-내부에서의-this"><a href="#함수-내부에서의-this" class="headerlink" title="함수 내부에서의 this"></a>함수 내부에서의 this</h4><p>어떤 함수를 함수로서 호출할 경우 <code>this</code>가 지정되지 않습니다.(this는 호출한 주체에 대한 정보가 담깁니다.)<br>함수로서 호출하는 것은 호출 주체(객체지향 언어에서의 객체)를 명시하지 않고 실행한 것이기 때문에 호출 주체의 정보를 알 수 없는 것입니다.<br><mark>this가 지정되지 않은 경우 this는 전역 객체를 참조합니다.</mark><br>따라서 함수에서의 <code>this</code>는 전역 객체를 가리킵니다.</p><hr><h4 id="메서드의-내부함수에서의-this"><a href="#메서드의-내부함수에서의-this" class="headerlink" title="메서드의 내부함수에서의 this"></a>메서드의 내부함수에서의 this</h4><p>메서드 내부에서 정의하고 실행한 함수에서의 this는 자바스크립트 초심자들이 this에 관해 가장 자주 혼란을 느끼는 점입니다.</p><p><mark>내부함수 역시 이를 함수로 호출했는지 메서드로 호출했는지만 파악하면 this의 값을 정확히 맞출 수 있습니다.</mark></p><figure class="highlight js"><figcaption><span>내부함수에서의 this</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="number">3.</span> outer: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="number">4.</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// (1)</span></span><br><span class="line">    <span class="number">5.</span> <span class="number">7.</span> <span class="keyword">var</span> innerFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="number">8.</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// (2) (3)</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="number">6.</span> innerFunc();</span><br><span class="line"></span><br><span class="line">    <span class="number">9.</span> <span class="number">11.</span> <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">      <span class="number">12.</span> innerMethod: innerFunc,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="number">10.</span> obj2.innerMethod();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="number">2.</span> obj1.outer();</span><br><span class="line"><span class="comment">// (1): obj1</span></span><br><span class="line"><span class="comment">// (2): 전역객체(window)</span></span><br><span class="line"><span class="comment">// (3): obj2</span></span><br></pre></td></tr></table></figure><p>(2)는 <code>innerFunc</code>를 호출한 결과를, (3)은 <code>obj2.innerMethod</code>를 호출한 결과입니다.</p><ol><li>객체를 생성하는데 내부에 outer 프로퍼티가 있습니다. outer 프로퍼티에 익명함수가 연결되고 생성된 객체를 변수 <code>obj1</code>에 할당합니다.</li></ol><ol start="2"><li><code>obj1.outer()</code>를 호출합니다.</li></ol><ol start="3"><li><code>obj1.outer</code> 함수의 실행 컨텍스트가 생성되면서 호이스팅하고, 스코프 체인 정보를 수집하고, this를 바인딩합니다.<br>이 함수는 호출될 때 함수명 <code>outer</code> 앞에 점(.)이 있었으므로 메서드로서 호출된 것입니다.<br>따라서 <code>this</code>는 점(.)앞에 객체인 <code>obj1</code>을 바인딩합니다.</li></ol><ol start="4"><li><code>this</code>가 바인딩된 <code>obj1</code> 객체 정보가 출력됩니다.</li></ol><ol start="5"><li>호이스팅된 변수 <code>innerFunc</code>는 outer 스코프 내에서만 접근할 수 있는 지역변수 입니다. 이 변수에 익명 함수를 할당합니다.</li></ol><ol start="6"><li><code>innerFunc()</code>를 호출합니다.</li></ol><ol start="7"><li><code>innerFunc</code> 함수의 실행 컨텍스트가 생성되면서 호이스팅,스코프 체인 수집, this 바인딩 등을 수행합니다.<br>이 함수는 호출될 때 <del>함수명 앞에 점(.)이 없었습니다.</del> 함수로서 호출되었습니다.<br>따라서 this가 지정되지 않았고, 자동으로 스코프 체인상의 최상위 객체인 전역객체(window)가 바인딩 됩니다.</li></ol><ol start="8"><li><code>this</code>가 바인딩된 <code>window</code> 객체 정보가 출력됩니다.</li></ol><ol start="9"><li><code>obj2</code> 역시 outer 스코프 내부에서만 접근할 수 있는 지역변수 입니다.<br><code>obj2</code> 변수에는 <code>object</code>를 할당하는데, object 안에 <code>innerMethod</code>라는 프로퍼티가 존재하고, 프로퍼티 값으로 앞서 정의된 변수 <code>innerFunc</code>와 연결된 익명 함수가 지정됩니다.</li></ol><ol start="10"><li><code>obj2.innerMethod()</code>를 호출합니다.</li></ol><ol start="11"><li><code>obj2. innerMethod</code> 함수의 실행 컨텍스트가 생성됩니다. 이 함수는 호출할 때 함수명인 <code>innerMethod</code> 앞에 점(.)이 있었으므로 메서드로서 호출한 것입니다.<br>따라서 <code>this</code>에는 마지막 점 앞의 객체인 <code>obj2</code>가 바인딩 됩니다.</li></ol><ol start="12"><li><code>obj2</code> 객체 정보가 출력됩니다.</li></ol><ul><li>정리하자면<br><mark>this 바인딩에 관해서는 함수를 실행하는 당시의 주변 환경(메서드 내부인지, 함수 내부인지 등)은 중요하지 않고 오직 해당 함수를 호출하는 구문 앞에 점(.) 또는 대괄호[] 표기가 있는지 없는지가 관건입니다.</mark></li></ul><hr><h4 id="메서드의-내부-함수에서의-this를-우회하는-방법"><a href="#메서드의-내부-함수에서의-this를-우회하는-방법" class="headerlink" title="메서드의 내부 함수에서의 this를 우회하는 방법"></a>메서드의 내부 함수에서의 this를 우회하는 방법</h4><p>호출 주체가 없을 때 자동으로 전역객체를 바인딩하지 않고 호출 당시 주변 환경의 <code>this</code>를 그대로 상속받아 사용하고 싶다면<br>간단하고 대표적인 방법으로 변수를 활용하는 방법이 있습니다.</p><figure class="highlight js"><figcaption><span>내부함수에서의 this를 변수를 활용하여 우회하기</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  outer: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// (1) &#123; outer: f &#125;</span></span><br><span class="line">    <span class="keyword">var</span> innerFunc1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// (2) Window &#123; ... &#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    innerFunc1();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> innerFunc2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(self); <span class="comment">// (3) &#123; outer: f &#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    innerFunc2();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.outer();</span><br></pre></td></tr></table></figure><ol><li><p><code>innerFunc1</code> 내부에서 <code>this</code>는 전역객체를 가리킵니다.</p></li><li><p>outer 스코프에서 <code>self</code>라는 변수에 <code>this</code>를 저장한 상태에서 호출한 <code>innerFunc2</code>의 경우 <code>self</code>에는 객체 obj가 출력됩니다.</p></li></ol><p><del>그저 상위 스코프의 this를 저장해서 내부함수에서 활용하려는 수단이므로 변수명은 달라도 무관합니다.</del></p><hr><h4 id="this를-바인딩하지-않는-함수"><a href="#this를-바인딩하지-않는-함수" class="headerlink" title="this를 바인딩하지 않는 함수"></a>this를 바인딩하지 않는 함수</h4><p>ES6에서는 함수 내부에서 <code>this</code>가 전역객체를 바라보는 문제를 보안하고자,<br><code>this</code>를 바인딩하지 않는 <mark>화살표 함수(Arrow function)</mark>를 새로 도입했습니다. </p><p>화살표 함수는 실행 컨텍스트를 생성할 때 <code>this</code> 바인딩 과정 자체가 빠지게 되어, 상위 스코프의 <code>this</code>를 그대로 활용할 수 있습니다.</p><figure class="highlight js"><figcaption><span>화살표 함수</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  outer: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// (1) &#123; outer: f &#125;</span></span><br><span class="line">    <span class="keyword">var</span> innerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// (2) &#123; outer: f &#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    innerFunc();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.outer();</span><br></pre></td></tr></table></figure><p>이 밖에도 <code>call</code>, <code>apply</code> 등의 메서드를 활용해 함수를 호출할 때 명시적으로 <code>this</code>를 지정하는 방법이 있습니다.</p><hr><h3 id="콜백-함수-호출-시-그-함수-내부에서의-this"><a href="#콜백-함수-호출-시-그-함수-내부에서의-this" class="headerlink" title="콜백 함수 호출 시 그 함수 내부에서의 this"></a>콜백 함수 호출 시 그 함수 내부에서의 this</h3><ul><li><p><code>함수 A</code>의 제어권을 <code>다른 함수(또는 메서드) B</code>에게 넘겨주는 경우 <code>함수 A</code>를 <code>콜백 함수</code>라고 합니다.</p></li><li><p>이때 <code>함수 A</code>는 <code>함수 B</code>의 내부 로직에 따라 실행되며, <code>this</code> 역시 <code>함수 B</code> 내부 로직에서 정한 규칙에 따라 값이 결정됩니다.</p></li><li><p><code>콜백 함수</code> 역시 함수이므로 기본적으로 <code>this</code>가 전역객체를 참조하지만, 제어권을 받은 함수 (함수 B)에서 <code>콜백 함수</code>에 별도로 <code>this</code>가 될 대상을 지정한 경우에는 그 대상을 참조하게 됩니다.</p></li></ul><figure class="highlight js"><figcaption><span>콜백 함수 내부에서의 this</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;, <span class="number">300</span>); <span class="comment">// (1) window</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// (2) window</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, x);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML += <span class="string">'&lt;button id="a"&gt;클릭&lt;/button&gt;'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.querySelector(<span class="string">'#a'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// (3) &lt;button id="a"&gt;클릭&lt;/button&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><p>0.3초 뒤 전역객체가 출력됩니다.</p></li><li><p>배열의 각 요소를 차례대로 콜백 함수의 첫 번째 인자로 삼아 전역객체와 배열의 각 요소가 총 5회 출력됩니다.</p></li><li><p>지정한 <code>HTML</code> 엘리먼트에 <code>&#39;click&#39;</code> 이벤트가 발생할 때 마다 그 이벤트 정보를 콜백 함수의 첫 번째 인자로 삼아 함수를 실행합니다. 버튼을 클릭하면 앞서 지정한 엘리먼트와 클릭 이벤트에 관한 정보가 담긴 객체가 출력됩니다.</p></li></ol><p>이 처럼 콜백 함수에서의 <code>this</code>는 한가지로 정의할 수 없습니다.<br><mark>콜백 함수의 제어권을 가지는 함수(메서드)가 콜백 함수에서의 this를 무엇으로 정할지 결정하며</mark>,<br>따로 정의하지 않은 경우 기본적으로 전역객체를 참조합니다.</p><hr><h3 id="Class-함수-내부에서의-this"><a href="#Class-함수-내부에서의-this" class="headerlink" title="Class 함수 내부에서의 this"></a>Class 함수 내부에서의 this</h3><p>객체지향 언어에서 생성자를 클래스(<code>class</code>),<br>클래스를 통해 만든 객체를 인스턴스 (<code>instance</code>)라고 합니다.</p><p>프로그래밍적으로 <code>class</code>는 구체적인 <code>instance</code>를 만들기 위한 일종의 틀입니다.<br>틀 안에는 해당 <code>class</code>의 공통 속성들이 준비되어 있고, 추가로 개별 <code>instance</code>를 만들 수 있습니다.</p><p><code>new</code> 키워드와 함께 함수를 호출하면 해당 함수가 <code>class</code>로서 동작합니다.<br><code>class</code>로서 함수가 호출된 경우 내부에서의 <code>this</code>는 <code>instance</code>가 됩니다.</p><ul><li><code>class</code> 함수를 <code>new</code>키워드로 호출 하면 엔진은 <code>class</code>의 <code>prototype</code> 프로퍼티를 참조하는 <code>__proto__</code> 프로퍼티 <code>instance</code>를 만들고 공통 속성 및 특성 들을 해당 객체(<code>this</code>)에 부여합니다.<br><code>instance</code>가 생성됩니다.</li></ul><figure class="highlight js"><figcaption><span>class 함수</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Cat = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="string">'야옹'</span>;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> choco = <span class="keyword">new</span> Cat(<span class="string">'초코'</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">var</span> nabi = <span class="keyword">new</span> Cat(<span class="string">'나비'</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(choco, nabi);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 결과</span></span><br><span class="line"><span class="comment">Cat &#123; bark: '야옹', name: '초코', age: 7 &#125;</span></span><br><span class="line"><span class="comment">Cat &#123; bark: '야옹', name: '나비', age: 5 &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li><p><code>new</code> 키워드와 함께 Cat 함수를 호출하여 변수 choco, nabi에 각각 할당 했습니다.</p></li><li><p><code>console.log</code> 출력 결과 <code>this</code>가 각각 Cat <code>class</code>의 <code>instance</code>를 참조하여 반환합니다.<br>(<code>choco instance</code>, <code>nabi instance</code>)</p></li></ol><hr><h2 id="this_binding">명시적으로 this를 바인딩하는 방법</h2><p>상황에 따라 this에 바인딩 되는 값들을 살펴봤지만 이런 규칙을 무시?하고 this에 대상을 지정하여 바인딩하는 방법도 있습니다.</p><hr><h3 id="call-메서드"><a href="#call-메서드" class="headerlink" title="call 메서드"></a>call 메서드</h3><blockquote><p>Function.prototype.call(thisArg[, arg1[, arg2[, …]]])</p></blockquote><p><code>call</code> 메서드는 호출 주체인 함수를 즉시 실행하도록 합니다.<br><code>call</code> 메서드의 첫 번째 인자를 <code>this</code>로 바인딩 하고, 이후에 인자들을 호출할 함수의 매개변수로 사용합니다.</p><p><code>call</code>메서드를 이용하여 <code>this</code> 값으로 참조할 객체를 지정할 수 있습니다. </p><figure class="highlight js"><figcaption><span>call 메서드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, a, b, c);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// Window&#123; ... &#125; 1 2 3</span></span><br><span class="line">func.call(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>); <span class="comment">// &#123; x: 1 &#125; 4 5 6</span></span><br></pre></td></tr></table></figure><ul><li><p><code>func.call</code>에서 메서드의 첫 번째 인자 <code>{x : 1}</code>를 <code>this</code>가 참조할 값으로 던져줍니다.</p></li><li><p>객체의 메서드를 호출하면 <code>this</code>는 객체를 참조하게 되지만, <code>call</code> 메서드는 이렇듯 임의의 객체를 <code>this</code>로 지정할 수 있습니다.</p></li></ul><hr><h3 id="apply-메서드"><a href="#apply-메서드" class="headerlink" title="apply 메서드"></a>apply 메서드</h3><blockquote><p>Function.prototype.apply(thisArg[, argsArray])</p></blockquote><p><code>apply</code> 메서드는 기능적으로 <code>call</code> 메서드와 완전히 동일합니다.</p><p><code>apply</code>메서드는 <mark>두 번째 인자를 배열로 받아 그 배열의 요소들을 호출할 함수의 매개변수로 지정한다는 점에서 차이가 있습니다.</mark></p><figure class="highlight js"><figcaption><span>apply 메서드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, a, b, c);</span><br><span class="line">&#125;;</span><br><span class="line">func.apply(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]); <span class="comment">// &#123; x: 1 &#125; 4 5 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a, x, y);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.method.apply(&#123; <span class="attr">a</span>: <span class="number">4</span> &#125;, [<span class="number">5</span>, <span class="number">6</span>]); <span class="comment">// 4 5 6</span></span><br></pre></td></tr></table></figure><hr><h3 id="call-apply-메서드의-활용"><a href="#call-apply-메서드의-활용" class="headerlink" title="call / apply 메서드의 활용"></a>call / apply 메서드의 활용</h3><p><code>call</code> 과 <code>apply</code> 메서드의 활용 사례</p><hr><h4 id="유사-배열객체에-배열-메서드-적용"><a href="#유사-배열객체에-배열-메서드-적용" class="headerlink" title="유사 배열객체에 배열 메서드 적용"></a>유사 배열객체에 배열 메서드 적용</h4><figure class="highlight js"><figcaption><span>유사 배열객체에서 배열 메서드 사용하기</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(obj, <span class="string">'d'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; 0: 'a', 1: 'b', 2: 'c', 3: 'd', length: 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(obj);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 'a', 'b', 'c', 'd' ]</span></span><br></pre></td></tr></table></figure><ul><li><p>유사배열객체인 경우 <code>call</code> 또는 <code>apply</code> 메서드를 이용해 배열 메서드를 사용할 수 있습니다.</p></li><li><p>배열 메서드인 <code>push</code>를 <code>객체 obj</code>에 적용해 프로퍼티 3에 ‘d’를 추가했습니다.</p></li><li><p>배열 메서드인 <code>slice</code>로 얕은 복사하여 객체를 배열로 반환했습니다.</p></li></ul><p>이 밖에도 유사배열객체에는 <code>call</code>, <code>apply</code> 메서드를 이용해 모든 배열 메서드를 적용할 수 있습니다.<br>단, 문자열의 경우 <code>length</code> 프로퍼티가 읽기 전용이기 때문에 원본 문자열에 변경을 가하는 메서드(<code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>splice</code> 등)는 에러를 던지며, <code>concat</code> 처럼 대상이 반드시 배열이어야 하는 경우에는 에러는 나지 않지만 재대로 된 결과를 얻을 수 없습니다.</p><ul><li>사실 <code>call</code>, <code>apply</code>를 이용해 형변환하는 것은 ‘<code>this</code>를 원하는 값으로 지정해서 호출한다’라는 본래의 메서드의 의도와는 어긋나는 활용법이라고 할 수 있습니다.<br>또한 코드만 봐서는 어떤 의도인지 파악하기 쉽지 않습니다.</li></ul><ul><li><mark>ES6 에서는 유사배열객체 또는 이터러블한 모든 종류의 데이터 타입을 배열로 전환</mark>하는 <code>Array.from</code>메서드가 추가되었습니다.</li></ul><hr><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h4><p>Array 오브젝트를 생성하고 콜백 함수에서 반환된 값을 엘리먼트 값으로 설정하여 새로운 Array 객체를 반환합니다.</p><blockquote><p>Array.from(arrayLike[, mapFn[, thisArg]])</p></blockquote><ul><li><p>arrayLike<br>배열로 변환하고자 하는 유사 배열 객체(Array-like)나 반복 가능한 객체(이터러블 오브젝트).</p></li><li><p>mapFn (선택적 파라미터)<br>배열의 모든 엘리먼트 마다 호출할 함수.</p></li><li><p>thisArg (선택적 파라미터)<br>두 번째 파라미터 함수 실행 시에 this로 참조할 값.</p></li><li><p>반환 값<br>새로운 Array 인스턴스.</p></li></ul><figure class="highlight js"><figcaption><span>ES6의 Array.from</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(obj);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><hr><h4 id="class-내부에서-다른-class를-호출"><a href="#class-내부에서-다른-class를-호출" class="headerlink" title="class 내부에서 다른 class를 호출"></a>class 내부에서 다른 class를 호출</h4><p><code>class</code> 내부에 다른 <code>class</code>와 공통된 내용이 있을 경우 <code>call</code> 또는 <code>apply</code>를 이용해 다른 <code>class</code>를 호출하면 간단하게 반복을 줄일 수 있습니다.</p><figure class="highlight js"><figcaption><span>class 내부에서 다른 class 호출</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, gender, school</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, gender);</span><br><span class="line">  <span class="keyword">this</span>.school = school;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Employee</span>(<span class="params">name, gender, company</span>) </span>&#123;</span><br><span class="line">  Person.apply(<span class="keyword">this</span>, [name, gender]);</span><br><span class="line">  <span class="keyword">this</span>.company = company;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> by = <span class="keyword">new</span> Student(<span class="string">'보영'</span>, <span class="string">'female'</span>, <span class="string">'단국대'</span>);</span><br><span class="line"><span class="keyword">var</span> jn = <span class="keyword">new</span> Employee(<span class="string">'재난'</span>, <span class="string">'male'</span>, <span class="string">'구골'</span>);</span><br></pre></td></tr></table></figure><p>Student, Employee class함수 내부에서 Person 함수를 호출해서 instance 속성을 정의하게 했습니다.</p><hr><h4 id="여러-인수를-묶어-하나의-배열로-전달하고-싶을-때"><a href="#여러-인수를-묶어-하나의-배열로-전달하고-싶을-때" class="headerlink" title="여러 인수를 묶어 하나의 배열로 전달하고 싶을 때"></a>여러 인수를 묶어 하나의 배열로 전달하고 싶을 때</h4><p><code>apply</code>메서드를 사용해 하나의 배열로 인수들을 전달할 수 있습니다.</p><figure class="highlight js"><figcaption><span>여러 인수를 받는 메서드(Math.max/Math.min)에 apply 적용</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">45</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, numbers);</span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, numbers);</span><br><span class="line"><span class="built_in">console</span>.log(max, min); <span class="comment">// 45 3</span></span><br></pre></td></tr></table></figure><p>ES6에서는 <code>spread</code> 연산자를 이용하면 <code>apply</code>를 적용하는 것보다 더욱 간편하게 작성할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">45</span>];</span><br><span class="line"><span class="keyword">const</span> max = <span class="built_in">Math</span>.max(...numbers);</span><br><span class="line"><span class="keyword">const</span> min = <span class="built_in">Math</span>.min(...numbers);</span><br><span class="line"><span class="built_in">console</span>.log(max, min); <span class="comment">// 45 3</span></span><br></pre></td></tr></table></figure><hr><h3 id="bind-메서드"><a href="#bind-메서드" class="headerlink" title="bind 메서드"></a>bind 메서드</h3><blockquote><p>Function.prototype.bind(thisArg[,arg1[, arg2[, …]]])</p></blockquote><p><code>bind</code> 메서드는 ES5에서 추가된 기능으로, call과 비슷하지만 즉시 호출하지는 않고 넘겨받은 this 및 인수들을 바탕으로 새로운 함수를 반환하기만 하는 메서드입니다.<br>다시 새로운 함수를 호출할 때 인수를 넘기면 그 인수들은 기존 <code>bind</code> 메서드를 호출할 때 전달했던 인수들의 뒤에 이어서 등록됩니다.<br>즉 <code>bind</code>메서드는 함수에 this를 미리 적용하는 것과 부분 적용 함수를 구현하는 두 가지 목적을 모두 지닙니다.</p><figure class="highlight js"><figcaption><span>bind메서드의 this 지정과 부분 적용 함수 구현</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, a, b, c, d);</span><br><span class="line">&#125;;</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// Window&#123; ... &#125; 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="keyword">var</span> bindFunc1 = func.bind(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;);</span><br><span class="line">bindFunc1(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>); <span class="comment">// &#123; x: 1 &#125; 5 6 7 8</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">var</span> bindFunc2 = func.bind(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">bindFunc2(<span class="number">6</span>, <span class="number">7</span>); <span class="comment">// &#123; x: 1 &#125; 4 5 6 7</span></span><br><span class="line">bindFunc2(<span class="number">8</span>, <span class="number">9</span>); <span class="comment">// &#123; x: 1 &#125; 4 5 8 9</span></span><br></pre></td></tr></table></figure><ol><li><p><code>bindFunc1</code> 변수에 <code>func</code> 변수에 <code>this</code>를 <code>{x : 1}</code>로 지정하는 새로운 함수가 할당됩니다.<br>다음 줄에서 <code>bindFunc1</code>을 호출하면 지정된 <code>this</code>값과 함께 반환됩니다.</p></li><li><p><code>bindFunc2</code> 변수에는 <code>func</code> 변수에 <code>this</code>를 <code>{x : 1}</code>로 지정하고, 파라미터를 차례대로 4, 5로 지정한 함수 새로운 함수가 할당됩니다. 다음 코드를 호출하면 <code>this</code>로 지정해준 값과 파라미터에 지정해준 값이 적용되고 그 다음 함수를 호출하며 넘겨준 파라미터 값이 붙습니다 <code>{x : 1} 4 5 6 7</code>, <code>{x : 1} 4 5 8 9</code> 형태로 반환됩니다.<br><mark>이것이 bind의 부분 적용 함수 구현법입니다.</mark></p></li></ol><hr><h4 id="name-프로퍼티"><a href="#name-프로퍼티" class="headerlink" title="name 프로퍼티"></a>name 프로퍼티</h4><p><u>bind 메서드를 적용해서 새로 만든 함수는 한 가지 독특한 성질이 있습니다.</u><br>name 프로퍼티에 동사 bind의 수동태인 <code>bound</code>라는 접두어가 붙습니다.</p><p>함수의 name 프로퍼티가 <code>bound xxx</code>이라면 함수명이 xxx인 원본 함수에 <code>bind</code>메서드를 적용한 새로운 함수라는 의미가 되므로 call 과 apply 메서드에 비해 코드 추적이 용이한 점이 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>, a, b, c, d);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bindFunc = func.bind(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(func.name); <span class="comment">// func</span></span><br><span class="line"><span class="built_in">console</span>.log(bindFunc.name); <span class="comment">// bound func</span></span><br></pre></td></tr></table></figure><hr><h4 id="상위-컨텍스트의-this를-내부함수나-콜백-함수에-전달하기"><a href="#상위-컨텍스트의-this를-내부함수나-콜백-함수에-전달하기" class="headerlink" title="상위 컨텍스트의 this를 내부함수나 콜백 함수에 전달하기"></a>상위 컨텍스트의 this를 내부함수나 콜백 함수에 전달하기</h4><p>메서드의 내부함수에서 메서드의 <code>this</code>를 그대로 바라보게 하기 위한 방법으로<br>self 등의 변수를 활용하거나 화살표 함수를 이용한 우회법이 있었는데<br><code>call</code>, <code>apply</code>, <code>bind</code> 메서드를 이용하면 더 깔끔하게 처리할 수 있습니다.</p><figure class="highlight js"><figcaption><span>내부함수에 this 전달 - call</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  outer: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//&#123;outer : f&#125;</span></span><br><span class="line">    <span class="keyword">var</span> innerFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//&#123;outer : f&#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    innerFunc.call(<span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.outer();</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>내부함수에 this 전달 -bind</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  outer: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//&#123;outer : f&#125;</span></span><br><span class="line">    <span class="keyword">var</span> innerFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//&#123;outer : f&#125;</span></span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>); <span class="comment">// 호출x, 새로운 함수 바인드</span></span><br><span class="line">    innerFunc(); <span class="comment">// 호출</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.outer();</span><br></pre></td></tr></table></figure><ul><li>또한 콜백 함수를 인자로 받는 함수(메서드) 중에서 기본적으로 콜백 함수 내에서의 <code>this</code>에 관여하는 함수(메서드)에 대해서도 <code>bind</code> 메서드를 사용하면 <code>this</code>값을 지정하여 바꿀 수 있습니다.</li></ul><figure class="highlight js"><figcaption><span>bind 메서드 - 내부 함수에 this 전달</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  logThis: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  logThisLater1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="keyword">this</span>.logThis, <span class="number">500</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  logThisLater2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="keyword">this</span>.logThis.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.logThisLater1(); <span class="comment">// Window &#123; ... &#125;</span></span><br><span class="line">obj.logThisLater2(); <span class="comment">// obj &#123; logThis: f, ... &#125;</span></span><br></pre></td></tr></table></figure><hr><h3 id="화살표-함수의-예외사항"><a href="#화살표-함수의-예외사항" class="headerlink" title="화살표 함수의 예외사항"></a>화살표 함수의 예외사항</h3><p>ES6에 새롭게 도입된 화살표 함수 <code>=&gt;</code>는 실행 컨텍스트 생성 시 this를 바인딩 하지 않습니다.<br>즉 화살표 함수 <code>=&gt;</code> 내부에는 <code>this</code>가 아예 없으며, <code>this</code>에 접근하고자 하면 스코프체인상 가장 가까운 <code>this</code>에 접근하게 됩니다.</p><figure class="highlight js"><figcaption><span>화삺표 함수 내부에서의 this</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  outer: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> innerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    innerFunc();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.outer();</span><br></pre></td></tr></table></figure><ul><li><code>call</code>, <code>apply</code>, <code>bind</code>를 사용했던 예제의 내부함수를 <code>=&gt;</code>함수로 바꾼 것입니다.<br>더욱 간결해졌습니다.</li></ul><hr><h3 id="별도의-인자로-this를-받는-경우-콜백-함수-내에서의-this"><a href="#별도의-인자로-this를-받는-경우-콜백-함수-내에서의-this" class="headerlink" title="별도의 인자로 this를 받는 경우(콜백 함수 내에서의 this)"></a>별도의 인자로 this를 받는 경우(콜백 함수 내에서의 this)</h3><p>콜백 함수를 인자로 받는 메서드에는 <code>this</code>로 지정할 객체(<code>thisArg</code>)를 인자로 지정할 수 있는 것들이 있습니다. 이러한 메서드를 이용하여 <code>this</code>값을 원하는대로 변경할 수 있습니다.</p><p>이러한 메서드는 내부 요소에 대해 같은 동작을 반복 수행해야하는 배열 메서드에 많이 존재하고, 같은 이유로 ES6에 추가된 <code>Set</code>, <code>Map</code>등의 메서드에도 일부 존재합니다.</p><ul><li><p>콜백 함수와 함께 thisArg를 인자로 받는 메서드</p><table><thead><tr><th>Array.prototype</th><th>Set.prototype</th><th>Map.prototype</th></tr></thead><tbody><tr><td><code>forEach</code>(callback[, thisArg])</td><td><code>forEach</code>(callback[, thisArg])</td><td><code>forEach</code>(callback[, thisArg])</td></tr><tr><td><code>map</code>(callback[, thisArg])</td><td></td><td></td></tr><tr><td><code>filter</code>(callback[, thisArg])</td><td></td><td></td></tr><tr><td><code>some</code>(callback[, thisArg])</td><td></td><td></td></tr><tr><td><code>every</code>(callback[, thisArg])</td><td></td><td></td></tr><tr><td><code>find</code>(callback[, thisArg])</td><td></td><td></td></tr><tr><td><code>findIndex</code>(callback[, thisArg])</td><td></td><td></td></tr><tr><td><code>flatMap</code>(callback[, thisArg])</td><td></td><td></td></tr><tr><td><code>from</code>(arrayLike[, callback[, thisArg]])</td><td></td><td></td></tr></tbody></table></li><li><p>대표적인 배열 메서드인 <code>forEach</code> 예시</p></li></ul><figure class="highlight js"><figcaption><span>forEach</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> report = &#123;</span><br><span class="line">  sum: <span class="number">0</span>,</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">entry</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sum += entry;</span><br><span class="line">      ++<span class="keyword">this</span>.count;</span><br><span class="line">    &#125;, <span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  average: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sum / <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">report.add(<span class="number">60</span>, <span class="number">85</span>, <span class="number">95</span>);</span><br><span class="line"><span class="built_in">console</span>.log(report.sum, report.count, report.average()); <span class="comment">// 240 3 80</span></span><br></pre></td></tr></table></figure><ul><li><p><code>60, 85, 95</code>를 인자로 삼아 <code>add</code> 메서드를 호출하면 <code>slice.call</code>메서드가 인자를 받아 새로운 배열로 반환합니다. 이후 <code>forEach</code> 메서드가 실행됩니다.</p></li><li><p>콜백 함수 내부의 <code>this</code>는 <code>forEach</code> 함수의 두 번째 인자로 전달해준 <code>this</code>(add 메서드의 this)가 전달된 상태이므로 <code>add</code> 메서드의 <code>this(report)</code>를 가리킵니다.</p></li><li><p>따라서 배열의 요소들을 순회 반복하며 <code>report.sum</code> , <code>report.count</code>값이 차례로 바뀌게 됩니다.<br>출력 결과로 <code>report.sum</code>에 240, <code>report.count</code>에 3이 반환되어 출력됩니다.</p></li></ul><hr><h2 id="this_point">this 정리</h2><p>명시적 <code>this</code> 바인딩이 없는 한 항상 성립하는 규칙</p><ul><li><p>전역공간에서의 <code>this</code>는 전역객체를 참조 (브라우저에서는 <code>window</code>, Node.js에서는 <code>global</code>)</p></li><li><p>함수를 메서드로 호출한 경우 <code>this</code>는 메서드 호출 주체를 참조 (메서드명 앞의 객체)</p></li><li><p>함수를 함수로 호출한 경우 <code>this</code>는 전역객체를 참조 (메서드의 내부함수에서도 동일)</p></li><li><p>콜백 함수 내부에서의 <code>this</code>는 해당 콜백 함수의 제어권을 넘겨받은 함수가 정의한 바를 참조<br><code>this</code>가 정의되어 있지않다면 전역객체를 참조</p></li><li><p><code>class</code> 함수에서 <code>this</code>는 생성될 <code>instance</code>를 참조</p></li></ul><p>위 규칙에 부합하지 않는 경우 명시적 <code>this</code> 바인딩 규칙으로 예측할 수 있습니다.</p><ul><li><p><code>call</code>, <code>apply</code> 메서드는 <code>this</code>를 명시적으로 지정하면서 함수 또는 메서드를 호출</p></li><li><p><code>bind</code> 메서드는 <code>this</code> 및 함수에 넘길 파라미터를 일부 지정해 새로운 함수를 만듭니다.</p></li><li><p>콜백 함수를 반복 순회,호출 하는 일부 메서드는 별도의 인자로 <code>this</code>를 받기도 합니다.</p></li></ul>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/27/this-Core-JavaScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>실행 컨텍스트 -Core JavaScript</title>
      <link>https://hdw0903.github.io/2020/04/26/%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-Core-JavaScript/</link>
      <guid>https://hdw0903.github.io/2020/04/26/%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-Core-JavaScript/</guid>
      <pubDate>Sun, 26 Apr 2020 08:50:25 GMT</pubDate>
      <description>
      
        &lt;p&gt;실행 컨텍스트(&lt;code&gt;execution context&lt;/code&gt;)는 실행할 코드에 제공할 환경 정보를 모아놓은 객체로,&lt;br&gt;자바스크립트의 동적 언어로서의 성격을 가장 잘 파악할 수 있는 개념입니다.&lt;br&gt;자바스크립트는 실행 컨텍스트가 활성화되는 시점에 선언된 변수를 위로 끌어올리고(&lt;code&gt;호이스팅&lt;/code&gt;), 외부 환경 정보를 구성하고, &lt;code&gt;this&lt;/code&gt; 값을 설정하는 등의 동작을 수행하는데, 이로 인해 다른 언어에서는 발견할 수 없는 특이한 현상들이 발생합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행 컨텍스트&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/26/실행-컨텍스트-Core-JavaScript/#execution_context&quot;&gt;실행 컨텍스트란?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;스택과 큐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/26/실행-컨텍스트-Core-JavaScript/#VariableEnvironment&quot;&gt;VariableEnvironment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/26/실행-컨텍스트-Core-JavaScript/#LexicalEnvironment&quot;&gt;LexicalEnvironment&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;environmentRecord와 호이스팅&lt;ul&gt;
&lt;li&gt;호이스팅 규칙&lt;/li&gt;
&lt;li&gt;함수 선언문과 함수 표현식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스코프, 스코프 체인, outerEnvironmentReference&lt;ul&gt;
&lt;li&gt;스코프 체인&lt;/li&gt;
&lt;li&gt;전역변수 와 지역변수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/26/실행-컨텍스트-Core-JavaScript/#thisBinding&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>실행 컨텍스트(<code>execution context</code>)는 실행할 코드에 제공할 환경 정보를 모아놓은 객체로,<br>자바스크립트의 동적 언어로서의 성격을 가장 잘 파악할 수 있는 개념입니다.<br>자바스크립트는 실행 컨텍스트가 활성화되는 시점에 선언된 변수를 위로 끌어올리고(<code>호이스팅</code>), 외부 환경 정보를 구성하고, <code>this</code> 값을 설정하는 등의 동작을 수행하는데, 이로 인해 다른 언어에서는 발견할 수 없는 특이한 현상들이 발생합니다.</p><ul><li>실행 컨텍스트<ul><li><a href="/2020/04/26/실행-컨텍스트-Core-JavaScript/#execution_context">실행 컨텍스트란?</a><ul><li>스택과 큐</li></ul></li><li><a href="/2020/04/26/실행-컨텍스트-Core-JavaScript/#VariableEnvironment">VariableEnvironment</a></li><li><a href="/2020/04/26/실행-컨텍스트-Core-JavaScript/#LexicalEnvironment">LexicalEnvironment</a><ul><li>environmentRecord와 호이스팅<ul><li>호이스팅 규칙</li><li>함수 선언문과 함수 표현식</li></ul></li><li>스코프, 스코프 체인, outerEnvironmentReference<ul><li>스코프 체인</li><li>전역변수 와 지역변수</li></ul></li></ul></li><li><a href="/2020/04/26/실행-컨텍스트-Core-JavaScript/#thisBinding">this</a></li></ul></li></ul><a id="more"></a><hr><h2 id="execution_context">실행 컨텍스트란?</h2><hr><h3 id="스택-stack-과-큐-queue"><a href="#스택-stack-과-큐-queue" class="headerlink" title="스택(stack)과 큐(queue)"></a>스택(stack)과 큐(queue)</h3><ul><li>스택 : 출입구가 하나뿐인 데이터 구조<br>비어있는 스택에 순서대로 데이터 a,b,c,d를 저정했다면 꺼낼 때는 반대로 d,c,b,a의 순서대로 꺼낸다.<br>저장할 수 있는 데이터 스택이 넘치면 엔진에서 <code>RangeError: Maximum call stack size exceeded</code> 에러를 던집니다.</li></ul><ul><li>큐 : 한쪽은 입구, 한쪽은 출구를 담당하는 양쪽 데이터 구조<br>비어있는 큐에 순서대로 데이터 a,b,c,d를 저정했다면 꺼낼 때도 a,b,c,d의 순서대로 꺼낸다.</li></ul><hr><h4 id="엔진이-동일한-환경에-있는-코드들을-실행할-때"><a href="#엔진이-동일한-환경에-있는-코드들을-실행할-때" class="headerlink" title="엔진이 동일한 환경에 있는 코드들을 실행할 때"></a>엔진이 동일한 환경에 있는 코드들을 실행할 때</h4><p>필요한 환경정보들을 모아 컨텍스트를 구성하고, 이를 콜 스택에 쌓아올렸다가, 가장 위에 쌓여있는 컨텍스트와 관련된 코드들을 실행하므로 코드의 환경과 순서를 보장받을 수 있습니다.</p><p>흔히 실행 컨텍스트를 구성하는 방법은 함수를 실행하는 것입니다.</p><figure class="highlight js"><figcaption><span>실행 컨텍스트와 콜 스택</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">3.</span> inner(); </span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span> outer(); </span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ol><li><p>처음 자바스크립트 코드를 실행하는 순간 전역 컨텍스트가 콜 스택에 담깁니다.<br>(<del>코드 내부에서 별도의 실행 명령 없이 브라우저에서 자동으로 실행하므로 자바스크립트 파일이 열리는 순간 전역 컨텍스트가 활성화 된다고 이해</del>)</p></li><li><p>전역 컨텍스트와 관련된 코드들을 순차적으로 진행하다가 <code>outer()</code>를 호출하면 엔진은 <code>outer</code>에 대한 환경 정보를 수집해 <code>outer</code> 실행 컨텍스트를 생성한 후 콜 스택에 담습니다.<br>이때, 콜 스택 내부에서 전역 컨텍스트 위에 <code>outer</code> 실행 컨텍스트가 놓인 상태가 되어 <code>outer</code> 실행 컨텍스트 즉, <code>outer</code> 함수 내부 코드들을 순차적으로 실행합니다. (전역 컨텍스트 일시정지)</p></li><li><p>마찬가지로 <code>outer</code> 실행 컨텍스트를 진행하다 <code>inner()</code>함수의 실행 컨텍스트가 콜 스택의 가장 위에 담기면 <code>outer</code> 컨텍스트는 일시정지되고 <code>inner</code> 함수 내부 코드를 실행합니다.</p></li></ol><ul><li>실행 컨텍스트와 콜 스택<br><img src="/images/context_callStack.PNG" alt="실행 컨텍스트와 콜 스택"></li></ul><p><u>실행 컨텍스트가 콜 스택의 맨위에 쌓이는 순간이 곧 현재 실행할 코드에 관여하는 시점.<br>기존의 컨텍스트는 새로 쌓인 컨텍스트보다 아래에 위치할 수 밖에 없음</u></p><p><mark>이렇게 어떤 컨텍스트가 활성화될 때 엔진은 해당 컨텍스트에 관련된 코드들을 실행하는데 필요한 환경 정보들을 수집하여 실행 컨텍스트 객체에 저장함.</mark></p><p>이 객체는 엔진이 활용 목적으로 생성할 뿐 개발자 코드로 확인할 수는 없음<br>이에 담기는 정보들은 다음과 같습니다.</p><ul><li><p><code>VariableEnvironment</code> : 현재 컨텍스트 내의 식별자들에 대한 정보 + 외부 환경 정보.<br>선언 시점의 <code>LexicalEnvironment</code>의 스냅샷(<code>snapshot</code>)으로, 변경 사항은 반영되지 않음.</p></li><li><p><code>LexicalEnvironment</code> : 처음에는 <code>VariableEnvironment</code>와 같지만 변경 사항이 실시간으로 반영되는 점이 다름.</p></li><li><p><code>ThisBinding</code> : <code>this</code> 식별자가 바라봐야 할 대상 객체</p></li></ul><hr><h2 id="VariableEnvironment">VariableEnvironment</h2><p><code>VariableEnvironment</code>에 담기는 내용은 <code>LexicalEnvironment</code>와 같지만 최초 실행 시의 스냅샷을 유지한다는 점이 다릅니다.</p><p>실행 컨텍스트를 생성할 때 <code>VariableEnvironment</code>에 정보를 먼저 담은 후<br>이를 그대로 복사하여 <code>LexicalEnvironment</code>를 만들고, 생성된 <code>LexicalEnvironment</code>를 활용합니다.</p><p><code>VariableEnvironment</code>와 <code>LexicalEnvironment</code> 는 초기화 과정 중에는 사실상 완전히 동일하고 둘 다 내부에 <code>environmentRecord</code>와 <code>outer-EnvironmentReference</code>로 구성되어 있습니다. </p><p>다음의 <code>LexicalEnvironment</code>를 살펴보며 자세한 내용과 둘의 코드 진행과정 차이를 알아봅시다.</p><hr><h2 id="LexicalEnvironment">LexicalEnvironment</h2><p><code>LexicalEnvironment</code>은 개발자 용어로 <code>정적 환경</code>으로 통하나 <u>실제 의미가 동일 하지는 않습니다.</u><br>커뮤니케이션을 위해 정적 환경으로 불리지만 <code>LexicalEnvironment</code>를 현재 컨텍스트의 내부에는 식별자들이 있고 그 외부 정보를 다른 객체가 참조하도록 구성되어 있다는 식의 <u>컨텍스트 구성 환경 정보들을 모아놓은</u> 느낌으로 이해합시다.</p><hr><h3 id="environmentRecord와-호이스팅"><a href="#environmentRecord와-호이스팅" class="headerlink" title="environmentRecord와 호이스팅"></a>environmentRecord와 호이스팅</h3><p><code>environmentRecord</code>에는 현재 컨텍스트와 관련된 코드의 <mark>식별자 정보</mark>들이 저장됩니다.</p><ul><li><p>컨텍스트를 구성하는 함수에 지정된 <mark>매개변수 식별자</mark></p></li><li><p>선언한 함수가 있을 경우 <mark>그 함수 자체</mark></p></li><li><p>var등으로 선언된 <mark>변수의 식별자 등</mark></p></li></ul><p><strong>컨텍스트 내부 전체를 처음부터 끝까지 순서대로 수집합니다.</strong></p><ul><li>참고 :<br><mark>전역 실행 컨텍스트는 변수 객체를 생성하지 않습니다.</mark><br>자바스크립트 구동 환경이 별도로 제공하는 객체 즉, <mark>전역 객체를 활용합니다</mark>. (브라우저의 window, Node.js의 global 객체 등)<br>이들은 자바스크립트 내장 객체가 아닌 호스트 객체로 분류됩니다.</li></ul><hr><h4 id="호이스팅-규칙"><a href="#호이스팅-규칙" class="headerlink" title="호이스팅 규칙"></a>호이스팅 규칙</h4><p><code>environmentRecord</code>가 현재 컨텍스트와 관련된 변수 정보를 수집한 상태는<br>컨텍스트의 코드가 실행되기 전의 상태입니다. 코드가 실행되기 전에 엔진이 이미 해당 환경에 속한 코드의 변수명을 모두 알고 있는 상태가 되는 것 입니다.</p><p>이 상태를 엔진이 식별자 정보들을 최상단으로 끌어올려놓고 순차적으로 코드를 실행하는 것처럼 보여<br><mark>변수 정보를 수집하는 과정을 더욱 이해하기 쉬운 방법으로 대체한 가상의 개념으로 등장한 개념이 호이스팅<mark> 입니다.</p><p>엔진이 실제로 끌어올리지는 않지만 편의상 끌어올린 것으로 간주하는 개념입니다.</p><figure class="highlight js"><figcaption><span>함수 선언의 호이스팅</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="number">1.</span> <span class="built_in">console</span>.log(b); <span class="comment">// (1)</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="string">'bbb'</span>; <span class="comment">// 수집 대상 1(변수 선언)</span></span><br><span class="line">  <span class="number">2.</span> <span class="built_in">console</span>.log(b); <span class="comment">// (2)</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 수집 대상 2(함수 선언)</span></span><br><span class="line">  <span class="number">3.</span> <span class="built_in">console</span>.log(b); <span class="comment">// (3)</span></span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"><span class="comment">// function b()&#123;&#125;</span></span><br><span class="line"><span class="comment">// bbb</span></span><br><span class="line"><span class="comment">// bbb</span></span><br></pre></td></tr></table></figure><ul><li><code>environmentRecord</code>에는 매개변수의 이름, 함수 선언, 변수명 들이 담깁니다.<br>엔진은 이러한 호이스팅으로 인해 코드 실행전 부터 컨텍스트 구성 정보를 가지고 있습니다.</li></ul><ol><li><code>environmentRecord</code>에 의해 <code>var b;</code> 와 <code>var b = function b (){}</code>가 최상단에 위치한다고 볼 수 있습니다.<br><code>function b(){}</code> 를 참조하여 출력됩니다.</li></ol><ol start="2"><li><ol start="3"><li><code>var b = &#39;bbb&#39;</code> 으로 할당된 후 이므로 <code>bbb</code>가 출력됩니다.</li></ol></li></ol><hr><h4 id="함수-선언문과-함수-표현식"><a href="#함수-선언문과-함수-표현식" class="headerlink" title="함수 선언문과 함수 표현식"></a>함수 선언문과 함수 표현식</h4><ul><li><p>함수 선언문 : <code>function</code> 정의부만 존재하고 별도의 할당 명령이 없는 것<br><mark>반드시 함수명이 정의되어 있어야 함.</mark></p></li><li><p>함수 표현식 : 정의한 <code>function</code>을 별도의 변수에 할당하는 것<br><mark>함수명이 없어도 됨.</mark></p></li></ul><figure class="highlight js"><figcaption><span>함수를 정의하는 세 가지 방식</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125; <span class="comment">// 함수 선언문. 함수명 a가 곧 변수명.</span></span><br><span class="line">a(); <span class="comment">// 실행 OK.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;; <span class="comment">// (익명) 함수 표현식. 변수명 b가 곧 함수명.</span></span><br><span class="line">b(); <span class="comment">// 실행 OK.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;; <span class="comment">// 기명 함수 표현식. 변수명은 c, 함수명은 d.</span></span><br><span class="line">c(); <span class="comment">// 실행 OK.</span></span><br><span class="line">d(); <span class="comment">// 에러!</span></span><br></pre></td></tr></table></figure><ul><li>함수 선언문과 함수 표현식 호이스팅 시 차이.</li></ul><figure class="highlight js"><figcaption><span>호이스팅 전 원본 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(multiply(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 함수 선언문 sum</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> multiply = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 함수 표현식 multiply</span></span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>호이스팅 후 함수 표현식과 선언문의 차이</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 함수 선언문은 전체를 호이스팅합니다.</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> multiply; <span class="comment">// 변수는 선언부만 끌어올립니다.</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(multiply(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">multiply = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 변수의 할당부는 원래 자리에 남겨둡니다.</span></span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>위에서 볼 수 있듯 함수 선언문은 함수 전체를 호이스팅</p></li><li><p>함수 표현식은 변수 부분만 호이스팅, 할당하는 부분은 호이스팅 하지 않음.</p></li><li><p><code>console.log(multiply(3,4))</code> 시점의 <code>multiply</code>에는 값이 할당돼 있지 않습니다.<br>따라서 <code>multiply is not a function</code> 에러 메시지가 출력되고 , 에러로 인해 아래 할당부 코드는 실행되지 않고 종료됩니다.</p></li></ul><hr><h3 id="스코프-스코프-체인-outerEnvironmentReference"><a href="#스코프-스코프-체인-outerEnvironmentReference" class="headerlink" title="스코프, 스코프 체인, outerEnvironmentReference"></a>스코프, 스코프 체인, outerEnvironmentReference</h3><ul><li><p>스코프(scope) : 식별자에 대한 유효범위</p></li><li><p>스코프 체인 : 식별자의 유효범위를 안에서부터 바깥으로 차례로 검색해나가는 것</p></li><li><p>outerEnvironmentReference : 스코프 체인을 가능하게 하는 <code>LexicalEnvironment</code>의 두 번째 수집자료 <code>outerEnvironmentReference</code></p></li></ul><hr><h4 id="스코프-체인"><a href="#스코프-체인" class="headerlink" title="스코프 체인"></a>스코프 체인</h4><p><code>outerEnvironmentReference</code>는 현재 호출된 함수가 <mark>선언될 당시의 LexicalEnvironment</mark>를 참조합니다. (== 콜 스택 상에서 실행 컨텍스트가 활성화된 상태)</p><figure class="highlight js"><figcaption><span>outerEnvironmentReference 동작 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//(...) </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//(...)</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//(...)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a 함수 내부에 b 함수를 선언하고 다시 b 함수 내부에 c 함수를 선언했습니다.</p><ul><li><p>이 경우 <code>함수 c</code>의 <code>outerEnvironmentReference</code>는 <code>함수 b</code>의 <code>LexicalEnvironment</code>를 참조합니다.<br><code>함수 b</code>의 <code>LexicalEnvironment</code>에 있는 <code>outerEnvironmentReference</code>는 다시 <code>함수 a</code>의 <code>LexicalEnvironment</code>를 참조합니다.</p></li><li><p>이처럼 <code>outerEnvironmentReference</code>는 연결리스트 형태를 가지고 있고 선언 시점의 <code>LexicalEnvironment</code>를 계속 찾아 올라가면 마지막에는 전역 컨텍스트의 <code>LexicalEnvironment</code>가 있을 것입니다.</p></li><li><p><code>outerEnvironmentReference</code>는 <mark>자신이 선언된 시점의 LexicalEnvironment만 참조</mark>하고 있으므로 가장 가까운 요소부터 차례로 접근할 수 밖에 없습니다.</p></li></ul><p>이런 구조적 특성 덕분에 여러 스코프에서 동일한 스코프를 선언한 경우에는 <mark>무조건 스코프 체인 상에서 가장 먼저 발견된 식별자만 접근 가능</mark> 하게 됩니다.</p><figure class="highlight js"><figcaption><span>개발자 도구로 스코프 체인 확인법 -크롬</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> outer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(inner);</span><br><span class="line">  &#125;;</span><br><span class="line">  inner();</span><br><span class="line">&#125;;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure><ul><li>함수 내부에 함수를 출력하는 방법으로 현재 실행 컨텍스트를 제외한 상위 스코프 정보들을 개발자 도구에서 확인할 수 있습니다. (<code>debugger</code> 사용시 더욱 자세한 정보 확인 가능)</li></ul><hr><h4 id="전역변수와-지역변수"><a href="#전역변수와-지역변수" class="headerlink" title="전역변수와 지역변수"></a>전역변수와 지역변수</h4><ul><li><p>전역변수 : 전역 스코프에서 선언한 변수</p></li><li><p>지역변수 : 전역 스코프가 아닌 함수 스코프 또는 블록 스코프 내부에서 선언한 변수<br>지역 변수는 선언된 스코프 외부에서 접근할 수 없음.</p></li></ul><hr><h2 id="thisBinding">this</h2><p>실행 컨텍스트의 <code>thisBinding</code>에는 <code>this</code>로 지정된 객체가 저장됩니다.<br>실행 컨텍스트 활성화 당시에 <code>this</code>가 지정되지 않으면 <code>this</code>는 전역 객체를 참조하게 됩니다.</p><p>함수를 호출하는 방식 등 사용되는 방법에 따라 <code>this</code>가 참조하는 대상이 변하게 되므로<br><code>this</code>에 자세한 내용은 따로 다루도록 하겠습니다.</p>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/26/%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-Core-JavaScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>데이터 타입 -Core JavaScript</title>
      <link>https://hdw0903.github.io/2020/04/16/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%ED%83%80%EC%9E%85%20-Core%20JavaScript/</link>
      <guid>https://hdw0903.github.io/2020/04/16/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%ED%83%80%EC%9E%85%20-Core%20JavaScript/</guid>
      <pubDate>Thu, 16 Apr 2020 00:00:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;자바스크립트가 데이터를 처리하는 과정을 살펴봄으로써&lt;br&gt;기본형 타입과 참조형 타입이 서로 다르게 동작하는 이유를 이해하고&lt;br&gt;이를 적절히 활용할 수 있게 되는 것을 목표로 합니다.&lt;br&gt;나아가 데이터 타입과 관련된 중요한 개념 몇 가지를 추가로 살펴봅니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_1&quot;&gt;데이터 타입의 종류&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_2&quot;&gt;데이터 타입에 관한 배경 지식&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;메모리와 데이터&lt;/li&gt;
&lt;li&gt;식별자와 변수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_3&quot;&gt;변수 선언과 데이터 할당&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;변수 선언&lt;/li&gt;
&lt;li&gt;데이터 할당&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_4&quot;&gt;기본형 데이터와 참조형 데이터&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;불변값&lt;/li&gt;
&lt;li&gt;가변값&lt;/li&gt;
&lt;li&gt;변수 복사 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_5&quot;&gt;불변 객체&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;불변 객체를 만드는 간단한 방법&lt;/li&gt;
&lt;li&gt;얕은 복사와 깊은 복사&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_6&quot;&gt;undefined 와 null&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>자바스크립트가 데이터를 처리하는 과정을 살펴봄으로써<br>기본형 타입과 참조형 타입이 서로 다르게 동작하는 이유를 이해하고<br>이를 적절히 활용할 수 있게 되는 것을 목표로 합니다.<br>나아가 데이터 타입과 관련된 중요한 개념 몇 가지를 추가로 살펴봅니다.</p><ul><li><a href="/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_1">데이터 타입의 종류</a></li><li><a href="/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_2">데이터 타입에 관한 배경 지식</a><ul><li>메모리와 데이터</li><li>식별자와 변수</li></ul></li><li><a href="/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_3">변수 선언과 데이터 할당</a><ul><li>변수 선언</li><li>데이터 할당</li></ul></li><li><a href="/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_4">기본형 데이터와 참조형 데이터</a><ul><li>불변값</li><li>가변값</li><li>변수 복사 비교</li></ul></li><li><a href="/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_5">불변 객체</a><ul><li>불변 객체를 만드는 간단한 방법</li><li>얕은 복사와 깊은 복사</li></ul></li><li><a href="/2020/04/16/데이터%20타입%20-Core%20JavaScript/#1_6">undefined 와 null</a></li></ul><a id="more"></a><hr><h2 id="1_1">데이터 타입의 종류</h2><p>자바스크립트의 데이터 타입에는 크게 두 가지가 있습니다. 바로 기본형과 참조형 입니다.</p><ul><li><p><strong>기본형</strong>(원시형, <code>primitive type</code>)<br>number, string, boolean, null, undefined, Symbol</p></li><li><p><strong>참조형</strong>(<code>reference type</code>)<br>object, Array, Function, Date, RegExp, Map, WeakMap, Set, WeakSet 등이 객체의 하위 분류에 속합니다.</p></li></ul><img src="/images/JavaScript-Data-Types.PNG"><p><a href="https://tutorial.eyehunts.com/js/javascript-data-types-and-examples">https://tutorial.eyehunts.com/js/javascript-data-types-and-examples</a></p><p>일반적으로 기본형은 할당이나 연산시 복제되고 참조형은 참조된다고 알려져 있습니다.<br>엄밀히 말하면 둘 모두 복제를 하긴 합니다.<br>다만 <u>기본형은 값이 담긴 주소값을 바로 복제하는 반면 참조형은 값이 담긴 주소값들로 이루어진 묶음을 가리키는 주소값을 복제한다는 점이 다릅니다.</u></p><ul><li><p>기본형은 <code>불변성(immutability)</code>을 뜁니다.<br><del>언뜻 생각해 보면 혼란스러울 수 있습니다.</del>  </p><p>불변성을 잘 이해하려면 메모리와 데이터에 대한 지식이 필요하고, 식별자와 변수의 개념을 구분할 수 있어야합니다.<br>메모리 영역에서 자바스크립트의 데이터가 처리되는 과정을 알아봅시다.</p></li></ul><hr><h2 id="1_2">데이터 타입에 관한 배경 지식</h2><hr><h3 id="메모리와-데이터"><a href="#메모리와-데이터" class="headerlink" title="메모리와 데이터"></a>메모리와 데이터</h3><p>컴퓨터는 모든 데이터를 <code>0 또는 1</code>로 기억합니다.<br><code>0 또는 1</code>만 표현할 수 있는 하나의 메모리 조각을 <code>비트(bit)</code>라고 합니다. 각 비트는 고유한 식별자(<code>unique identifier</code>)를 통해 위치를 확인할 수 있습니다.</p><p>1byte = 8 bit 입니다.</p><p>메모리 용량이 과거보다 월등히 커진 영향으로 자바스크립트에서는 숫자의 경우 정수형인지 부동소수형인지 구분하지 않고 64비트 (8바이트)를 확보합니다.</p><p><mark>모든 데이터는 바이트 단위의 식별자, 즉 메모리 주소값(memory address)을 통해 서로 구분하고 연결할 수 있습니다.</mark></p><hr><h3 id="식별자와-변수"><a href="#식별자와-변수" class="headerlink" title="식별자와 변수"></a>식별자와 변수</h3><ul><li><p><strong>변수</strong>는 “변할 수 있는 데이터” 입니다. (숫자,문자열,객체,배열 모두가 데이터 입니다.)</p></li><li><p><strong>식별자</strong>는 어떤 데이터를 식별하는데 사용하는 이름. 즉 <code>변수명</code> 입니다.</p></li></ul><hr><h2 id="1_3">변수 선언과 데이터 할당</h2><hr><h3 id="변수-선언"><a href="#변수-선언" class="headerlink" title="변수 선언"></a>변수 선언</h3><p>변수 선언의 동작 원리를 알아봅니다.</p><blockquote><p>var a;</p></blockquote><p>위 코드를 말로 해석하자면 <strong>변할 수 있는 데이터를 만들고</strong>, <code>식별자 이름을 a</code>로 설정합니다.</p><p>즉, 엔진에서는 <strong>메모리에서 비어있는 공간을 확보</strong>하고 이 <u>메모리 영역의 이름(식별자)을 a</u>로 설정합니다.</p><p>여기까지가 변수 선언 과정입니다.<br>이후에 a에 접근하고자 하면 엔진은 메모리 영역에서 a라는 이름을 가진 주소를 검색해 해당 영역에 담긴 데이터를 반환합니다.</p><hr><h3 id="데이터-할당"><a href="#데이터-할당" class="headerlink" title="데이터 할당"></a>데이터 할당</h3><blockquote><p>var a = ‘abc’;</p></blockquote><p>a라는 이름의 주소를 검색해서 그곳에 문자열 ‘abc’를 할당할 것 같지만,<br>실제로 <u>해당 위치에 문자열을 직접 저장하지는 않습니다.</u></p><p>엔진에서는 데이터를 저장하기 위한 <strong>별도의 메모리 공간을 확보하여 문자열 ‘abc’를 저장</strong>하고,<br><mark>그 주소를 변수 영역에 저장하는 식으로 이뤄집니다.</mark><br><strong>메모리 공간</strong>은 <strong>변수영역</strong> 과 <strong>데이터 영역</strong>을 <u>구분지어 값을 저장</u>한다고 생각하면 됩니다.</p><ul><li>데이터 할당과 변수 선언 흐름</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'abc'</span>;  </span><br><span class="line"><span class="comment">// 위 코드는 아래 코드와 동일 합니다.  </span></span><br><span class="line"><span class="keyword">var</span> a;  </span><br><span class="line">a = <span class="string">'abc'</span>;  </span><br><span class="line"><span class="comment">// 즉 엔진의 흐름은  </span></span><br><span class="line"><span class="number">1.</span> 변수 영역에서 빈 공간을 확보하고  </span><br><span class="line"><span class="number">2.</span> 확보한 공간의 식별자를 a로 지정합니다.  </span><br><span class="line"><span class="number">3.</span> 변수 영역이 아닌 데이터 영역의 빈 공간에 문자열 <span class="string">'abc'</span>를 저장합니다.  </span><br><span class="line"><span class="number">4.</span> 변수 영역에서 a 식별자를 검색합니다.  </span><br><span class="line"><span class="number">5.</span> 데이터 영역에서 생성한 문자열의 주소를   </span><br><span class="line"> a 식별자로 검색한 변수 영역에 대입합니다.</span><br></pre></td></tr></table></figure><p>이러한 방식은 데이터를 변경(or 삭제/추가)등의 작업을 할때<br>변경된 데이터의 주소들을 다시 식별자에 연결하여 저장하지 않아도 됩니다.<br>(엔진이 처리할 연산을 최소한으로 해줍니다.)</p><p>효율적으로 문자열 데이터의 변환을 처리하려면 변수와 데이터를 별도의 공간에 나누어 저장하는 것이 최적입니다.</p><p>예를 들어 다수의 변수를 생성하여 모든 변수에 숫자 5를 할당한다면,<br>변수의 개수만큼 변수의 메모리 공간마다 5를 할당해야 합니다.<br>하지만 5를 별도의 공간(메모리 공간 중 변수 영역이 아닌 데이터 영역)에 한 번만 저장하고 그 주소를 연결한다면? 엔진의 중복 연산 처리 효율이 높아집니다.</p><hr><h2 id="1_4">기본형 데이터와 참조형 데이터</h2><hr><h3 id="불변값"><a href="#불변값" class="headerlink" title="불변값"></a>불변값</h3><p>변수 와 상수의 차이는 <code>“변경 가능성”</code>입니다.<br><strong>변수</strong>는 변할 수 있는 데이터,<br><strong>상수</strong>는 바뀌지 않습니다.  </p><p>이 <code>“변경 가능성”</code>의 기준은 변수 영역의 메모리 입니다.<br><mark>한 번 데이터 할당이 이뤄진 변수 공간에 다른 데이터를 재할당할 수 있는지 여부가 관건입니다.</mark></p><p>반면 상수 와 불변값을 구분짓는 <code>“변경 가능성”</code>의 기준은 <strong>데이터 영역 메모리</strong> 입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> a = <span class="string">'abc'</span>;  </span><br><span class="line">a = a + <span class="string">'def'</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">var</span> b = <span class="number">5</span>;  </span><br><span class="line"><span class="keyword">var</span> c = <span class="number">5</span>;  </span><br><span class="line"><span class="number">3.</span> b = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><ol><li><code>변수 a</code> 에 문자열 <code>‘abc’</code>를 할당했다가 아래 코드로 <code>‘def’</code>를 추가하면<br>기존의 <code>‘abc’</code>가 <code>‘abcdef’</code>로 바뀌는 것이 아니라 <strong>새로운 문자열</strong> <code>‘abcdef’</code>를 만들어<br><strong>그 주소를 변수 a에 저장</strong>합니다. <code>‘abc’</code>와 <code>‘abcdef’</code>는 <strong>완전히 별개의 데이터</strong> 입니다.</li></ol><ol start="2"><li><code>변수 b</code> 에 데이터 영역을 만들어 <strong>5를 설정하고 그 주소를 b에 저장</strong>합니다.<br>다음 코드에서 <code>c</code>에 5를 할당하려고 하면 <strong>엔진은 데이터 영역에서 5를 찾습니다.</strong><br>이미 만들어진 주소가 있으므로 그 주소를 <strong>재활용하여 c에 저장</strong>합니다.</li></ol><ol start="3"><li><code>변수 b</code> 의 값을 7로 바꾸려고 합니다. <strong>기존에 저장된 5를 7로 바꾸는 것이 아니라</strong><br> <strong>데이터 영역에서 7을 찾아 있으면 그 주소를 재활용하고 없다면 새로 만들어 b에 저장합니다.</strong><br> <code>결국 5 와 7 모두 다른 값으로 변경할 수 없습니다.</code></li></ol><p>이처럼 문자열 값 과 숫자 값 모두 한 번 만든 값을 바꿀 수 없고, 다른 값으로 변경할 수 없습니다. 변경은 새로 만드는 동작을 통해서만 이뤄집니다. 한 번 만들어진 값은 <code>GC(Garbage Collection)</code> 당하지 않는 한 영원히 변하지 않습니다. 이것이 바로 <strong>불변값의 특징</strong>입니다.</p><p><strong>기본형(원시값, <code>primitive</code>)데이터</strong>인 number, string, boolean, null, undefined, Symbol은 모두 불변값입니다.</p><hr><h3 id="가변값"><a href="#가변값" class="headerlink" title="가변값"></a>가변값</h3><p><strong>참조형(<code>reference</code>) 데이터</strong>의 기본적인 성질은 가변값인 경우가 많지만 설정에 따라 변경 불가능한 경우도 있고, 아예 불변값으로 활용하는 방법도 있습니다.</p><p>참조형 데이터를 변수에 할당하는 과정부터 확인해 봅니다.</p><figure class="highlight js"><figcaption><span>참조형 데이터의 할당</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 =&#123;  </span><br><span class="line"> a: <span class="number">1</span>,  </span><br><span class="line"> b: <span class="string">'bbb'</span>  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><p>엔진은 우선 변수 영역의 빈공간을 확보하고, 그 주소의 이름을 obj로 지정합니다.</p></li><li><p>{} 내부의 프로퍼티들을 저장하기 위해 별도의 변수 영역을 마련하고, 주소 이름으로 각각 a 와 b라는 프로퍼티 이름을 지정합니다.</p></li><li><p>데이터 영역에서 숫자 1을 검색합니다. 검색 결과가 없으므로 데이터 영역에 저장하고 이 주소를 a 주소에 저장합니다. 문자열 ‘bbb’역시 데이터 영역에 저장하고 이 주소를 b 주소에 저장합니다.</p></li></ol><p><mark>기본형 데이터와의 차이는 “객체의 변수(프로퍼티) 영역”이 별도로 존재한다는 점입니다.</mark><br>객체가 별도로 할애한 영역은 변수 영역일 뿐 “데이터 영역”은 기존의 메모리 공간을 그대로 활용하고 있습니다.<br>데이터 영역에 저장된 값은 모두 불변값입니다. 그러나 변수에는 얼마든지 다른 값을 대입할 수 있습니다.<br>바로 <strong>이 부분 때문에 흔히 참조형(reference)데이터는 가변값이라고 하는 것</strong>입니다.</p><figure class="highlight js"><figcaption><span>참조형 데이터의 프로퍼티 재할당</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 =&#123;  </span><br><span class="line"> a: <span class="number">1</span>,  </span><br><span class="line"> b: <span class="string">'bbb'</span>  </span><br><span class="line">&#125;;  </span><br><span class="line">obj.a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li><code>obj1</code>의 <code>a</code> 프로퍼티에 숫자 <code>2</code>를 할당하려고 합니다. 데이터 영역에서 숫자 <code>2</code>를 검색합니다.<br>존재하지 않으므로 데이터 영역을 새로만들어 <code>2</code>를 저장합니다. 이 주소를 프로퍼티 영역의 <code>a</code> 주소에 저장합니다.<br>변수 <code>obj1</code>이 <strong>바라보고 있는 주소는 데이터 영역으로 변하지 않았습니다. 즉 새로운 Object가 만들어진 것이 아니라</strong> <code>Object</code> 내부의 프로퍼티 영역 <code>a</code>의 값만 바뀐 것 입니다.</li></ul><p>다음은 <strong>참조형 데이터의 프로퍼티에 다시 참조형 데이터를 할당하는 경우</strong> 입니다.<br>이러한 경우를 <code>중첩객체(nested object)</code>라고 합니다.</p><figure class="highlight js"><figcaption><span>중첩된 참조형 데이터(객체)의 프로퍼티 할당</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;  </span><br><span class="line"> x : <span class="number">3</span>,  </span><br><span class="line"> arr : [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>엔진은 우선 <strong>변수 영역의 빈공간을 확보</strong>하고, 그 주소의 이름을 <code>obj</code>로 지정합니다.</li></ol><ol start="2"><li>데이터 저장 공간에 데이터를 저장하려는데( {} ), 이 데이터는 여러개의 프로퍼티와 값들을 모아놓은 그룹(객체)입니다. <strong>각 프로퍼티들을 저장하기 위해 별도의 프로퍼티 영역을 마련하고 그 주소를 {}의 주소에 저장합니다.</strong></li></ol><ol start="3"><li>각 프로퍼티 영역에 <code>x</code> 와 <code>arr</code> 를 주소 이름으로 지정합니다.</li></ol><ol start="4"><li>데이터 영역에서 숫자 <code>3</code>을 검색합니다. 없으므로 새로 만들고 이 주소를 프로퍼티 영역 x의 주소에 저장합니다.</li></ol><ol start="5"><li>데이터 영역에 <code>arr</code> 로 저장할 값은 <code>Array</code>로써 별도의 <code>Array</code> 영역을 만들어 저장하고 프로퍼티 영역 <code>arr</code>의 주소에 저장합니다.</li></ol><ol start="6"><li>배열의 요소가 총 <code>3</code>개 이므로 <code>Array</code> 영역에 공간을 확보하고 각각 <strong>인덱스를 부여하고 주소이름으로 사용</strong>합니다.</li></ol><ol start="7"><li>데이터 영역에서 숫자 <code>3</code>을 검색하여 그 주소를 <code>인덱스 0</code>의 주소에 저장합니다.</li></ol><ol start="8"><li>데이터 영역에 숫자 <code>4</code>가 없으므로 <strong>새로운 데이터 영역을 만들고 그 주소를</strong> <code>인덱스 1</code>의 주소에 저장합니다.</li></ol><ol start="9"><li>데이터 영역에 숫자 <code>5</code>도 없으므로 생성한 주소를 <code>인덱스 2</code>의 주소에 저장합니다.</li></ol><p><mark>이제 obj.arr[1]을 검색하고자 하면 엔진의 메모리에서는 다음과 같은 과정을 거칩니다.</mark></p><pre><code>1. obj라는 식별자를 가진 주소를 찾습니다.2. obj 주소에 연결된 데이터 영역의 주소로 이동합니다.3. 데이터 영역에 연결된 프로퍼티 영역의 주소로 이동합니다.4. 프로퍼티 영역에서 arr이라는 식별자를 가진 주소를 찾습니다.5. arr 주소에 연결된 Array 영역의 주소로 이동합니다.6. Array 영역에서 인덱스 1(==식별자 이름)을 검색하여 해당하는 주소로 이동합니다.7. 해당하는 주소의 값 숫자형 데이터 4를 반환합니다.</code></pre><p><mark>만약 이 상태에서 다음과 같이 재할당을 하면 다음과 같은 과정을 거칩니다.</mark></p><blockquote><p>obj.arr = “str”;</p></blockquote><p>데이터 영역에 문자열 <code>“str”</code>을 저장하고, 그 주소를 프로퍼티 영역에 저장합니다.(재할당)  </p><p>그러면 기존에 있던 <code>Array</code> 영역의 인덱스 주소를 저장하던 데이터 영역(공간)은 자신의 주소를 참조하는 변수가 하나도 없게 됩니다. (프로퍼티 영역인 arr 주소의 값이 재할당 되므로 데이터 영역의 str을 주소로 갖음)  </p><p><code>참조 카운트</code>(자신을 참조하는 변수의 개수)가 <code>0</code>인 메모리는 <code>garbage collector</code>의 수거 대상이 됩니다.  </p><p>즉, <strong>Array 영역의 주소를 저장하던 데이터 영역은</strong> <code>GC</code>의 수거 대상이며,  </p><p><code>GC</code>가 처리되는 과정에서 연쇄적으로 <code>Array</code> 영역의 <code>참조 카운트</code>도 <code>0</code>이 되고 <code>GC</code>의 대상이되어 제거됩니다.</p><p>제거된 메모리 영역은 다시 새로운 값을 할당할 수 있는 빈 공간이 됩니다.</p><hr><h3 id="변수-복사-비교"><a href="#변수-복사-비교" class="headerlink" title="변수 복사 비교"></a>변수 복사 비교</h3><p>변수를 복사할 때<br><code>기본형</code>(원시값, primitive) 데이터 와 <code>참조형</code>(reference) 데이터의 차이</p><figure class="highlight js"><figcaption><span>변수 복사</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// primitive  </span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;  </span><br><span class="line"><span class="keyword">var</span> b = a;   </span><br><span class="line">  </span><br><span class="line"><span class="comment">// reference  </span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">c</span>: <span class="number">10</span>, <span class="attr">d</span>: <span class="string">'ddd'</span> &#125;;  </span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br></pre></td></tr></table></figure><ol><li><p>변수 영역의 빈 공간을 확보하고 <code>식별자를 a</code>로 지정합니다.<br><code>숫자 10</code>을 데이터 영역에서 검색하여, 없으면 데이터 영역에 새로 만들어 저장하고 주소를 <code>a</code>의 주소에 저장합니다.</p></li><li><p>변수 영역의 빈 공간을 확보하고 <code>식별자를 b</code>로 지정합니다. 그 후에 변수 영역에서 <code>a</code>식별자를 검색해 <code>a</code>에 저장된 데이터 주소(10)를 <code>b 변수 영역</code>에 저장합니다.</p></li><li><p>변수 영역의 빈 공간을 확보하고 식별자를 <code>obj1</code>로 지정합니다. 데이터 영역을 새로 만들고 데이터 그룹을 담을 프로퍼티 영역을 만들어 이 주소를 데이터 영역에 저장합니다.<br>각각의 프로퍼티 영역에 식별자 이름으로 <code>c</code> , <code>d</code>으로 사용하고 각각의 값 <code>(10, ‘ddd’)</code>을 데이터 영역에서 검색합니다. <code>10</code>은 이미 있으므로 기존의 주소를 프로퍼티 영역에 연결하고, <code>‘ddd’</code>는 새로 만들어 프로퍼티 영역에 연결합니다.</p></li><li><p>변수 영역의 빈 공간을 확보하고 식별자를 <code>obj2</code>로 지정합니다. 그 후에 변수 영역에서 식별자 <code>obj1</code>을 검색해 <code>obj1</code>에 저장된 데이터 주소를 <code>obj2</code> 변수 영역에 저장합니다.</p></li></ol><p><mark>변수를 복사하는 과정은 기본형 데이터와 참조형 데이터 모두 같은 주소를 바라보게 되는 점에서 동일합니다. 복사 과정은 동일하지만 데이터 할당 과정에서 이미 차이가 있기 때문에 변수 복사 이후의 동작에서 큰 차이가 발생합니다.</mark></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 변수 복사이후 값 변경 결과 비교(1)  </span></span><br><span class="line"><span class="comment">// object 프로퍼티 변경 시  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// primitive  </span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;  </span><br><span class="line"><span class="keyword">var</span> b = a;   </span><br><span class="line">  </span><br><span class="line"><span class="comment">// reference  </span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">c</span>: <span class="number">10</span>, <span class="attr">d</span>: <span class="string">'ddd'</span> &#125;;  </span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 프로퍼티 값 변경  </span></span><br><span class="line">b = <span class="number">15</span>;  </span><br><span class="line">obj2.c = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>b = 15</code> 코드는 데이터 영역에 <code>15</code>가 없으므로 새로운 데이터 영역에 저장하고 그 주소를 변수 영역 식별자 <code>b</code>인 주소에 저장합니다.</p></li><li><p><code>obj.c = 20</code> 코드는 데이터 영역에 <code>20</code>이 없으므르 새로운 데이터 영역에 저장하고 그 주소를 변수 영역 식별자 <code>obj2</code>의 주소를 찾고 이어서 <code>obj2</code>에 저장되있는 프로퍼티 영역의 <code>c</code>주소를 찾아 그 곳에 주소를 저장합니다.</p></li></ul><p><strong>기본형(원시값, primitive) 데이터를 복사한</strong> <code>변수b</code>의 값을 바꾸면 <code>데이터영역 b 주소</code>의 값이 달라집니다.  </p><p><strong>참조형(reference) 데이터를 복사한</strong> <code>변수 obj2</code>의 프로퍼티 값을 바꾸면 바라보는 <code>obj2의 프로퍼티 주소</code>는 달라지지 않습니다. 값만 변합니다.</p><p>즉, 변수 a와 b는 서로 다른 주소를 바라보게 됐으나, 변수 obj1 과 obj2는 여전히 같은 객체를 바라보고 있는 상태입니다. (a !== b), (obj1 === obj2)</p><p><mark>이 결과가 바로 기본형과 참조형 데이터의 가장 큰 차이점 입니다.</mark> <del>대부분의 자바스크립트 책에서 ‘기본형은 값을 복사하고 참조형은 주솟값을 복사한다’고 설명하고 있지만, 사실은 어떤 데이터 타입이든 변수에 할당하기 위해서는 주솟값을 복사해야 하기 때문에</del> <mark>엄밀히 따지면 자바스크립트의 모든 데이터 타입은 참조형 데이터일 수 밖에 없습니다. 다만 기본형은 주솟값 복사 과정이 한 번만 이뤄지고, 참조형은 한 단계를 더 거치게 된다는 차이가 있는 것입니다.</mark></p><figure class="highlight js"><figcaption><span>Object 자체를 변경 시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 변수 복사이후 값 변경 결과 비교(2)  </span></span><br><span class="line"><span class="comment">// object 변경 시  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// primitive  </span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;  </span><br><span class="line"><span class="keyword">var</span> b = a;   </span><br><span class="line">  </span><br><span class="line"><span class="comment">// reference  </span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">c</span>: <span class="number">10</span>, <span class="attr">d</span>: <span class="string">'ddd'</span> &#125;;  </span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;  </span><br><span class="line">  </span><br><span class="line">b = <span class="number">15</span>;  </span><br><span class="line">obj2 = &#123; <span class="attr">c</span>: <span class="number">20</span>, <span class="attr">d</span>: <span class="string">'ddd'</span> &#125;; <span class="comment">//object 자체를 변경</span></span><br></pre></td></tr></table></figure><ul><li>obj2에도 새로운 객체를 할당함으로써 값을 직접 변경했습니다.<br>데이터 영역에 새로운 공간에 새 객체가 저장되고 그 주소를 변수 영역의 obj2 주소에 저장하게 됩니다.<br>즉, 기본형 데이터의 값 변경처럼 참조형 데이터가 바라보는 주소가 달라지게 되는 것입니다.<br><mark>따라서 참조형 데이터가 “가변값”이라고 설명할 때의 “가변”은 참조형 데이터 내부의 프로퍼티 값을 변경할 때의 성질입니다. 참조형 데이터 자체를 변경하는 경우는 성립되지 않습니다.</mark></li></ul><hr><h2 id="1_5">불변 객체</h2><hr><h3 id="불변-객체를-만드는-간단한-방법"><a href="#불변-객체를-만드는-간단한-방법" class="headerlink" title="불변 객체를 만드는 간단한 방법"></a>불변 객체를 만드는 간단한 방법</h3><p>참조형 데이터의 “가변”은 데이터 자체가 아닌 내부 프로퍼티를 변경할 때 성립되므로<br>내부 프로퍼티를 변경할 필요가 있을 때 마다 매번 새로운 객체를 만들어 재할당하기로 규칙을 정하거나<br>자동으로 새로운 객체를 만드는 도구<em>를 활용하면 객체 역시 불변성을 확보할 수 있습니다.<br><sub></em>대표적으로 immutable.js, immer.js, immutability-helper 등의 라이브러리가 있고,<br>ES6의 spread operator, Object.assign 메서드 등도 새로운 객체를 만드는 도구 목적으로 활용할 수 있습니다.</sub></p><p>ex)값으로 전달받은 객체를 변경하더라도 원본 객체는 변하지 않게 하고 싶을 경우 불변 객체가 필요합니다.</p><figure class="highlight js"><figcaption><span>가변성의 문제점</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;  </span><br><span class="line"> name: <span class="string">'Jaenam'</span>,  </span><br><span class="line"> gender: <span class="string">'male'</span>,  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> changeName = <span class="function"><span class="keyword">function</span>(<span class="params">user, newName</span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">var</span> newUser = user;  </span><br><span class="line"> newUser.name = newName;  </span><br><span class="line"> <span class="keyword">return</span> newUser;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> user2 = changeName(user, <span class="string">'Jung'</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (user !== user2) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'유저 정보가 변경되었습니다.'</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(user.name, user2.name); <span class="comment">// Jung Jung  </span></span><br><span class="line"><span class="built_in">console</span>.log(user === user2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>user</code> 객체의 <code>name</code> 프로퍼티를 <code>‘Jung’</code>으로 바꾸는 함수를 호출해 반환 값을 <code>user2</code> 변수에 담습니다.<br>그 결과 <code>user</code> 와 <code>user2</code>의 <code>name</code> 프로퍼티가 모두 <code>‘Jung’</code>으로 출력되고 (user === user2)가 true로 같다는 것을 알 수 있습니다.</li></ul><p>원본 데이터를 변경하고 싶지 않은 경우 각 변수마다 다른 객체를 바라보게 만들어야겠습니다.</p><figure class="highlight js"><figcaption><span>서로 다른 객체를 바라보게</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;  </span><br><span class="line"> name: <span class="string">'Jaenam'</span>,  </span><br><span class="line"> gender: <span class="string">'male'</span>,  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> changeName = <span class="function"><span class="keyword">function</span>(<span class="params">user, newName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;  </span><br><span class="line">        name: newName,  </span><br><span class="line">        gender: user.gender,  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> user2 = changeName(user, <span class="string">'Jung'</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (user !== user2) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'유저 정보가 변경되었습니다.'</span>); <span class="comment">// 유저 정보가 변경되었습니다.  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(user.name, user2.name); <span class="comment">// Jaenam Jung  </span></span><br><span class="line"><span class="built_in">console</span>.log(user === user2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>changeName() 함수가 새로운 Object를 반환하도록 한 간단한 예시 입니다.<br>user 와 user2는 서로 다른 Object가 됩니다.</li></ul><hr><h3 id="얕은-복사와-깊은-복사"><a href="#얕은-복사와-깊은-복사" class="headerlink" title="얕은 복사와 깊은 복사"></a>얕은 복사와 깊은 복사</h3><p>얕은 복사(<code>shallow copy</code>)는 바로 아래 단계의 값만 복사하는 방법이고,<br>깊은 복사(<code>deep copy</code>)는 내부의 모든 값들을 하나하나 찾아서 전부 복사하는 방법입니다.</p><p>얕은 복사는 중접된 <code>object</code>에서 참조형 데이터가 저장된 프로퍼티를 복사할 때 그 주솟값만 복사합니다.<br>그러므로 해당 <u>프로퍼티에 대해 원본과 사본이 모두 동일한 참조형 데이터 주소</u>를 가리키게 됩니다.<br>즉, <mark>얕은 복사는 사본을 바꾸면 원본도 바뀌고, 원본을 바꾸면 사본도 바뀝니다.</mark></p><figure class="highlight js"><figcaption><span>중첩된 객체에 대한 얕은 복사</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//복사해서 새로운 object를 반환하는 함수</span></span><br><span class="line"><span class="keyword">var</span> copyObject = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> target) &#123;</span><br><span class="line">    result[prop] = target[prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  name: <span class="string">'Jaenam'</span>,</span><br><span class="line">  urls: &#123;</span><br><span class="line">    portfolio: <span class="string">'http://github.com/abc'</span>,</span><br><span class="line">    blog: <span class="string">'http://blog.com'</span>,</span><br><span class="line">    facebook: <span class="string">'http://facebook.com/abc'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> user2 = copyObject(user);</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> user2.name = <span class="string">'Jung'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user.name === user2.name); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> user.urls.portfolio = <span class="string">'http://portfolio.com'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user.urls.portfolio === user2.urls.portfolio); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> user2.urls.blog = <span class="string">''</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user.urls.blog === user2.urls.blog); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol><li><p>사본인 <code>user2</code>의 <code>name</code> 프로퍼티 값을 바꿔도 원본 <code>user</code>의 <code>name</code> 프로퍼티 값은 바뀌지 않습니다.</p></li><li><p>2번 과 3번 코드는 원본과 사본 어느 쪽을 바꾸더라도 다른 한쪽의 값 역시 바뀐 것을 확인할 수 있습니다.</p></li></ol><p>즉, <code>user</code> 객체에 직접 속한 프로퍼티에 대해서는 복사하여 새로운 데이터가 만들어진 반면,<br>한 단계 더 들어간 <code>urls object</code>의 내부 프로퍼티들은 기존 데이터를 참조합니다.</p><p>이런 현상을 막기 위해서는 한 단계 더 들어가는 프로퍼티들도 불변 객체로 만들 필요가 있습니다.</p><figure class="highlight js"><figcaption><span>중첩된 객체에 대한 깊은 복사</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//복사해서 새로운 object를 반환하는 함수</span></span><br><span class="line"><span class="keyword">var</span> copyObject = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> target) &#123;</span><br><span class="line">    result[prop] = target[prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  name: <span class="string">'Jaenam'</span>,</span><br><span class="line">  urls: &#123;</span><br><span class="line">    portfolio: <span class="string">'http://github.com/abc'</span>,</span><br><span class="line">    blog: <span class="string">'http://blog.com'</span>,</span><br><span class="line">    facebook: <span class="string">'http://facebook.com/abc'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user2 = copyObject(user);</span><br><span class="line"><span class="number">1.</span> user2.urls = copyObject(user.urls);</span><br><span class="line"></span><br><span class="line">user.urls.portfolio = <span class="string">'http://portfolio.com'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user.urls.portfolio === user2.urls.portfolio); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">user2.urls.blog = <span class="string">''</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user.urls.blog === user2.urls.blog); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol><li>사본 <code>user2</code>의 <code>urls</code>프로퍼티에 <code>copyObject()</code> 함수를 실행하여 원본 <code>user</code>의 <code>urls</code>프로퍼티의 내부까지 복사하여 새로운 <code>object</code>를 만들어 할당했습니다. 그 결과 원본과 사본의 참조형 데이터 프로퍼티 값이 서로 다른 결과를 얻어냈습니다.</li></ol><hr><h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><p>정리하자면 <u>객체를 복사할 때 객체 내부의 모든 값을 복사하여 새로운 객체를 만들고자 할때</u>.<br>객체의 프로퍼티가 <mark>기본형 데이터인 경우 그대로 복사하면 되지만,<br>참조형 데이터는 내부의 프로퍼티들을 다시 복사하는 과정을 거쳐야 깊은 복사가 되는 것입니다.</mark></p><p>아래는 이 개념을 바탕으로 원본데이터를 깊은 복사 방식으로 새로운 객체를 반환하는 코드입니다.</p><hr><h4 id="깊은-복사로-복사하는-방법"><a href="#깊은-복사로-복사하는-방법" class="headerlink" title="깊은 복사로 복사하는 방법"></a>깊은 복사로 복사하는 방법</h4><figure class="highlight js"><figcaption><span>객체의 깊은 복사를 도와주는 범용 함수</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> copyObjectDeep = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  <span class="comment">/* target이 object인 경우 내부 프로퍼티들을 순회하여</span></span><br><span class="line"><span class="comment">    copyObjectDeep 함수를 재귀적으로 호출합니다.*/</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span> &amp;&amp; target !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> target) &#123;</span><br><span class="line">      result[prop] = copyObjectDeep(target[prop]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//object가 아닌 경우 target을 그대로 지정합니다. </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = target;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><code>target === object</code> 뒤에 <code>target !== null</code> 조건이 붙은 이유는<br>typeof 메서드가 null 값에 대해 ‘object’를 반환하는 일종의 버그성? 때문입니다.</p></li><li><p>이 함수를 사용해 객체를 복사하면 원본과 사본이 서로 다른 주소를 참조하게 되어 한 쪽의 프로퍼티를 변경하더라도 다른 한 쪽에 영향을 주지 않습니다.</p></li></ul><hr><p>객체를 JSON 문법으로 표현된 문자열로 변환했다가 다시 JSON객체로 바꾸는 방법도 있습니다.</p><figure class="highlight js"><figcaption><span>JSON을 이용한 간단한 깊은 복사</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> copyObjectViaJSON = <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(target));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="literal">null</span>,</span><br><span class="line">    d: [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    func1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  func2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = copyObjectViaJSON(obj);</span><br><span class="line"></span><br><span class="line">obj2.a = <span class="number">3</span>;</span><br><span class="line">obj2.b.c = <span class="number">4</span>;</span><br><span class="line">obj.b.d[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1. b: &#123; c: null, d: [1, 3], func1: f() &#125;, func2: f() &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123; a: 3. b: &#123; c: 4,    d: [1, 2] &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>이 방법은 단순하고 잘 동작합니다. 하지만 <mark>메서드(함수)나 숨겨진 프로퍼티인 &#95;&#95;proto&#95;&#95;나 getter/setter 등과 같이 JSON으로 변경할 수 없는 프로퍼티들은 모두 무시됩니다.</mark><br><u>httpReaquest로 받은 데이터를 저장한 object를 복사할 경우 등 순수한 정보만을 다루는 object 복사에 좋은 방법입니다.</u></p><hr><h2 id="1_6">undefined 와 null</h2><p>자바스크립트에 “없음”을 나타내는 두 값 <code>&quot;undefined&quot;</code> 와 <code>&quot;null&quot;</code><br>미세하게 다른 둘의 의미와 사용하는 목적을 살펴봅시다.</p><hr><h5 id="자바스크립트는-다음과-같은-경우-엔진에서-undefined-값을-자동으로-부여합니다"><a href="#자바스크립트는-다음과-같은-경우-엔진에서-undefined-값을-자동으로-부여합니다" class="headerlink" title="자바스크립트는 다음과 같은 경우 엔진에서 undefined 값을 자동으로 부여합니다."></a>자바스크립트는 다음과 같은 경우 엔진에서 undefined 값을 자동으로 부여합니다.</h5><ol><li><p>값을 대입하지 않은 변수,즉 데이터 영역에 메모리 주소를 지정하지 않은 식별자에 접근할 때</p></li><li><p>존재하지 않는 프로퍼티에 접근할 때</p></li><li><p>return 문이 없거나 호출되지 않는 함수의 실행 결과</p></li></ol><figure class="highlight js"><figcaption><span>엔진에서 undefined를 부여하는 경우 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// (1) undefined. 값을 대입하지 않은 변수에 접근</span></span><br><span class="line">                <span class="comment">// a 는 데이터 영역의 메모리 주소가 지정되지 않은 식별자</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b); <span class="comment">// (2) 존재하지 않는 프로퍼티에 접근</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// c.f) ReferenceError: b is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> c = func(); <span class="comment">// (3) 반환(return)값이 없으면 undefined를 반환한 것으로 간주.</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h5 id="값을-대입하지-않은-변수가-빈-배열일-경우"><a href="#값을-대입하지-않은-변수가-빈-배열일-경우" class="headerlink" title="값을 대입하지 않은 변수가 빈 배열일 경우"></a>값을 대입하지 않은 변수가 빈 배열일 경우</h5><p>값을 대입하지 않은 변수가 빈 배열일 경우 특이한 결과를 확인할 수 있습니다.</p><figure class="highlight js"><figcaption><span>undefined 와 빈 배열</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">var</span> arr1 = [];</span><br><span class="line">arr1.length = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [empty x 3]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [empty x 3]</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="keyword">var</span> arr3 = [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [undefined, undefined, undefined]</span></span><br></pre></td></tr></table></figure><ol><li>빈 배열을 만들고 배열의 length 값을 3으로 지정하고 console에 찍으니 <code>[empty x 3]</code>이 출력됩니다.<br>이는 배열에 3개의 빈 배열 요소를 확보했지만 확보된 요소에 어떤 값도 할당되어 있지 않음을 의미합니다.<br>(undefined 조차 할당되어 있지 않습니다.)</li></ol><ol start="2"><li>new 연산자를 사용해 Array 생성자 함수를 호출하고 length 값을 3으로 지정했습니다. 위에 1번과 같은 결과를 갖습니다.</li></ol><ol start="3"><li><p>배열을 만들고 각 요소에 undefined 값을 지정했습니다. 출력시 <code>[undefined, undefined, undefined]</code>가 출력됩니다.</p><p> <img src="/images/Array_empty.JPG" alt="undefined 와 null"></p></li></ol><p>이처럼 “비어있는 요소”(<code>empty</code>)와 “<code>undefined</code>를 할당한 요소는” 출력 결과부터 다릅니다.</p><blockquote><p>empty !=== undefined</p></blockquote><p><code>&quot;비어있는 요소&quot;</code>는 이터러블과 관련된 많은 배열 메서드들의 대상에서 제외됩니다.</p><p>사실은 <code>Array</code>도 <code>object</code>임을 생각해보면 자연스러운 현상입니다.</p><p>존재하지 않는 프로퍼티를 이터러블 메서드로 순회할 수 없는 것이 당연합니다.</p><p><del>배열은 length 프로퍼티의 개수만큼 빈 공간을 확보하고 각각의 인덱스를 이름으로 지정할 것이라고 생각할 수 있지만,</del></p><p><mark>실제로는 object와 마찬가지로 특정 인덱스에 값을 지정할 때 비로소 빈 공간을 확보하고 인덱스를 이름으로 지정하고 데이터의 주솟값을 저장하는 동작을 합니다.</mark></p><p>즉, 값이 지정되지 않은 인덱스는 프로퍼티값이 지정되지 않은 빈 공간입니다.</p><p>위 처럼 <code>undefined</code>는 엔진이 부여하는 경우와 사용자가 값으로 할당한 실존하는 데이터인 경우로 나뉠수 있습니다.<br>이러한 방식은 혼란을 가져올 수 있습니다.<br>사용자가 “비어 있음”을 나타내고 싶어 할당한 값과, 엔진이 부여하는 “해당 값이 없음”<br>이 두가지를 확실히 구분하기 위해 사용하는 것이 바로 <code>null</code> 입니다.</p><hr><h5 id="null-사용-뜻"><a href="#null-사용-뜻" class="headerlink" title="null 사용 뜻"></a>null 사용 뜻</h5><p>사용자가 <code>&quot;비어있음&quot;</code>을 뜻하는 용도로 사용하고 싶을 때는 <code>null</code>을 사용하도록 합니다.<br><code>null</code>을 이런 용도에 사용하는 규칙을 지킨다면, <code>undefined</code>가 <strong>“값을 대입하지 않은 변수에 접근할 때” 엔진이 반환해 주는 값으로만 존재할 수 있습니다.</strong></p><p><del>애초에 null이 이런 용도로 만들어진 데이터 타입입니다.</del></p>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/16/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%ED%83%80%EC%9E%85%20-Core%20JavaScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Promise 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/04/14/Promise%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/04/14/Promise%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</guid>
      <pubDate>Tue, 14 Apr 2020 00:44:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;Promise 오브젝트는 비동기(Asynchronous)처리를 위한 메커니즘을 제공합니다.&lt;br&gt;ES5까지 없었던 개념으로 ES6에 추가되었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Promise 오브젝트&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise&quot;&gt;개요&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Promise 처리 순서&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_상태&quot;&gt;Promise 상태&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;settled 상태&lt;/li&gt;
&lt;li&gt;fulfill (성공)&lt;/li&gt;
&lt;li&gt;reject (실패)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/Promise%20오브젝트%20-ECMAScript/#newPromise&quot;&gt;new Promise(): Promise 인스턴스 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_then&quot;&gt;then(): 성공, 실패 핸들러&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_catch&quot;&gt;catch(): 실패 핸들러&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_resolve&quot;&gt;resolve(): 성공 상태의 인스턴스 반환&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;thenable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_reject&quot;&gt;reject(): 실패 상태의 인스턴스 반환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_all&quot;&gt;all(): 모두 성공이면 핸들러 실행&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_race&quot;&gt;race(): 처음 한 번만 핸들러 호출&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Promise 오브젝트는 비동기(Asynchronous)처리를 위한 메커니즘을 제공합니다.<br>ES5까지 없었던 개념으로 ES6에 추가되었습니다.</p><ul><li>Promise 오브젝트<ul><li><a href="/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise">개요</a><ul><li>Promise 처리 순서</li></ul></li><li><a href="/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_상태">Promise 상태</a><ul><li>settled 상태</li><li>fulfill (성공)</li><li>reject (실패)</li></ul></li><li><a href="/2020/04/14/Promise%20오브젝트%20-ECMAScript/#newPromise">new Promise(): Promise 인스턴스 생성</a></li><li><a href="/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_then">then(): 성공, 실패 핸들러</a></li><li><a href="/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_catch">catch(): 실패 핸들러</a></li><li><a href="/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_resolve">resolve(): 성공 상태의 인스턴스 반환</a><ul><li>thenable</li></ul></li><li><a href="/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_reject">reject(): 실패 상태의 인스턴스 반환</a></li><li><a href="/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_all">all(): 모두 성공이면 핸들러 실행</a></li><li><a href="/2020/04/14/Promise%20오브젝트%20-ECMAScript/#Promise_race">race(): 처음 한 번만 핸들러 호출</a></li></ul></li></ul><a id="more"></a><hr><h2 id="Promise">개요</h2><p>자바스크립트는 기본적으로 동기(Synchronous)로 실행합니다. 동기 실행이란 현재 코드가 실행을 완료해야 다음 코드가 실행되는 것을 의미합니다. 여러 줄의 코드가 있다고 했을 때, 첫째 줄의 코드가 실행을 완료해야 둘째 줄이 실행되며, 둘째 줄이 실행을 완료해야 셋째 줄이 실행되는 형태입니다.</p><p>반면, Promise는 비동기(Asynchronous)로 실행합니다. XMLHttp Request의 비동기 통신과 비슷합니다.<br>클라이언트에서 서버로 보낸 요청(Request)에 서버가 응답(Response)할 때까지 통신이 연결된 상태에서 기다리지 않습니다. 따라서 서버가 처리하는 동안 다른 처리를 할 수 있습니다. 클라이언트에서 서버가 응답했을 때의 처리를 사전에 정의해 두면, 서버가 응답했을 때 정의한 코드가 자동으로 실행됩니다.<br>Promise도 이와 개념이 비슷합니다.</p><p>코드 구현 관점에서 보면 Promise는 하나의 오브젝트입니다. Promise 오브젝트에서 비동기 처리 방법을 제공하므로 이에 맞추어 코드를 작성하면 됩니다.</p><p>Promise 오브젝트는 DOM(Document Object Model)에서 처음 제시되었으나 현재는 JavaScript 스펙에 포함되었습니다. 따라서 DOM에서도 사용이 가능하며 이는 DOM을 사용하는 다른 언어에서도 Promise를 사용할 수 있다는 것이 됩니다.</p><h3 id="Promise-처리-순서"><a href="#Promise-처리-순서" class="headerlink" title="Promise 처리 순서"></a>Promise 처리 순서</h3><p>Promise 개념을 이해하기 위해 Promise의 비동기 처리 흐름을 간단하게 살펴봅니다.</p><figure class="highlight js"><figcaption><span>Promise 처리 흐름</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="number">3.</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </span><br><span class="line"> resolve();  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"1: resolve"</span>);  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="number">4.</span> <span class="number">6.</span> create().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"3: 성공"</span>);  </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"3: 실패"</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="number">5.</span> <span class="built_in">console</span>.log(<span class="string">"2: 끝"</span>);  </span><br><span class="line"><span class="comment">// 1: resolve  </span></span><br><span class="line"><span class="comment">// 2: 끝  </span></span><br><span class="line"><span class="comment">// 3: 성공</span></span><br></pre></td></tr></table></figure><ol><li><p>엔진이 function 키워드를 만나면 create()를 호출할 수 있도록 Function 오브젝트로 생성합니다.<br>함수 안에 코드는 실행하지 않고 다음 줄로 이동합니다.</p></li><li><p>create() 함수를 호출합니다. 함수 안에 코드가 실행됩니다.</p></li><li><ol><li>return 문의 표현식을 평가하므로 new Promise()로 인스턴스를 생성합니다.</li><li>이때, Promise() 파라미터에 작성한 function(){}을 실행합니다. (function을 executer(실행자)라고 합니다.)</li><li>function(executer) 블록의 첫째 줄에 resolve()가 작성되어 있습니다. 그런데 호출을 받아서 처리할 같은 이름의 함수가 소스 코드에 없습니다. 단지 파라미터에 resolve가 작성되어 있을 뿐입니다.</li><li>resolve() 형태가 함수를 호출하는 형태이지만 호출하지 않습니다. 이에 대해서는 사전 설명이 필요하므로 뒤에서 다룹니다.</li><li>다음 줄에 console.log()를 실행하여 “1: resolve”를 출력합니다.</li><li>생성한 인스턴스를 반환합니다.<br><mark>여기서 중요한 점이 executer가 실행된다는 것과 resolve()가 호출되지 않는다는 점입니다. resolve()를 바로 호출하지 않고 호출할 수 있는 환경이 되었을 때 호출합니다.<mark></li></ol></li><li><p>create() 실행이 끝나면 생성한 Promise 인스턴스를 반환합니다. Promise 인스턴스에 then()이 있으므로 이어서 then()을 호출할 수 있습니다. 하지만 then()을 호출하지 않고, 아래 코드로 이동합니다.<br><mark>앞에서 resolve()를 호출할 수 있는 환경이 되었을 때 호출하는 것과 then()을 실행하지 않고 아래 코드로 이동하는 것이 Promise 비동기 처리의 핵심 매커니즘 입니다.</mark></p></li><li><p>create() 실행 이후에 then()을 호출하지 않고 다음 줄로 이동했을 때 만나는 코드입니다.<br>“2: 끝”이 출력됩니다. 이제 더 이상 남아있는 코드가 없습니다.</p></li><li><p>이제 남은 것은 then()에 작성한 function()의 실행입니다.<br>then()은 두 개의 파라미터를 갖고 있습니다.<br>위 코드에서는 첫 번째 파라미터의 function이 실행되어 “3: 성공”이 출력됩니다.<br>두 번째 파라미터의 function은 실행되지 않습니다. 첫 번째 파라미터 function이 실행된 이유는 뒤에서 다룹니다.</p></li></ol><ul><li>console.log 출력 순서를 보면<ol><li>“1: resolve”는 new Promise()로 인스턴스를 생성할 때 executer에서 출력합니다.<br>Promise 인스턴스를 생성해야 메서드를 사용할 수 있으므로 먼저 인스턴스를 생성합니다.</li><li>“2: 끝”은 create()에 연결된 then()을 실행하지 않으므로 두 번째로 실행됩니다.</li><li>“3: 성공”은 소스 코드 전체를 끝까지 처리한 후 실행되어 세 번째로 출력됩니다.</li></ol></li></ul><hr><h2 id="Promise_상태">Promise 상태</h2><p>Promise는 코드를 실행할 때마다 진행 상태를[[PromiseState]]에 저장합니다.<br>상태를 저장하는 이유는 연속해서 코드를 실행하지 않고, 소스 코드 끝까지 내려갔다 다시 올라와서 실행하므로 진행 상태가 필요하기 때문입니다. 상태에 따라 다음 단계를 처리하기 위해서 입니다.</p><img src="/images/promise.SVG"><p>Promise 진행 상태는 크게 두 가지로 나눌 수 있습니다.<br>pending 과 settled로 나뉩니다.<br>settled 상태는 다시 fulfill(성공) 과 reject(실패)로 나눌 수 있습니다.<br>pending 과 settled는 상태이면서 발생 단계입니다. 먼저 pending 상태가 되었다가 settled 상태로 넘어갑니다.<br>단계로 보면 두 단계 (pending, settled)이지만 상태 측면에서 보면 세 개이므로 세 개의 상태로 분류하기도 합니다.</p><h3 id="pending-상태"><a href="#pending-상태" class="headerlink" title="pending 상태"></a>pending 상태</h3><figure class="highlight js"><figcaption><span>pending</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </span><br><span class="line"> resolve();  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"1: resolve"</span>);  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>pending 상태(단계)에서는 위 코드와 같이 우선 new Promise()로 인스턴스를 생성합니다. 그리고 <mark>executer를 실행하여 성공과 실패에 따라 호출할 핸들러 함수를 바인딩 합니다.</mark><br>바인딩이란 resolve()와 같이 바로 함수를 호출하지 않고 나중에 호출하므로, 그때를 위한 호출 환경을 설정하는 것을 의미합니다.</p><p>executer 블록의 코드를 실행하지 않고 소스 코드 끝까지 처리한 후 실행하므로 이 시점에서 Promise 처리의 성공과 실패를 알 수 없습니다. 따라서 성공 또는 실패가 발생했을 때, 이에 따라 함수가 호출될 수 있도록 환경 설정이 필요합니다.</p><h3 id="settled-상태"><a href="#settled-상태" class="headerlink" title="settled 상태"></a>settled 상태</h3><figure class="highlight js"><figcaption><span>settled</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"3: 성공"</span>);  </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"4: 실패"</span>);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>pending 상태가 종료되면 settled 상태로 변환됩니다. 이때 처리의 성공과 실패를 알 수 있습니다.<br>settled 상태는 다시 fulfill(성공) 상태와 reject(실패) 상태로 구분됩니다. 상태에 따라 pending 단계에서 바인딩한 핸들러 함수가 호출됩니다.</p><h4 id="fulfill-성공"><a href="#fulfill-성공" class="headerlink" title="fulfill (성공)"></a>fulfill (성공)</h4><p>executer 불록의 코드가 성공적으로 실핸된 상태를 나타냅니다.<br>then()의 첫 번째 파라미터의 핸들러(function)가 실행됩니다. - 핸들러 안에 성공에 따른 코드를 작성합니다.</p><h4 id="reject-실패"><a href="#reject-실패" class="headerlink" title="reject (실패)"></a>reject (실패)</h4><p>executer 블록의 코드 실행이 실패한 상태를 나타냅니다.<br>then()의 두 번째 파라미터의 핸들러가 실행됩니다. - 핸들러 안에 실패에 따른 코드를 작성합니다.</p><hr><h2 id="newPromise">new Promise(): Promise 인스턴스 생성</h2><p>Promise 인스턴스를 생성하여 반환합니다.</p><blockquote><p>new Promise()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </span><br><span class="line"> resolve( );  </span><br><span class="line"> reject( );  </span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ul><li><p>executer에 두 개의 파라미터를 작성할 수 있습니다. 첫 번째 파라미터에 executer 블록에서 처리를 성공했을 때 호출할 핸들러 이름(resolve)를 작성합니다. 두 번째 파라미터에 실패했을 때 호출할 핸들러 이름(reject)를 작성합니다. resolve 와 reject는 가독성을 위한 것으로 다른 이름을 사용해도 됩니다.</p></li><li><p>executer 블록에 핸들러 함수를 작성하지 않으면, then()의 파라미터에 작성한 함수가 실행되지 않습니다.<br>핸들러 함수 이름과 executer의 파라미터에 작성한 이름과 같아야 하며, 같지 않으면 에러가 발생합니다.<br>예를 들어, resolve() 와 function(resolve)와 같이 resolve 이름이 같아야 합니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">param</span>)</span>&#123;  </span><br><span class="line"> <span class="number">2.</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </span><br><span class="line"> <span class="number">3.</span> <span class="keyword">if</span> (param === <span class="string">"ok"</span>)&#123;  </span><br><span class="line"> resolve(param);  </span><br><span class="line"> <span class="number">4.</span> <span class="built_in">console</span>.log(<span class="string">"1: resolve"</span>);  </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line"> reject(param);  </span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="number">5.</span> create(<span class="string">"ok"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;  </span><br><span class="line"> <span class="number">7.</span> <span class="built_in">console</span>.log(<span class="string">"3: 성공,"</span>, param);  </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"3: 실패,"</span>, param);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="number">6.</span> <span class="built_in">console</span>.log(<span class="string">"2: 끝"</span>);  </span><br><span class="line"><span class="comment">// 1: resolve  </span></span><br><span class="line"><span class="comment">// 2: 끝  </span></span><br><span class="line"><span class="comment">// 3: 성공, ok</span></span><br></pre></td></tr></table></figure><ol><li><p>create()를 호출하면서 “ok”를 파라미터 값으로 넘겨 줍니다. 호출받은 create() 함수의 파라마터 param에 설정됩니다.</p></li><li><p>executer의 파라미터에 resolve 와 reject를 작성했습니다. Function 오브젝트를 생성하여 resolve 와 reject에 할당합니다. Promise 인스턴스를 생성하여 return 한 후, create()에 연결된 then()의 파라미터에 작성한 함수와 연결합니다.<br>이렇게 설정함으로써 executer 블록에서 resolve()를 호출하면 then()의 첫 번째 파라미터의 함수가 호출되고, reject()를 호출하면 then()의 두 번째 파라미터의 함수가 호출됩니다.<br>executer 파라미터의 resolve와 executer 블록의 resolve()와 then()의 첫 번째 파라미터 함수가 연결되고,<br>executer 파라미터의 reject와 executer 블록의 reject()와 then()의 두 번째 파라미터 함수가 연결되는 것입니다.</p></li><li><p>param 값으로 받은 파라미터가 “ok”이므로 true가 되어 if 문 블록을 수행합니다.<br>resolve(param)가 함수를 호출하는 형태이지만, 지금 호출하지 않고 소스 코드를 끝까지 실행한 후 되돌아와서 호출합니다. 되돌아와서 resolve()를 호출하면 이를 받아 실행할 같은 이름의 함수가 없습니다.<br><mark>이때 executer 파라미터의 resolve에 설정된 함수를 호출합니다. 그러면 resolve 와 then()의 첫 번째 파라미터의 함수와 연결되어 있으므로 then()의 첫 번째 함수가 연결되어 있으므로 then()의 첫 번째 함수가 실행됩니다. 이것이 Promise의 비동기 처리 메커니즘입니다.</mark></p></li><li><p>resolve(param) 다음 줄에 console.log을 실행하며 “1: resolve”를 출력합니다.<br>이제 남은 것은 생성한 인스턴스를 반환하는 것입니다.</p></li><li><p>create(“ok”)의 호출이 완료되면 Promise 인스턴스를 반환하므로 “인스턴스.then()” 형태가 되어 then()을 실행할 수 있지만 바로 실행하지 않습니다. 우선 then()의 첫 번째 파라미터를 executer의 resolve에 바인딩하고, then()의 두 번째 파라미터를 executer의 reject에 바인딩 합니다.<br>이렇게 바인딩을 함으로써 executer 블록에서 resolve()를 호출했을 때 then()의 첫 번째 파라미터에 작성한 함수가 실행됩니다.</p></li><li><p>소스 코드의 마지막 코드로 console에 “2: 끝”을 출력합니다. 모든 코드를 읽었으므로 이제 남은 것은 resolve()를 실행하는 것입니다.</p></li><li><p>executer 블록에서 resolve(param)을 호출하면, then()의 첫 번째 파라미터 함수가 호출됩니다.<br>이때, resolve(param)에서 param 값인 “ok”가 핸들러 함수인 function(param)의 param에 설정됩니다.<br>따라서 console에 “3: 성공, ok”가 출력됩니다.</p></li></ol><figure class="highlight js"><figcaption><span>fail</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">param</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">if</span> (param === <span class="string">"ok"</span>)&#123;  </span><br><span class="line"> resolve(param);  </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line"> reject(param);  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"1: reject"</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> create(<span class="string">"fail"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"3: 성공,"</span>, param);  </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"3: 실패,"</span>, param);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2: 끝"</span>);  </span><br><span class="line"><span class="comment">// 1: reject  </span></span><br><span class="line"><span class="comment">// 2: 끝  </span></span><br><span class="line"><span class="comment">// 3: 실패, fail</span></span><br></pre></td></tr></table></figure><ul><li>바로 앞에서 다룬 코드는 성공 기준이며 위 코드는 실패 기준입니다.<br>Promise 처리 흐름은 같습니다. then()의 두 번째 파라미터에 작성한 함수가 실행된다는 점이 다릅니다.</li></ul><ol><li>create()를 호출하면서 “fail”을 파라미터 값으로 넘겨 줍니다.<br>호출된 create() 함수에서 if 문의 else 블록 reject(param)과 console.log(“1: reject”)를 실행하게 됩니다.<br>물론 reject(param)은 이때 호출되지 않고 소스 코드를 끝까지 실행한 후 되돌아와서 호출 환경이 설정되있을 때 호출됩니다.<br>executer 블록에서 reject()가 호출되면 then()의 두 번째 파라미터에 작성한 함수가 실행됩니다.<br>따라서 콘솔에 “3: 실패, fail”이 출력됩니다.</li></ol><hr><h2 id="Promise_then">then(): 성공, 실패 핸들러</h2><p>성공과 실패 핸들러를 정의합니다.</p><blockquote><p>Promise.prototype.then(onFulfilled, onRejected)</p></blockquote><p>첫 번째 파라미터에 Promise가 성공 상태가 되었을 때 실행될 핸들러 함수를 작성합니다.<br>두 번째 파라미터에 Promise가 실패 상태가 되었을 때 실행될 핸들러 함수를 작성합니다.</p><ul><li><p>executer 블록의 resolve() 와 reject()에서 다수의 파라미터 값을 넘겨주더라도 핸들러 함수에서 첫 번째 파라미터 하나만 받습니다. 따라서 여러 개의 파라미터 값을 넘겨 주려면 resolve()와 reject()의 파라미터에 배열과 같은 형태로 작성해야 합니다.</p></li><li><p>resolve(성공) 와 reject(실패) 핸들러 함수에서 return 문의 작성 여부와 관계없이 현재 실행 중인 Promise 인스턴스를 반환합니다. return 문을 작성하면 return 문의 표현식을 평가하고 그 결과를 [[PromiseValue]]에 undefined를 설정합니다.</p></li><li><p>then() 에서 Promise 인스턴스를 반환하므로 then(one).then(two)와 같이 then()을 연속해서 작성할 수 있습니다. 이때, 첫 번째 then()에서 [[PromiseValue]]에 설정한 값이 두 번째 then(two)의 파라미터인 two에 설정됩니다. 핸들러 함수에서 Promise 인스턴스를 반환하여 연속해서 메서드를 호출할 수 있도록 하고, return 문의 반환 값을 [[PromiseValue]]에 설정하여 다음 then()의 핸들러 함수의 파라미터에 설정합니다.</p></li></ul><figure class="highlight js"><figcaption><span>then()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="number">100</span>));  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">2.</span> create().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"1:then"</span>));  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> create().then(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"2:then,"</span>, param);  </span><br><span class="line"> <span class="keyword">return</span> param + <span class="number">50</span>;  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> create().then(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"3:then,"</span>, param);  </span><br><span class="line"> <span class="keyword">return</span> param + <span class="number">70</span>;  </span><br><span class="line">&#125;).then(<span class="function">(<span class="params">param</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"4:then,"</span>, param));  </span><br><span class="line"><span class="comment">// 1:then  </span></span><br><span class="line"><span class="comment">// 2:then, 100  </span></span><br><span class="line"><span class="comment">// 3:then, 100  </span></span><br><span class="line"><span class="comment">// 4:then, 170</span></span><br></pre></td></tr></table></figure><ol><li><p>create()가 호출되면 executer 블록의 resolve()를 수행하게 됩니다.<br>하지만 호출받을 resolve 함수가 없으므로 호출 환경이 되었을 때 호출합니다.<br>즉, 소스 코드 끝까지 처리하고 되돌아와 호출합니다.<br>실패가 발생하지 않으면 executer의 파라미터와 블록에 reject를 작성하지 않아도 됩니다.</p></li><li><p>then()의 첫 번째 파라미터에 핸들러 함수를 작성하여 연결합니다. executer 블록에서 resolve 파라미터 값으로 100을 넘겨 주지만 이 코드에서는 사용되지 않습니다. “1:then”을 출력합니다.</p></li><li><p>두 번째로 create()를 호출하여 Promise 인스턴스를 생성합니다. executer 블록에서 resolve(100)으로 호출하면, then()의 첫 번째 파라미터의 핸들러 함수가 실행되며 100이 param에 설정됩니다.<br>return문의 표현식을 평가한 150을 [[PromiseValue]]에 설정만하고 반환하지 않으며, 실행 중인 Promise 인스턴스를 반환합니다.</p></li><li><p>세 번째로 create()를 호출하여 Promise 인스턴스를 생성합니다. then()의 첫 번째 파라미터의 핸들러 함수가 호출되면 param 파라미터에 100이 설정됩니다. return 문의 표현식을 평가한 170을 [[PromiseValue]]에 설정하고 실행중인 Promise 인스턴스를 반환합니다.<br>then()에서 Promise 인스턴스를 반환하므로 두 번째 .then() 으로 호출할 수 있습니다.<br>[[PromiseValue]]에 설정된 170이 param 파라미터에 설정되며 “4: then, 170”이 출력됩니다.</p></li></ol><p>코드 실행 순서 정리 :</p><ol><li><p>첫 번째 create() 함수를 호출합니다. Promise 인스턴스를 반환합니다.<br>연결된 then()의 핸들러 함수를 실행하지 않고 아래로 이동합니다.</p></li><li><p>두 번째 create() 함수를 호출합니다. Promise 인스턴스를 반환합니다.<br>연결된 then()의 핸들러 함수를 실행하지 않고 아래로 이동합니다.</p></li><li><p>세 번째 create() 함수를 호출합니다. Promise 인스턴스를 반환합니다.<br>연결된 then()의 핸들러 함수를 실행하지 않고 아래로 이동합니다.</p></li><li><p>더 이상 처리할 코드가 없습니다.</p></li><li><p>첫 번째의 executer 블록의 resolve()가 호출되며 then()의 핸들러 함수가 실행됩니다.<br>콘솔에 “1:then”이 출력됩니다.</p></li><li><p>두 번째의 executer 블록의 resolve()가 호출되며 then()의 핸들러 함수가 실행됩니다.<br>콘솔에 “2:then, 100”이 출력됩니다.</p></li><li><p>세 번째의 executer 블록의 resolve()가 호출되며 then()의 핸들러 함수가 실행됩니다.<br>콘솔에 “3:then, 100”이 출력됩니다.</p></li><li><p>세 번째의 then()에 연결된 then()의 핸들러 함수가 실행됩니다.<br>콘솔에 “4:then, 170”이 출력됩니다.</p></li></ol><p><mark>then().then()과 같이 then()이 연결되어 있으면, 처음 then()의 핸들러 함수를 실행한 후, 두 번째 then()의 함수 코드를 실행합니다. 이때 처음 then()의 return 값이 두 번째 then()함수의 파라미터 값으로 설정됩니다.</mark></p><hr><h2 id="Promise_catch">catch(): 실패 핸들러</h2><p>실패(reject) 핸들러를 정의합니다.</p><blockquote><p>Promise.prototype.catch(onRejected)</p></blockquote><ul><li><p>파라미터에 Promise가 reject 상태가 되었을 때 실행될 핸들러 함수를 작성합니다.<br>then()의 첫 번째 파라미터에 함수를 작성하고, 두 번째 파라미터는 작성하지 않습니다.<br>대신 then().catch() 형태로 작성하여 then()의 두 번째 파라미터에 작성할 함수를 catch()의 파라미터에 작성합니다. then()은 성공했을 때 실행되며 catch()는 실패했을 때 실행됩니다.</p></li><li><p>catch() 의 핸들러 함수에 파라미터를 하나만 작성할 수 있습니다.<br>executer 블록의 reject() 에서 다수의 파라미터를 넘겨주려면 배열과 같은 형태로 작성해야 합니다.</p></li><li><p>catch()의 핸들러 함수에서 return 문의 작성 여부와 관계없이 현재 실행 중인 Promise 인스턴스를 반환합니다.</p></li><li><p>catch().then()과 같이 catch() 다음에 then()을 연결할 수 있으며, catch()에서 설정한 [[PromiseValue]] 값을 then()의 파라미터 값으로 넘겨줍니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">param</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;  </span><br><span class="line"> <span class="number">1.</span> param === <span class="string">"ok"</span> ? resolve(param) : reject(param);  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> create(<span class="string">"fail"</span>).then(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"성공:"</span>, param);  </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"실패:"</span>, param);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">// 실패 : fail</span></span><br></pre></td></tr></table></figure><ol><li><p>파라미터로 받은 param 값이 “ok”이면 resolve(param)을 호출하고, 아니면 reject(param)을 호출합니다.<br>“fail”값으로 create()를 호출합니다. 따라서 reject()를 호출하게 되며, catch()의 핸들러 함수가 실행됩니다.</p></li><li><p>create(“fail”)로 호출하여 Promise 인스턴스를 생성합니다.<br>executer 블록에서 reject()가 호출되므로 catch()의 핸들러 함수가 실행됩니다.<br>reject(param)에서 param 값이 핸들러 함수의 파라미터인 param에 설정됩니다.<br>실패만 발생하므로 then()의 핸들러 함수는 실행되지 않고, catch() 핸들러 함수만 실행됩니다.</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">param</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;  </span><br><span class="line"> resolve(<span class="string">"resolve"</span>);  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span>   </span><br><span class="line">create().then(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"1:then,"</span>, param);  </span><br><span class="line"> <span class="keyword">throw</span> <span class="string">"에러 발생 시킴"</span>;  </span><br><span class="line"><span class="number">2.</span>  </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"2:catch,"</span>, param);  </span><br><span class="line"><span class="number">3.</span>  </span><br><span class="line">&#125;).then(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"3:then,"</span>, param);  </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"4:catch,"</span>, param);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">// 1: then, resolve  </span></span><br><span class="line"><span class="comment">// 2: catch, 에러 발생 시킴  </span></span><br><span class="line"><span class="comment">// 3: then, undefined</span></span><br></pre></td></tr></table></figure><ol><li><p>then()의 핸들러 함수가 실행되면 콘솔에 “1:then, resolve”가 출력됩니다.<br>이어서 throw 문으로 에러를 발생시킵니다. 그러면 then()에 이어서 작성한 catch()핸들러 함수가 실행됩니다.</p></li><li><p>executer 블록에서 reject()를 호출해도 catch()의 핸들러 함수가 실행되지만,<br>then()에서 에러가 발생해도 catch()의 핸들러 함수가 실행됩니다.<br>이때, 앞 then()의 throw문에 작성한 “에러 발생 시킴”이 catch() 핸들러 함수의 param 파라미터에 설정됩니다. 콘솔에 “2:catch, 에러 발생 시킴”이 출력됩니다.<br>핸들러 함수에 return 문을 작성하지 않았으므로 [[PromiseValue]]에 undefined가 설정되며 실행 중인 Promise 인스턴스가 반환됩니다. catch()에서 에러가 발생하지 않으면 then().catch().then().catch() 형태에서 catch()에 연결된 두 번째 then()이 실행됩니다. 만약 에러가 발생하여 두 번째 catch()를 실행하더라도 소스 코드 전체가 종료되지 않습니다.</p></li><li><p>then()이 실행되면 catch()에서 [[PromiseValue]]에 설정한 undefined가 param 파라미터에 설정됩니다.<br>콘솔에 “3:then, undefined”가 출력됩니다. then()에 이어서 catch()가 있지만, then()에서 에러가 발생하지 않았으므로 catch()가 실행되지 않습니다. then()의 핸들러 함수를 실행한 후, 소스 코드 전체가 종료됩니다.</p></li></ol><hr><h2 id="Promise_resolve">resolve(): 성공 상태의 인스턴스 반환</h2><p>fulfill(성공) 상태의 Promise 인스턴스를 반환합니다.</p><blockquote><p>Promise.resolve()</p></blockquote><ul><li><p>파라미터<br>value, promise, thenable</p></li><li><p>반환 값<br>파라미터 값에 따라 반환 형태가 다릅니다.</p></li></ul><p>파라미터에 값을 작성하면 성공 상태의 Promise 인스턴스를 생성하여 반환합니다.<br>이어서 then()을 작성하면 then()의 첫 번째 파라미터에 작성한 함수가 호출됩니다.<br>파라미터에 Promise 인스턴스를 지정하면 인스턴스를 성공 상태로 변환하여 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> promiseObj = <span class="built_in">Promise</span>.resolve(  </span><br><span class="line"> &#123;<span class="attr">sports</span>: <span class="string">"스포츠"</span>, <span class="attr">music</span>: <span class="string">"음악"</span>&#125;  </span><br><span class="line">);  </span><br><span class="line"><span class="number">2.</span> promiseObj.then(<span class="function">(<span class="params">param</span>) =&gt;</span>&#123;  </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> param)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(name, param[name]);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">Promise</span>.resolve(  </span><br><span class="line"> [<span class="string">"sports"</span>, <span class="string">"music"</span>]  </span><br><span class="line">).then(<span class="function">(<span class="params">param</span>) =&gt;</span> <span class="built_in">console</span>.log(param));  </span><br><span class="line"><span class="comment">// sports 스포츠  </span></span><br><span class="line"><span class="comment">// music 음악  </span></span><br><span class="line"><span class="comment">// ["sports", "music"]</span></span><br></pre></td></tr></table></figure><ol><li><p>Promise.resolve()를 호출하면 Promise 인스턴스를 생성하고 Promise를 성공 상태로 설정하여 반환합니다.<br>then()의 핸들러 함수에 파라미터 하나만 작성할 수 있으므로 다 수의 파라미터 값을 넘겨주기 위해 Object 오브젝트로 작성했습니다.</p><ul><li>다음은 promiseObj 인스턴스 구조입니다.<img src="/images/resolvePromiseObj.JPG"></li></ul><ol><li><p><strong>proto</strong>에 첨부된 프로퍼티가 Promise.prototype에 연결된 프로퍼티와 같습니다.<br>이는 new 연산자를 사용하지 않고 Promise.resolve()를 실행해도 Promise 인스턴스를 생성한다는 의미입니다.</p></li><li><p>[[PromiseState]] 값이 “resolve”로 설정되어 있습니다. 따라서 then()의 첫 번째 파라미터의 핸들러 함수가 실행됩니다.</p></li><li><p>Promise.resolve()의 파라미터 값이 [[PromiseValue]]에 설정되었으며 then()의 핸들러 함수의 파라미터에 설정됩니다.</p></li></ol></li></ol><ol start="2"><li><p>PromiseObj의 Promise 인스턴스가 성공 상태이므로 then()의 첫 번째 파라미터 함수가 실행됩니다.<br>이 시점에서 실행되지 않고 소스 코드에 작성된 코드를 끝까지 처리한 후 실행됩니다.<br>핸들러 함수의 param 파라미터에 {sports: “스포츠”, music: “음악”}이 설정됩니다.</p></li><li><p>Promise.resolve() 가 Promise 인스턴스를 생성하여 반환하므로 then()을 연결하여 작성할 수 있습니다.<br>지금 then()의 핸들러 함수를 실행하지 않고, 위에 작성한 then()의 핸들러 함수를 먼저 실행한 후 실행합니다.<br>resolve()파라미터 값인 [“sports”, “music”]이 then()의 핸들러 함수의 param 파라미터에 설정됩니다.</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> oneObj = <span class="built_in">Promise</span>.resolve(  </span><br><span class="line"> &#123;<span class="attr">sports</span>: <span class="string">"스포츠"</span>&#125;  </span><br><span class="line">);  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">Promise</span>.resolve(oneObj).then(<span class="function">(<span class="params">param</span>) =&gt;</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(param);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">// Object &#123;sports: "스포츠"&#125;</span></span><br></pre></td></tr></table></figure><ul><li>promise.resolve() 파라미터에 promise.resolve()로 생성한 인스턴스를 지정한 형태입니다.</li></ul><ol><li><p>Promise 인스턴스를 생성하여 반환합니다. 이때 resolve( )의 파라미터 값이 [[PromiseValue]]에 설정됩니다.</p></li><li><p>Promise.resolve() 파라미터에 앞에서 생성한 Promise 인스턴스를 지정했습니다.<br>then()의 핸들러 함수가 실행되면 oneObj 인스턴스 [[PromiseValue]]에 설정된 값이 핸들러 함수의 param 파라미터에 설정됩니다. 즉, {sports: “스포츠”}가 설정됩니다.</p></li></ol><h3 id="thenable"><a href="#thenable" class="headerlink" title="thenable"></a>thenable</h3><blockquote><p>let obj = {then(resolve,reject) {…} }와 같이 오브젝트 안에 then()을 작성한 형태를 thenable이라고 합니다.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> oneObj = <span class="built_in">Promise</span>.resolve(&#123;  </span><br><span class="line"> then(resolve)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"1: then"</span>);  </span><br><span class="line"> resolve(<span class="string">"thenable"</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="number">2.</span> oneObj.then(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"2:"</span>,value));  </span><br><span class="line"><span class="comment">// 1: then  </span></span><br><span class="line"><span class="comment">// 2: thenable</span></span><br></pre></td></tr></table></figure><ol><li><p>Promise.resolve()의 파라미터에 Object 오브젝트를 작성하고, 그 안에 then()을 작성했습니다.<br>이를 thenable이라고 합니다.이 시점에서는 Promise 인스턴스만 생성하고 then()을 실행하지 않습니다.<br>소스 코드의 마지막 코드까지 실행한 후 then()을 실행합니다.<br>oneObj에 생성한 인스턴스를 할당한 시점의 [[PromiseState]]값은 “pending”입니다.<br>then()의 resolve(“thenable”)을 호출하기 전까지 “pending”상태 이며 호출하면 “resolved”로 바뀝니다.</p></li><li><p>oneObj 인스턴스에 then()이 포함되어 있으므로 위 코드를 연결하면 oneObj.then().then() 형태가 됩니다.<br>이 형태는 다음과 같은 순서와 방법으로 실행됩니다.</p><ol><li>oneObj 인스턴스의 then(resolve)가 실행됩니다.</li><li>콘솔에 “1:then”을 출력합니다.</li><li>resolve(“thenable”)을 호출합니다. 이때[[PromiseValue]]에 “thenable”을 설정합니다.</li><li>oneObj.then().then() 형태에서 두 번째 then()이 호출됩니다.</li><li>두 번째 then()의 value 파라미터에 [[PromiseValue]] 값인 “thenable”이 설정됩니다.</li><li>콘솔에 “2:thenable”을 출력합니다.</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> thenable = &#123;  </span><br><span class="line"> then(resolve, reject)&#123;  </span><br><span class="line"> resolve(<span class="string">"resolve"</span>);  </span><br><span class="line"> reject(<span class="string">"에러"</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> oneObj = <span class="built_in">Promise</span>.resolve(thenable);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> oneObj.then(  </span><br><span class="line"> (value) =&gt; <span class="built_in">console</span>.log(value),  </span><br><span class="line"> (value) =&gt; <span class="built_in">console</span>.log(<span class="string">"실행되지 않음"</span>)  </span><br><span class="line">);  </span><br><span class="line"><span class="comment">// resolve</span></span><br></pre></td></tr></table></figure><ul><li>Object 오브젝트에 then(resolve,reject)를 작성하였으며, resolve() 다음 줄에 reject()를 작성하였습니다. 작성 형태만 보면 resolve()를 호출하고 reject()를 호출할 것으로 보이지만,<br><mark>성공 또는 실패 하나만 발생하므로 먼저 작성한 resolve()만 호출됩니다.<br>반대로 reject(), resolve() 순서로 작성하면 reject()만 호출되고 resolve()는 호출되지 않습니다.</mark></li></ul><ol><li><p>Promise.resolve() 파라미터에 thenable 오브젝트를 지정하여 Promise 인스턴스를 생성합니다. 이때 then()은 실행되지 않습니다.</p></li><li><p>oneObj.then()에 두 개의 파라미터를 작성했습니다.<br>첫 번째 파라미터는 resolve()로 호출했을 때 실행되는 함수이고<br>두 번째 파라미터는 reject()로 호출했을 때 실행되는 함수입니다.<br>oneObj 인스턴스에 then()이 있으므로 oneObj.then()은 then().then() 형태가 됩니다.<br>첫 번째 then()에서 resolve(“resolve”)를 호출하면 [[PromiseValue]]에 “resolve”가 설정됩니다.<br>두 번째 then()의 첫 번째 파라미터 함수가 실행되며, value 파라미터에 “resolve”가 설정됩니다.<br>두 번째 파라미터 함수는 reject()를 호출하였을 때 실행되므로 위 코드에서는 실행되지 않습니다.</p></li></ol><hr><h2 id="Promise_reject">reject(): 실패 상태의 인스턴스 반환</h2><p>reject(실패) 상태의 Promise 인스턴스를 반환합니다.</p><blockquote><p>Promise.reject()</p></blockquote><ul><li><p>파라미터에 실패 사유를 작성합니다.</p></li><li><p>reject 상태로 변환된 Promise 인스턴스를 반환합니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> promiseObj = <span class="built_in">Promise</span>.reject(<span class="string">"reject 처리"</span>);  </span><br><span class="line"><span class="number">2.</span> promiseObj.then(  </span><br><span class="line"> (param) =&gt; <span class="built_in">console</span>.log(param),  </span><br><span class="line"> (param) =&gt; <span class="built_in">console</span>.log(<span class="string">"에러:"</span>, param));  </span><br><span class="line"><span class="comment">// 에러: reject 처리</span></span><br></pre></td></tr></table></figure><ol><li><p>Promise.reject()를 실행하면 reject 상태의 Promise 인스턴스를 생성하여 반환합니다.<br>파라미터 값이 [[PromiseValue]]에 설정되며, then()의 두 번째 파라미터 함수의 파라미터 값으로 설정됩니다.<br>다음은 promiseObj 인스턴스 구조입니다.</p><img src="/images/rejectPromiseObj.JPG"><ol><li>Promise 인스턴스의 상태는 “reject”입니다. 따라서 then()의 두 번째 파라미터 함수가 호출됩니다.</li><li>Promise.reject() 파라미터에 작성한 “reject 처리”가 [[PromiseValue]]에 설정됩니다.</li></ol></li><li><p>promiseObj.then()에 두 개의 파라미터를 작성했습니다. 첫 번째 파라미터 함수는 resolve()로 호출했을 때 실행되고, 두 번째 파라미터 함수는 reject()로 호출했을 때 실행됩니다. 현재 reject 상태이므로 두 번째 파라미터 함수가 실행됩니다.</p></li></ol><hr><h2 id="Promise_all">all(): 모두 성공이면 핸들러 실행</h2><p>파라미터의 모든 Promise 인스턴스가 성공 상태이면 then()의 핸들러 함수를 실행합니다.</p><blockquote><p>Promise.all()</p></blockquote><ul><li>파라미터에 이터러블 오브젝트를 작성합니다.<br>이터러블 오브젝트에 작성한 순서로 Promise 인스턴스를 생성합니다.</li></ul><p><mark>생성한 모든 Promise 인스턴스가 성공 상태이면, then()의 첫 번째 파라미터 함수를 실행합니다.<br>Promise 인스턴스가 하나라도 실패한다면, then()의 핸들러 함수를 실행하지 않습니다.</mark></p><p>executer 블록에서 resolve()를 호출한 순서가 아닌 Promise 인스턴스를 생성한 순서로 파라미터 값을 배열에 첨부하여 [[PromiseValue]]에 설정합니다. then()의 첫 번째 파라미터 함수에서 파라미터 값으로 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">function</span> <span class="title">order</span>(<span class="params">mili</span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;  </span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"실행"</span>, mili);  </span><br><span class="line"> resolve(mili);  </span><br><span class="line"> &#125;, mili);  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">Promise</span>.all([order(<span class="number">300</span>), order(<span class="number">200</span>), order(<span class="number">100</span>)])  </span><br><span class="line"> .then(<span class="function">(<span class="params">milis</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"호출"</span>, milis));  </span><br><span class="line"><span class="comment">// 실행 100  </span></span><br><span class="line"><span class="comment">// 실행 200  </span></span><br><span class="line"><span class="comment">// 실행 300  </span></span><br><span class="line"><span class="comment">// 호출 [300, 200, 100]</span></span><br></pre></td></tr></table></figure><ol><li><p>order(mili)가 호출되면 Promise 인스턴스를 생성하면서 setTimeout()을 실행합니다.<br>파라미터로 받은 mili 값을 지연 시간으로 사용합니다. 지연 시간이 경과한 후에 setTimeout의 콜백 함수가 실행됩니다. order()를 여러 번 호출했을 때, 호출한 순서가 아닌 mili 값에 따라 콜백 함수가 실행되므로 실행 순서가 달라질 수 있습니다. 즉, 콜백 함수에서 resolve() 호출 순서가 바뀔 수 있습니다.</p></li><li><p>Promise.all()의 파라미터에 order() 호출을 배열로 작성했습니다.<br>따라서 첫 번째 엘리먼트부터 차례로 order() 함수를 호출하게 됩니다. 호출된 order() 함수에서 setTimeout()을 실행하며, 파라미터로 넘겨준 값을 지연 시간으로 사용합니다.<br>함수 호출에는 시간이 걸리지 않아 (0.1초 안에) 세 개의 order() 300,200,100 순서로 호출됩니다.<br>하지만 setTimeout()의 콜백 함수는 지연 시간으로 인해 100, 200, 300 순서로 실행되게 됩니다.</p></li></ol><p>setTimeout()에서 지연 시간이 경과하면 콜백 함수에서 resolve(mili)를 호출하게 되며<br>then()의 핸들러 함수가 실행됩니다. 이때, Promise.all()은 resolve(mili)를 호출할 때 마다 then()의 핸들러 함수가 실행되지 않습니다. Promise.all()의 파라미터에서 order() 호출로 생성한 Promise 인스턴스가 모두 성공적으로 처리되었을 때 한 번만 호출합니다.<br>Promise.all()에서 order()함수를 총 세 번 호출하지만, 생성된 인스턴스가 모두 성공적으로 처리돼야 then()의 핸들러 함수를 실행하는 것입니다.</p><p>실행 결과 “실행 100”, “실행 200”, “실행 300”은 setTimeout의 콜백 함수가 실행한 출력 값이고,<br>호출 [300, 200, 100]은 then()의 핸들러 함수에서 출력한 값입니다.</p><hr><h2 id="Promise_race">race(): 처음 한 번만 핸들러 호출</h2><p>처음 한 번만 then()의 핸들러 함수를 실행합니다.</p><blockquote><p>Promise.race()</p></blockquote><ul><li>파라미터에 이터러블 오브젝트를 작성합니다. 이터러블 오브젝트에 작성한 순서로 Promise 인스턴스를 생성합니다. 처음 한 번만 Promise 인스턴스 성공과 실패에 따라 then()의 핸들러 함수를 호출하고, 그 다음 부터는 호출하지 않습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">order</span>(<span class="params">mili</span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(mili);  </span><br><span class="line"> resolve(mili);  </span><br><span class="line"> &#125;, mili);  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">Promise</span>.race([order(<span class="number">300</span>), order(<span class="number">200</span>), order(<span class="number">100</span>)])  </span><br><span class="line"> .then(<span class="function">(<span class="params">milis</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"then:"</span>, milis),  </span><br><span class="line"> (error) =&gt; <span class="built_in">console</span>.log(error));  </span><br><span class="line"><span class="comment">// 100  </span></span><br><span class="line"><span class="comment">// then: 100  </span></span><br><span class="line"><span class="comment">// 200  </span></span><br><span class="line"><span class="comment">// 300</span></span><br></pre></td></tr></table></figure><ol><li>Promise.race()에서 order(300), order(200), order(100) 순서로 order() 함수를 호출합니다.<br>하지만 Promise.race()는 처음 한 번만 then()의 핸들러 함수가 실행되므로<br>order(200), order(100)의 핸들러 함수는 실행되지 않습니다.</li></ol>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/14/Promise%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WeakSet 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/04/14/WeakSet%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/04/14/WeakSet%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</guid>
      <pubDate>Mon, 13 Apr 2020 23:55:14 GMT</pubDate>
      <description>
      
        &lt;p&gt;value로 오브젝트만 사용하는 WeakSet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WeakSet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/WeakSet%20오브젝트%20-ECMAScript/#WeakSet&quot;&gt;개요&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/WeakSet%20오브젝트%20-ECMAScript/#newWeakSet&quot;&gt;new WeakSet(): WeakSet 인스턴스 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/WeakSet%20오브젝트%20-ECMAScript/#WeakSet_add&quot;&gt;add(): value 추가&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/WeakSet%20오브젝트%20-ECMAScript/#WeakSet_has&quot;&gt;has(): value 존재 여부&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/14/WeakSet%20오브젝트%20-ECMAScript/#WeakSet_delete&quot;&gt;delete(): 엘리먼트 삭제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>value로 오브젝트만 사용하는 WeakSet</p><ul><li><p>WeakSet</p><ul><li><a href="/2020/04/14/WeakSet%20오브젝트%20-ECMAScript/#WeakSet">개요</a></li><li><a href="/2020/04/14/WeakSet%20오브젝트%20-ECMAScript/#newWeakSet">new WeakSet(): WeakSet 인스턴스 생성</a></li><li><a href="/2020/04/14/WeakSet%20오브젝트%20-ECMAScript/#WeakSet_add">add(): value 추가</a></li><li><a href="/2020/04/14/WeakSet%20오브젝트%20-ECMAScript/#WeakSet_has">has(): value 존재 여부</a></li><li><a href="/2020/04/14/WeakSet%20오브젝트%20-ECMAScript/#WeakSet_delete">delete(): 엘리먼트 삭제</a></li></ul></li></ul><a id="more"></a><hr><h2 id="WeakSet">개요</h2><p>WeakSet 오브젝트는 value로 오브젝트만 사용할 수 있으며, string, number, symbol과 같은 값을 사용할 수 없습니다. key는 사용하지 않습니다.</p><p>WeakMap 인스턴스와 마찬가지로 GC(Garbage Collection)가 발생하면 WeakSet 인스턴스의 value가 삭제됩니다.<br><mark>WeakMap 오브젝트는 key가 기준이고 WeakSet 오브젝트는 value가 기준입니다.</mark></p><hr><h2 id="newWeakSet">new WeakSet(): WeakSet 인스턴스 생성</h2><p>WeakSet 인스턴스를 생성하여 반환합니다.</p><blockquote><p>new WeakSet()</p></blockquote><ul><li>파라미터는 선택으로 이터러블 오브젝트를 작성하고, 그 안에 오브젝트를 지정합니다.<br>지정한 오브젝트가 value에 설정됩니다.</li></ul><figure class="highlight js"><figcaption><span>new WeakSet</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> newString = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"문자열"</span>);  </span><br><span class="line"><span class="keyword">let</span> newNumber = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">12345</span>);  </span><br><span class="line"><span class="keyword">const</span> newWeakSet = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([newString, newNumber]);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">try</span> &#123;  </span><br><span class="line"> <span class="keyword">new</span> <span class="built_in">WeakSet</span>([<span class="string">"ABC"</span>, <span class="number">345</span>]);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"object 이외 지정 불가"</span>);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// object 이외 지정 불가</span></span><br></pre></td></tr></table></figure><ol><li><p>String 인스턴스와 Number 인스턴스를 생성합니다. WeakSet 인스턴스를 생성하면서 파라미터에 이터러블 오브젝트를 작성하고, 그 안에 String 인스턴스와 Number 인스턴스를 지정합니다. 각 인스턴스의 메모리 주소가 WeakSet 인스턴스의 value로 설정됩니다.</p></li><li><p>newWeakSet() 파라미터에 문자열(“ABC”) 또는 숫자(345)를 작성하면 에러가 발생합니다.<br>Object, Function과 같은 오브젝트만 지정할 수 있습니다.</p></li></ol><hr><h2 id="WeakSet_add">add(): value 추가</h2><p>WeakSet 인스턴스에 value 를 추가합니다.</p><blockquote><p>WeakSet.prototype.add()</p></blockquote><p>파라미터에 value로 설정될 오브젝트를 지정합니다. Object, Function과 같은 오브젝트를 지정할 수 있습니다.<br><del>string, number, boolean, null, undefined, symbol을 작성하면 에러가 발생합니다.</del></p><figure class="highlight js"><figcaption><span>add()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newWeakSet = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> newString = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"문자열"</span>);  </span><br><span class="line">newWeakSet.add(newString);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> obj = &#123;<span class="attr">sports</span>: <span class="string">"스포츠"</span>&#125;;  </span><br><span class="line">newWeakSet.add(obj); </span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.  &lt;mark&gt;new String()으로 인스턴스를 생성하여 변수에 할당한 후, add() 파라미터에 지정하면 newWeakSet 인스턴스에 value로 추가됩니다.&lt;/mark&gt; 문자열을 String 인스턴스로 생성하여 지정하였습니다.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.  Object 오브젝트를 생성하여 변수에 할당하고 add() 파라미터에 지정하면 newWeakSet 인스턴스에 value로 추가됩니다.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* * *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;h2 id="WeakSet_has"&gt;has(): value 존재 여부&lt;/h2&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">WeakSet 인스턴스x에서 value 존재 여부를 체크하여 반환합니다.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; WeakSet.prototype.has()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*   파라미터에 WeakSet 인스턴스의 value와 비교할 오브젝트를 지정합니다. 오브젝트가 존재하면 true를 반환하고,  </span></span><br><span class="line"><span class="string">    존재하지 않으면 false를 반환합니다.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js has()</span><br><span class="line"><span class="keyword">let</span> newString = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"문자열"</span>);  </span><br><span class="line"><span class="keyword">const</span> newWeakSet = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([newString]);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(newWeakSet.has(newString));  </span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>has() 파라미터에 지정한 newString 인스턴스가 newWeakSet 인스턴스의 value에 있으므로 true를 반환합니다.</li></ul><hr><h2 id="WeakSet_delete">delete(): 엘리먼트 삭제</h2><p>WeakSet 인스턴스에서 value가 같은 엘리먼트를 삭제합니다.</p><blockquote><p>WeakSet.prototype.delete()</p></blockquote><ul><li>파라미터에 WeakSet 인스턴스에서 삭제할 오브젝트를 지정합니다. 오브젝트가 존재하면 value를 삭제하고 true를 반환합니다. 존재하지 않으면 false를 반환합니다.</li></ul><figure class="highlight js"><figcaption><span>delete()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newString = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"문자열"</span>);  </span><br><span class="line"><span class="keyword">const</span> newWeakSet = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([newString]);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(newWeakSet.delete(newString));  </span><br><span class="line"><span class="built_in">console</span>.log(newWeakSet.has(newString));  </span><br><span class="line"><span class="comment">// true  </span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>new String()으로 인스턴스를 생성하여 newWeakSet 인스턴스에 추가한 상태입니다.<br>delete() 파라미터에 newWeakSet 인스턴스에 존재하는 newString 인스턴스를 지정해 줬으므로 삭제하고 true를 반환합니다. 삭제가 완료되었으므로 has()로 존재 여부를 체크해보면 당연히 false를 반환하게 됩니다.</li></ul>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/14/WeakSet%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Set 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/04/13/Set%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/04/13/Set%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</guid>
      <pubDate>Mon, 13 Apr 2020 01:32:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;Set 오브젝트는 Map 오브젝트와 비슷하지만 [key, value]가 아닌 [value]만 작성하는 점이 다릅니다. Map 오브젝트에 Array 기능을 추가한 오브젝트 입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set 오브젝트&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set&quot;&gt;개요&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#newSet&quot;&gt;new Set(): Set 인스턴스 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_add&quot;&gt;add(): value 추가&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_has&quot;&gt;has(): value 존재 여부&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_entries&quot;&gt;entries(): 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_values&quot;&gt;values(): value 반환 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_keys&quot;&gt;keys(): key 반환 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_forEach&quot;&gt;forEach(): 엘리먼트마다 콜백 함수 호출&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_delete&quot;&gt;delete(): 엘리먼트 삭제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_clear&quot;&gt;clear(): 모든 value 지움&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_Symbol_iterator&quot;&gt;Symbol.iterator: 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Set 오브젝트는 Map 오브젝트와 비슷하지만 [key, value]가 아닌 [value]만 작성하는 점이 다릅니다. Map 오브젝트에 Array 기능을 추가한 오브젝트 입니다.</p><ul><li>Set 오브젝트<ul><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set">개요</a></li><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#newSet">new Set(): Set 인스턴스 생성</a></li><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_add">add(): value 추가</a></li><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_has">has(): value 존재 여부</a></li><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_entries">entries(): 이터레이터 오브젝트 생성</a></li><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_values">values(): value 반환 이터레이터 오브젝트 생성</a></li><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_keys">keys(): key 반환 이터레이터 오브젝트 생성</a></li><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_forEach">forEach(): 엘리먼트마다 콜백 함수 호출</a></li><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_delete">delete(): 엘리먼트 삭제</a></li><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_clear">clear(): 모든 value 지움</a></li><li><a href="/2020/04/13/Set%20오브젝트%20-ECMAScript/#Set_Symbol_iterator">Symbol.iterator: 이터레이터 오브젝트 생성</a></li></ul></li></ul><a id="more"></a><hr><h2 id="Set">개요</h2><p>Set 오브젝트는 Array 오브젝트와 비슷하지만, Array 오브젝트에 없는 특성이 있습니다.<br>Set 오브젝트는 [value1, value2, ···]와 같이 값을 배열로 작성합니다.<br>Set 오브젝트에 추가한 순서로 인덱스를 부여하여 저장합니다. 따라서 추가한 순서대로 읽히는 것을 보장해 줍니다.</p><p>Set 오브젝트는 key 개념을 갖고 있으며 value1, value2가 값이면서 키 역활도 합니다.<br>역활을 하는 것이지 key가 별도로 존재하는 것은 아닙니다.<br>이런 특징으로 인해 value 값이 같으면 나중에 추가한 값이 추가되지 않습니다.<br>이 점이 Array 오브젝트와 다르며 Map 오브젝트와 같습니다.</p><p>[value1, value2]에 string, number, symbol 등의 원시값(프리미티브) 데이터 타입을 작성할 수 있으며, Object, Function과 같은 오브젝트도 작성할 수 있습니다. null 값은 undefined로 취급됩니다.</p><p>Array 오브젝트에서 엘리먼트를 삭제하려면 배열을 반복하면서 값의 일치 여부를 비교해야 합니다.<br>같은 값이 여러 개 있을 수 있으므로 모두 삭제하려면 계속해서 비교하며 삭제가 진행됩니다.<br>반면 Set 오브젝트는 value 값이 같은 것이 없으므로 삭제를 한 번만 실행하면 됩니다.</p><hr><h2 id="newSet">new Set(): Set 인스턴스 생성</h2><p>Set 인스턴스를 생성하여 반환합니다.</p><blockquote><p>new Set()</p></blockquote><ul><li>선택적 파라미터<br>파라미터는 선택으로 이터러블 오브젝트를 작성하고, 그 안에 value를 0개 이상 작성합니다.</li></ul><figure class="highlight js"><figcaption><span>Set()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setObj = <span class="keyword">new</span> <span class="built_in">Set</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">"스포츠"</span>]);  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(newSet.size);  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> newSet)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(element);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// 3  </span></span><br><span class="line"><span class="comment">// 1  </span></span><br><span class="line"><span class="comment">// 2  </span></span><br><span class="line"><span class="comment">// 스포츠</span></span><br></pre></td></tr></table></figure><ul><li>Set( ) 파라미터에 value를 지정하지 않고 인스턴스를 생성할 수 있습니다. 추후에 Set 오브젝트의 메서드를 이용해서 value를 추가해줄 수 있습니다.</li></ul><ol><li><p>Set( ) 파라미터에 이터러블 오브젝트를 작성하고, 그 안에 value를 작성한 형태입니다.<br>Set 인스턴스에 저장할 때 파라미터 값이 key 역활을 하면서 value로 저장됩니다.<br>Set 인스턴스에서 value의 존재 여부를 체크하고 존재하지 않으면 추가, 존재하면 추가하지 않습니다.</p></li><li><p>size 프로퍼티는 Set 인스턴스의 value 수를 반환합니다. Set() 파라미터에 5개의 값을 작성했는데, 실행 결과 3이 출력됩니다. 이는 같은 파라미터값은 뒤에 작성한 값이 추가되지 않기 때문입니다.</p></li><li><p>for-of 문으로 newSet 인스턴스를 반복할 수 있습니다. newSet 인스턴스의 value가 for-of 문의 element에 설정됩니다.</p></li></ol><hr><h2 id="Set_add">add(): value 추가</h2><p>Set 인스턴스 끝에 value 값을 추가합니다.</p><blockquote><p>Set.prototype.add()</p></blockquote><p>파라미터에 Set 인스턴스에 추가할 String, 오브젝트 등의 value를 지정합니다. 값을 추가 한 후 Set 인스턴스를 반환합니다. 따라서 메서드 체인 방법으로 Set 인스턴스의 메서드를 호출할 수 있습니다.</p><figure class="highlight js"><figcaption><span>add()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>();  </span><br><span class="line">newSet.add(<span class="string">"축구"</span>).add(<span class="string">"농구"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> newSet.add(<span class="string">"축구"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> newSet) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(element);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// 축구  </span></span><br><span class="line"><span class="comment">// 농구</span></span><br></pre></td></tr></table></figure><ol><li><p>Set 인스턴스를 생성하여 newSet에 할당합니다. add() 파라미터에 “축구”를 지정하여 실행하면, Set 인스턴스에 “축구”가 추가되며 인덱스 값은 0 입니다. add()를 실행한 후 newSet 인스턴스를 반환하므로 add()를 연결하여 호출할 수 있습니다. “농구”가 추가되고 인덱스 값은 1 입니다.</p></li><li><p>add() 파라미터에 지정한 “축구”가 Set 인스턴스에 존재하므로 “축구”가 추가되지 않습니다.</p></li><li><p>for-of 문으로 newSet 인스턴스를 반복하면, newSet 인스턴스의 value가 for-of 문의 element에 설정됩니다.<br>newSet 인스턴스에 추가된 순서대로 전개됩니다.</p></li></ol><hr><h2 id="Set_has">has(): value 존재 여부</h2><p>Set 인스턴스에서 value의 존재 여부를 반환합니다.</p><blockquote><p>Set.prototype.has()</p></blockquote><p>파라미터에 존재 여부를 체크할 값을 지정합니다. Set 인스턴스에 값이 존재하면 true, 아니면 false를 반환합니다.</p><figure class="highlight js"><figcaption><span>has()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>();  </span><br><span class="line">newSet.add(<span class="string">"sports"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(newSet.has(<span class="string">"sports"</span>));  </span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>Set 인스턴스를 생성하여 newSet 변수에 할당했습니다. add()를 실행하면 파라미터에 지정한 “sports”가 newSet 인스턴스에 추가됩니다. newSet 인스턴스에 has() 파라미터에 지정한 “sports”가 존재합니다. true를 반환합니다.</li></ul><hr><h2 id="Set_entries">entries(): 이터레이터 오브젝트 생성</h2><p>이터레이터 오브젝트를 생성하여 반환합니다.</p><blockquote><p>Set.prototype.entries()</p></blockquote><p>생성한 이터레이터 오브젝트의 next()를 호출하면 Set 인스턴스에 작성된 순서로 [key, value]를 반환합니다.<br>Set 인스턴스에 key를 저장하지 않지만 value를 key에 설정하여 반환합니다.</p><figure class="highlight js"><figcaption><span>entries()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"one"</span>, () =&gt; &#123;&#125;]);  </span><br><span class="line"><span class="keyword">let</span> iteratorObj = newSet.entries();  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: Array[2], done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: Array[2], done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>두 개의 value를 가진 Set 인스턴스를 생성합니다. 하나는 “one”이고 또 하나는 function(){}입니다. entries()를 호출하면 이터레이터 오브젝트를 생성하여 반환합니다.</p></li><li><p>첫 번째 value인 “one”을 반환하며 실행 결과에 {value: Array[2], done: false}가 출력됩니다.<br>value를 반환하므로 {value: “one”, done: false} 형태로 반환되어야 하지만, value를 key에 설정하여 반환하므로 {value: Array[2]} 형태가 됩니다. Array[2]를 펼치면 0:”one”, 1:”one”이 표시됩니다.</p></li><li><p>마찬가지로 value인 function(){}을 반환하며 {value: Array[2], done: false} 형태입니다.<br>Array[2]를 펼치면 0: function(){}, 1: function(){}이 표시됩니다.</p></li></ol><hr><h2 id="Set_values">values(): value 반환 이터레이터 오브젝트 생성</h2><p>value 값을 반환하는 이터레이터 오브젝트를 생성하여 반환합니다.</p><blockquote><p>Set.prototype.value</p></blockquote><p>생성한 이터레이터 오브젝트의 next()를 호출하면 Set 인스턴스에 작성된 순서로 value를 반환합니다.</p><figure class="highlight js"><figcaption><span>values()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"one"</span>, () =&gt; &#123;&#125;]);  </span><br><span class="line"><span class="keyword">let</span> iteratorObj = newSet.values();  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: "one", done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: function, done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>두 개의 value를 가진 Set 인스턴스를 생성합니다. 하나는 “one” 또 하나는 function(){}입니다.<br>인스턴스의 values()를 호출하면 value를 반환하는 이터레이터 오브젝트를 생성하여 반환합니다.</p></li><li><p>첫 번째 value인 “one”이 대상이며 {value: “one”, done: false}를 반환합니다.<br>etntries() 메서드가 {value: Array[2]}를 반환하는 것과 차이점 입니다.</p></li><li><p>두 번째 value인 function(){}이 대상이며 {value: function(){}, done: false}를 반환합니다.</p></li></ol><hr><h2 id="Set_keys">keys(): key 반환 이터레이터 오브젝트 생성</h2><p>key 값을 반환하는 이터레이터 오브젝트를 생성하여 반환합니다.</p><blockquote><p>Set.prototype.keys()</p></blockquote><p>생성한 이터레이터 오브젝트의 next()를 호출하면 Set 인스턴스에 작성된 순서로 key 값을 반환합니다.<br>Set 인스턴스에 value만 설정되므로 value를 key로 하여 반환합니다.<br>그다지 의미가 없지만 같은 이름의 Map 인스턴스 메서드와 반환 구조를 맞추기 위한 것으로 생각됩니다.</p><figure class="highlight js"><figcaption><span>keys()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"one"</span>, () =&gt; &#123;&#125;]);  </span><br><span class="line"><span class="keyword">let</span> iteratorObj = newSet.keys();  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: "one", done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: function()&#123;&#125;, done: false&#125;</span></span><br></pre></td></tr></table></figure><ul><li>앞의 예제들과 주어진 값은 같습니다.<br>keys()를 호출하면 value를 key로 하여 반환하는 이터레이터 오브젝트를 생성하여 반환합니다.<br><mark>반환되는 프로퍼티 이름이 key가 아닌 value입니다.</mark></li></ul><hr><h2 id="Set_forEach">forEach(): 엘리먼트마다 콜백 함수 호출</h2><p>Set 인스턴스에 작성된 순서로 반복하면서 콜백 함수를 호출합니다.</p><blockquote><p>Set.prototype.forEach()</p></blockquote><ul><li>파라미터<br>Function (반복할 때 마다 호출할 callback 함수)<br>Object (선택) callback 함수에서 this로 참조할 오브젝트</li></ul><p>forEach()를 호출할 때마다 세 개의 파라미터를 넘겨줍니다.<br>첫 번째 파라미터가 value이고 두 번째 파라미터가 key입니다. 세 번째 파라미터는 실행 중인 Set 인스턴스 입니다.<br><mark>value 값과 key 값이 같습니다.</mark></p><figure class="highlight js"><figcaption><span>forEach()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"one"</span>, <span class="string">"two"</span>]);  </span><br><span class="line">  </span><br><span class="line">newSet.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key, obj</span>) </span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(value, <span class="keyword">this</span>.member);  </span><br><span class="line">&#125;, &#123;<span class="attr">member</span>: <span class="number">10</span>&#125;);  </span><br><span class="line"><span class="comment">// one : 10  </span></span><br><span class="line"><span class="comment">// two : 10</span></span><br></pre></td></tr></table></figure><ul><li>forEach()를 처음 호출하면 콜백 함수의 value 와 key 파라미터에 “one”이 설정되고 obj 파라미터에 newSet 인스턴스가 설정됩니다. 콜백 함수에서 this로 forEach() 두 번째 파라미터에 지정한 Object 오브젝트를 참조합니다.</li></ul><p><mark>화살표 함수로 콜백 함수를 작성하면 콜백 함수 블록에서 this가 window 오브젝트를 참조하므로 이 코드와 같이 function 키워드로 작성해야 합니다.</mark></p><hr><h2 id="Set_delete">delete(): 엘리먼트 삭제</h2><p>Set 인스턴스에서 value 값이 같은 엘리먼트를 삭제합니다.</p><blockquote><p>Set.prototype.delete()</p></blockquote><ul><li><p>파라미터<br>삭제할 value</p></li><li><p>반환 값<br>삭제 성공시 true, 아니면 false 반환</p></li></ul><figure class="highlight js"><figcaption><span>delete()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"one"</span>]);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(newSet.delete(<span class="string">"one"</span>));  </span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>newSet 인스턴스에서 delete() 파라미터에 지정한 “one” 과 같은 value가 있으면 엘리먼트를 삭제합니다.<br>삭제되므로 true를 반환합니다.</li></ul><hr><h2 id="Set_clear">clear(): 모든 value 지움</h2><p>Set 인스턴스의 모든 value()를 지웁니다.</p><blockquote><p>Set.prototype.clear()</p></blockquote><figure class="highlight js"><figcaption><span>clear()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"one"</span>, <span class="string">"two"</span>]);  </span><br><span class="line">newSet.clear();  </span><br><span class="line"><span class="built_in">console</span>.log(newSet.size);  </span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li>clear()를 실행하면 newSet 인스턴스에서 엘리먼트를 모두 지우므로 size 프로퍼티 값이 0으로 출력됩니다. 인스턴스 자체를 지우는 것이 아니라 엘리먼트를 모두 지우는 것 이므로 다시 value를 추가해줄 수 있습니다.</li></ul><hr><h2 id="Set_Symbol_iterator">Symbol.iterator: 이터레이터 오브젝트 생성</h2><p>이터레이터 오브젝트를 생성하여 반환합니다.</p><blockquote><p>Set.prototype[Symbol.iterator]</p></blockquote><p>생성한 이터레이터 오브젝트의 next()를 호출하면, Set 인스턴스에 작성된 순서로 value를 반환합니다.</p><figure class="highlight js"><figcaption><span>Symbol.iterator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">const</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="string">"스포츠"</span>]);  </span><br><span class="line"><span class="keyword">let</span> iteratorObj = newSet[<span class="built_in">Symbol</span>.iterator]();  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: 1, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: "스포츠", done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>newSet 인스턴스를 생성하고 [1, “스포츠”]를 할당합니다.<br>newSet 인스턴스의 [Symbol.iterator] ()를 호출하면 이터레이터 오브젝트를 생성하여 반환합니다.</p></li><li><p>next()를 호출할 때마다 newSet 인스턴스의 value값을 {value: 1, done: false} 형태의 value에 설정하여 반환합니다.</p></li></ol>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/13/Set%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WeakMap 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/04/13/WeakMap%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/04/13/WeakMap%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</guid>
      <pubDate>Sun, 12 Apr 2020 23:22:25 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;WeakMap 오브젝트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#WeakMap&quot;&gt;개요&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;GC(Garbage Collection)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#newWeakMap&quot;&gt;new WeakMap 인스턴스 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#WeakMap_set&quot;&gt;set(): key, value 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#WeakMap_get&quot;&gt;get(): key가 같은 value 반환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#WeakMap_has&quot;&gt;has(): key 존재 여부&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#WeakMap_delete&quot;&gt;delete(): 엘리먼트 삭제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li><p>WeakMap 오브젝트</p><ul><li><a href="/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#WeakMap">개요</a><ul><li>GC(Garbage Collection)</li></ul></li><li><a href="/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#newWeakMap">new WeakMap 인스턴스 생성</a></li><li><a href="/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#WeakMap_set">set(): key, value 설정</a></li><li><a href="/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#WeakMap_get">get(): key가 같은 value 반환</a></li><li><a href="/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#WeakMap_has">has(): key 존재 여부</a></li><li><a href="/2020/04/13/WeakMap%20오브젝트%20-ECMAScript/#WeakMap_delete">delete(): 엘리먼트 삭제</a></li></ul></li></ul><a id="more"></a><hr><h2 id="WeakMap">개요</h2><p><code>WeakMap</code>는 약한(weak) Map 오브젝트 입니다.<br><code>Map</code> 오브젝트와 작성 방법과 형태는 같지만, 약한 점이 있습니다.</p><ul><li><p><code>WeakMap</code> 오브젝트는 <code>key</code>에 <code>Object</code>만 작성할 수 있으며 <code>string</code>, <code>numbers</code>, <code>symbol</code> 등의 (원시 데이터형)은 허용되지 않습니다.</p></li><li><p><code>value</code>는 타입에 제한이 없습니다.</p></li><li><p><code>key</code>에 오브젝트만 지정할 수 있는 것이 중요하며, 그 이유를 이해하는 것이 <code>WeakMap</code> 오브젝트의 사용 핵심입니다.</p><ul><li>ex) let music = {title: “음악”} 코드를 실행하면 music 변수에 Object 오브젝트를 생성하여 할당합니다.<br>다시 music 변수에 {singer: “가수”}를 할당하면 {title: “음악”}을 사용할 수 없게 됩니다.<br>당연한 예시지만, 이로 인해 발생하는 문제를 해결하기 위한 것이 WeakMap 오브젝트의 목적입니다.</li></ul></li></ul><h3 id="GC-Garbage-Collection"><a href="#GC-Garbage-Collection" class="headerlink" title="GC(Garbage Collection)"></a>GC(Garbage Collection)</h3><figure class="highlight js"><figcaption><span>GC</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> music = &#123;<span class="attr">title</span>: <span class="string">"음악"</span>&#125;;  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> music = &#123;<span class="attr">singer</span>: <span class="string">"가수"</span>&#125;;</span><br></pre></td></tr></table></figure><ol><li><p>생성된 <code>Object 오브젝트</code>가 메모리에 설정되며, 메모리 주소가 <code>music 변수</code>에 할당됩니다.<br><code>music</code>을 전개하면 <code>{title: “음악”}</code>이 전개됩니다.<br><code>music</code>을 전개하다는 것은 <code>music</code> 변수에 <code>설정된 메모리 주소의 오브젝트</code>를 전개하는 것입니다.</p></li><li><p><code>music = {singer: “가수”}</code>도 <code>Object 오브젝트</code>를 생성하여 메모리에 설정합니다. 생성한 Object 오브젝트를 <code>music 변수</code>에 할당하므로 <code>music 변수의 메모리 주소</code>가 바뀌게 됩니다.<br>즉, <code>{title: “음악”}</code>을 사용할 수 없게 됩니다.</p></li></ol><p><strong>이때 엔진은 사용하지 않는 {title: “음악”}을 메모리에서 지웁니다.</strong><br><mark>이를 GC(Garbage Collection)라고 하고, GC를 수행하는 것을 Garbage Collector라고 합니다.<br>GC를 하지 않으면 사용하지 않는 메모리가 쌓이게 됩니다. 즉 메모리 릭(Memory Leak)이 발생합니다.</mark></p><p><code>GC</code>가 사용하지 않게 된 오브젝트를 메모리에서 지우면, <code>WeakMap</code> 인스턴스의 <code>key</code>에서 오브젝트를 참조할 수 없게됩니다. 메모리에 존재하지 않는 오브젝트를 참조하는 것은 문제가 됩니다. 이때, 엔진이 <code>WeakMap</code> 인스턴스의 <code>key</code> 와 <code>value</code>를 삭제합니다. 개발자 코드로 삭제하지 않아도 됩니다. 이런 점을 반영한 것이 <code>WeakMap</code> 오브젝트입니다.</p><p><code>WeakMap</code> 오브젝트에서 제공하는 메서드는 간단합니다.<br><code>set()</code>, <code>get()</code>, <code>has()</code>, <code>delete()</code>만 있습니다. <code>WeakMap</code> 인스턴스에 <code>[key, value]</code>를 <code>CRUD</code>(Create, Read, Update, Delete)하기 위한 기본적인 메서드만 있습니다.<br><code>WeakMap</code> 인스턴스는 열거할 수 없습니다. 그러므로 <code>forEach(), entries()</code> 메서드가 없습니다.</p><p><code>Map</code> 오브젝트는 <code>size</code> 프로퍼티가 있어 현재의 <code>[key, value]</code> 수를 알 수 있으나, <code>WeakMap</code> 오브젝트는 <code>size</code> 프로퍼티가 없어서 현재의 <code>[key, value]</code> 수를 알 수 없습니다. <code>length</code> 프로퍼티도 <del>개발자 도구에서는 표시되나</del> 실제로 사용하면 <code>undefined</code>를 반환합니다.</p><hr><h2 id="newWeakMap">new WeakMap 인스턴스 생성</h2><p><strong><code>WeakMap</code> 인스턴스를 생성하여 반환합니다.</strong></p><blockquote><p>new WeakMap()</p></blockquote><ul><li><p>선택적 파라미터<br>Object, 이터러블 오브젝트안에 작성 [key, value] 형태</p></li><li><p>반환<br>생성한 WeakMap 인스턴스</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emptyWeakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;  </span><br><span class="line"><span class="keyword">const</span> newWeakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>([  </span><br><span class="line"> [obj, <span class="string">"오브젝트"</span>]  </span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li><p><code>WeakMap()</code>에 파라미터를 작성하지 않아도 <code>WeakMap</code> 인스턴스를 생성할 수 있습니다.<br>이는 상황에 따라 엘리먼트를 추가하려는 의도입니다.</p></li><li><p><code>WeakMap()</code> 파라미터에 이터러블 오브젝트를 작성하고 그 안에 <code>[key, value]</code> 형태로 작성합니다.<br><code>key</code>에 오브젝트 이름을 지정하고 <code>value</code>에 값을 작성합니다. <code>key</code>인 오브젝트 자체에 프로퍼티가 있으므로 <code>value</code>는 오브젝트에 대한 <code>주석(설명)</code>이라고 볼 수 있습니다.</p></li></ul><hr><h2 id="WeakMap_set">set(): key, value 설정</h2><p><strong><code>WeakMap</code> 인스턴스에 <code>key</code> 와 <code>value</code>를 설정합니다.</strong></p><blockquote><p>WeakMap.prototype.set()</p></blockquote><ul><li><p>파라미터</p><ul><li>Object (key, Object/Function 등의 오브젝트)</li><li>any (value)</li></ul></li><li><p>반환<br>key, value가 추가된 WeakMap 인스턴스</p></li></ul><p>첫 번째 파라미터에 <code>key</code>로 설정될 <code>Object, Function</code>과 같은 오브젝트를 지정합니다.<br><code>string</code>, <code>numbers</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>symbol</code>을 지정하면 에러가 발생합니다.<br>두 번째 파라미터에 임의의 값을 작성합니다.</p><figure class="highlight js"><figcaption><span>set-1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;  </span><br><span class="line"><span class="keyword">debugger</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> newWeakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();  </span><br><span class="line"><span class="number">1.</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">var</span> obj = &#123;<span class="attr">item</span>: <span class="string">"weakmap"</span>&#125;;  </span><br><span class="line"> newWeakMap.set(obj, <span class="string">"GC"</span>);  </span><br><span class="line">&#125;());  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>();  </span><br><span class="line"><span class="number">2.</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">var</span> obj = &#123;<span class="attr">item</span>: <span class="string">"map"</span>&#125;;  </span><br><span class="line"> newMap.set(obj, <span class="string">"Keep"</span>);  </span><br><span class="line">&#125;());  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"> <span class="number">4.</span> <span class="built_in">console</span>.log(<span class="string">"1:"</span>, newWeakMap);  </span><br><span class="line"> <span class="number">5</span> .console.log(<span class="string">"2:"</span>, newMap);  </span><br><span class="line">&#125;, <span class="number">1000</span>);  </span><br><span class="line"><span class="comment">// 1: WeakMap &#123;Object &#123;item: "weakmap"&#125; =&gt; "GC"&#125;  </span></span><br><span class="line"><span class="comment">// 2: Map &#123;Object &#123;item: "map"&#125; =&gt; "keep"&#125;</span></span><br></pre></td></tr></table></figure><ul><li>위 코드는 상황에 따라 실행 결과가 다르게 출력될 수 있습니다.<br>개발자 도구에서 <code>Sources</code>로 들어가 <code>.js파일</code>을 선택해 소스 코드를 화면에 표시하고<br>F5를 눌러 새로고침 합니다. 소스 코드 두 번째 줄에 <code>debugger</code>를 작성했으므로 이 앞에서 멈추게 됩니다.<br><code>debugger</code>로 멈춘 시점에서 한 줄씩 소스 코드를 이동하면, 실행 결과의 1번 형태로 출력되지 않고, <code>“WeakMap {}”</code> 형태가 출력될 수 있습니다. 이는 소스 코드를 한 줄씩 따라 가는 동안 <code>GC</code>가 실행되어 <code>WeakMap</code> 인스턴스의 <code>[key, value]</code>를 삭제하기 때문입니다.</li></ul><ol><li><p><code>(function(){코드});</code> 형태는 자동으로 함수가 실행됩니다. 함수를 저장하지 않고 한 번만 사용하려는 것이 목적입니다. 함수 실행이 끝나 함수를 빠져나오면 함수에서 선언한 변수가 저장되지 않으므로 다시 사용할 수 없습니다. 이렇게 사용하지 않게 된 것을 <code>Garbage Collector</code>가 메모리에서 삭제합니다.<br><code>newWeakMap.set(obj, “GC”)</code>을 실행하면, <code>obj</code> 오브젝트를 참조하는 메모리 주소가 <code>newWeakMap</code> 인스턴스의 <code>key</code>에 설정됩니다. 함수 실행이 끝나 함수를 빠져나오면 함수블록의 <code>obj</code> 변수가 메모리에서 삭제됩니다. 따라서 <code>newWeakMap</code> 인스턴스의 <code>key</code>에서 <code>obj</code> 오브젝트를 참조할 수 없게 됩니다.<br>이때, <code>obj</code> 변수에서 참조하는 <code>{item: “weakmap”}</code>이 메모리에서 지워지면 <code>newWeakMap</code> 인스턴스의 <code>[key, value]</code>를 삭제합니다. 이것이 <code>WeakMap</code> 오브젝트의 목적입니다.</p></li><li><p>위의 1번 코드와 같은 형식이며 <code>WeakMap</code>이 아닌 <code>Map</code>을 사용한 것이 다릅니다.<br>함수를 빠져나오면 <code>obj</code> 오브젝트를 참조하는 <code>Map</code> 인스턴스 <code>[key, value]</code>를 삭제하지 않고 유지합니다.<br>이점이 <code>WeakMap</code> 과 <code>Map</code>의 차이입니다.</p></li><li><p>1초 후에 <code>setTimeout</code> 콜백 함수를 실행하게 됩니다. 1초 간격을 둔 것은 <code>GC</code>의 실행 여부에 따른 상태를 출력하기 위해서 입니다.</p></li><li><p><code>console.log()</code>로 <code>newWeakMap</code>을 찍으면 두 가지 형태로 출력될 수 있습니다.<br><code>newWeakMap</code> 인스턴스의 <code>key</code>로 등록한 오브젝트가 메모리에서 삭제되면 <code>newWeakMap</code> 인스턴스의 <code>[key, value]</code>가 삭제되므로 빈 Object 오브젝트 {}가 출력됩니다. 메모리에서 삭제되지 않은 상태라면, <code>newWeakMap</code> 인스턴스에 <code>[key, value]</code>가 남아 있으므로 <code>1: WeakMap {Object {item: “weakmap”} =&gt; “GC”}</code> 형태로 출력됩니다.</p></li><li><p><code>newMap</code> 인스턴스는 <code>GC</code>의 영향을 받지 않으므로 항상 <code>Map {Object {item: “map”} =&gt; “keep”}</code> 형태로 출력됩니다.</p></li></ol><figure class="highlight js"><figcaption><span>set-2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newWeakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> sportsObj = &#123;&#125;;  </span><br><span class="line">newWeakMap.set(sportsObj, <span class="string">"Object-1"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> sportsObj = &#123;&#125;;  </span><br><span class="line"><span class="number">3.</span> newWeakMap.set(sportsObj, <span class="string">"Object-2"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(newWeakMap);  </span><br><span class="line">&#125;, <span class="number">1000</span>);  </span><br><span class="line"><span class="comment">// WeakMap &#123;Object &#123; &#125; =&gt; "Object-2"&#125; 또는  </span></span><br><span class="line"><span class="comment">// WeakMap &#123;Object &#123; &#125; =&gt; "Object-2"&#125;, WeakMap &#123;Object &#123; &#125; =&gt; "Object-1"&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p><code>sportsObj</code> 변수에 <code>Object</code> 오브젝트를 생성하여 할당하고, <code>set( )</code>의 첫 번째 파라미터에 <code>sportsObj</code>를 지정하여 추가합니다.</p></li><li><p>새로운 <code>Object</code> 오브젝트를 생성하여 <code>sportsObj</code> 변수에 할당하므로 <code>sportsObj</code>가 참조하는 <code>메모리 주소</code>가 변경됩니다. <code>newWeakMap</code> 인스턴스에 <code>key</code>로 설정된 <code>sportsObj</code>가 참조하는 <code>Object</code> 오브젝트는 <code>GC</code> 대상이 됩니다.</p></li><li><p><code>set( )</code>의 첫 번째 파라미터에 <code>sportsObj</code>를 지정하여 설정합니다. <code>newWeakMap</code> 인스턴스에 <code>sportsObj</code>가 있지만, <code>sportsObj</code>가 참조하는 메모리 주소가 다르므로 추가됩니다. 따라서 <code>newWeakMap</code> 인스턴스에는 <code>sportsObj</code>가 참조하는 <code>Object</code> 오브젝트가 두 개 존재하게 됩니다. 개발자 도구에서 소스 코드에 중단점(<code>Break Point</code>)를 걸어 <code>newWeakMap</code> 인스턴스를 펼치면 두 개의 <code>Object</code> 오브젝트가 표시됩니다.</p></li></ol><figure class="highlight js"><figcaption><span>set-3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newWeakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;  </span><br><span class="line">newWeakMap.set(fn, <span class="string">"함수"</span>);  </span><br><span class="line">  </span><br><span class="line">newWeakMap.set(fn, <span class="string">"value 변경"</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(newWeakMap);  </span><br><span class="line"><span class="comment">// WeakMap &#123;function =&gt; "value 변경"&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>function</code> 오브젝트를 생성하여 <code>변수 fn</code>에 할당한 후, <code>set()</code>에서 <code>key</code>로 지정하여 <code>newWeakMap</code>에 추가합니다.<br><code>function</code> 오브젝트도 오브젝트이므로 <code>WeakMap</code> 인스턴스에 설정할 수 있습니다.</p></li><li><p><code>set( )</code>의 첫 번째 파라미터에 <code>fn</code>을 지정하여 <code>newWeakMap</code> 인스턴스에 설정합니다. <code>fn</code>이 참조하는 <code>메모리 주소</code>가 같으므로 추가하지 않고 두 번째 파라미터 값으로 <code>value</code>를 변경합니다. <code>newWeakMap</code> 인스턴스에 <code>[key, value]</code>가 하나만 존재합니다.</p></li></ul><hr><h2 id="WeakMap_get">get(): key가 같은 value 반환</h2><p><strong><code>WeakMap</code> 인스턴스에서 지정한 <code>key</code>의 <code>value</code>를 반환합니다.</strong></p><blockquote><p>WeakMap.prototype.get()</p></blockquote><ul><li><p>파라미터<br>WeakMap 인스턴스의 key와 비교할 오브젝트를 지정합니다.</p></li><li><p>반환 값<br>key가 존재하면 value를 반환하고, 존재하지 않으면 undefined를 반환합니다.</p></li></ul><figure class="highlight js"><figcaption><span>get()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newWeakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;  </span><br><span class="line">newWeakMap.set(obj, <span class="string">"오브젝트"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(newWeakMap.get(obj));  </span><br><span class="line"><span class="comment">// 오브젝트</span></span><br></pre></td></tr></table></figure><ul><li><code>obj</code> 변수에 Object 오브젝트를 생성하여 할당하고, 이를 <code>key</code>로 하여 <code>newWeakMap</code> 인스턴스에 추가합니다. <code>value</code> 값은 “오브젝트”입니다.<br><code>get()</code> 파라미터에 오브젝트를 지정합니다. <code>newWeakMap</code> 인스턴스에 파라미터로 지정한 <code>obj</code> 오브젝트가 존재하므로 <code>[key, value]</code>에서 <code>value</code>를 반환합니다.</li></ul><hr><h2 id="WeakMap_has">has(): key 존재 여부</h2><p><strong><code>WeakMap</code> 인스턴스에서 <code>key</code> 존재 여부를 반환합니다. <code>true/false</code></strong></p><blockquote><p>WeakMap.prototype.has()</p></blockquote><p>파라미터에 WeakMap 인스턴스의 key와 비교할 오브젝트를 지정합니다. 오브젝트가 존재하면 <code>true</code>, 아니면 <code>false</code>를 반환합니다.</p><figure class="highlight js"><figcaption><span>has()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newWeakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;  </span><br><span class="line">newWeakMap.set(obj, <span class="string">"오브젝트"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(newWeakMap.has(obj));  </span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>Object 오브젝트를 생성하여 obj 변수에 할당하고, 이를 key로 하여 newWeakMap 인스턴스에 설정합니다. value값은 “오브젝트”입니다.<br>newWeakMap 인스턴스에 has()파라미터에 지정한 obj 오브젝트가 존재하므로 true가 출력됩니다.</li></ul><hr><h2 id="WeakMap_delete">delete(): 엘리먼트 삭제</h2><p><strong><code>WeakMap</code> 인스턴스에서 <code>key</code>가 같은 엘리먼트를 삭제합니다.</strong></p><blockquote><p>WeakMap.prototype.delete()</p></blockquote><p>파라미터의 WeakMap 인스턴스의 key와 비교할 오브젝트를 지정합니다. <code>key</code>가 존재하면 <code>[key, value]</code>를 삭제하고 <code>true</code>를 반환합니다. 존재하지 않으면 <code>false</code>를 반환합니다.</p><figure class="highlight js"><figcaption><span>delete()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newWeakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;  </span><br><span class="line">newWeakMap.set(obj, <span class="string">"오브젝트"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(newWeakMap.delete(obj));  </span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>Object</code> 오브젝트를 생성하여 <code>obj</code> 변수에 할당하고, 이를 <code>key</code>로 하여 <code>newWeakMap</code>에 추가한 상태에서 위 코드를 실행합니다. <code>delete()</code> 파라미터에 <code>key</code>로 등록된 <code>obj</code> 오브젝트를 지정했으므로 <code>[key, value]</code>가 삭제됩니다. 또한, 삭제에 성공했으므로 true를 반환합니다. <code>newWeakMap</code> 인스턴스에서 삭제하는 것이지 <code>obj</code>에서 참조하는 메모리의 <code>Object 오브젝트{}</code>가 삭제되는 것은 아닙니다.</p>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/13/WeakMap%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Map 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/04/10/Map%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScriprt/</link>
      <guid>https://hdw0903.github.io/2020/04/10/Map%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScriprt/</guid>
      <pubDate>Fri, 10 Apr 2020 00:48:25 GMT</pubDate>
      <description>
      
        &lt;p&gt;Map 오브젝트는 Object 오브젝트와 비슷하지만,&lt;br&gt;다양한 타입을 프로퍼티 키로 사용할 수 있는 점이 다릅니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map 오브젝트&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#MapObjcet&quot;&gt;개요&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#new_Map&quot;&gt;new Map(): Map 인스턴스 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_set&quot;&gt;set(): key와 value 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_get&quot;&gt;get(): key가 같은 value 반환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_has&quot;&gt;has(): key 존재 여부&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_entries&quot;&gt;entries(): 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_keys&quot;&gt;keys(): key 반환 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_values&quot;&gt;values(): value 반환 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_forEach&quot;&gt;forEach(): 엘리먼트마다 콜백 함수 호출&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_delete&quot;&gt;delete(): 엘리먼트 삭제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_clear&quot;&gt;clear(): 모든 key,value 지움&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_Symbol_iterator&quot;&gt;Symbol.iterator(): 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Map 오브젝트는 Object 오브젝트와 비슷하지만,<br>다양한 타입을 프로퍼티 키로 사용할 수 있는 점이 다릅니다.</p><ul><li>Map 오브젝트<ul><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#MapObjcet">개요</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#new_Map">new Map(): Map 인스턴스 생성</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_set">set(): key와 value 설정</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_get">get(): key가 같은 value 반환</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_has">has(): key 존재 여부</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_entries">entries(): 이터레이터 오브젝트 생성</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_keys">keys(): key 반환 이터레이터 오브젝트 생성</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_values">values(): value 반환 이터레이터 오브젝트 생성</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_forEach">forEach(): 엘리먼트마다 콜백 함수 호출</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_delete">delete(): 엘리먼트 삭제</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_clear">clear(): 모든 key,value 지움</a></li><li><a href="/2020/04/10/Map%20오브젝트%20-ECMAScriprt/#Map_Symbol_iterator">Symbol.iterator(): 이터레이터 오브젝트 생성</a></li></ul></li></ul><a id="more"></a><hr><h2 id="MapObjcet">개요</h2><p>Map 오브젝트는 key와 value로 구성됩니다. key, value<br>Object 오브젝트의 key 타입은 String 또는 Symbol이지만<br>Map 오브젝트는 아무 객체와 원시값(Object,Function 등등)이라도 key 와 value로 사용할 수 있습니다.<br>key 와 value 값을 저장하며 각 쌍의 삽입 순서도 기억합니다.</p><p>Map 오브젝트는 key, value로 구성되지만 {key: value}형태로 작성하지 않고,<br>[“key”, “value”]와 같이 이터러블 형태로 작성합니다.</p><p><mark>key에 다양한 타입을 작성할 수 있는 것과 이러터블 형태로 작성하는 것이<br>Map 오브젝트와 Object 오브젝트의 차이입니다.</mark></p><p>Map 오브젝트는 key 값이 같으면 추가하지 않고 value 값이 대체되며 추가한 순서대로 읽습니다.</p><ul><li>참고 용도 : Map 과 Object 차이 정리</li></ul><table><thead><tr><th>(●’◡’●)</th><th>Map</th><th>Object</th></tr></thead><tbody><tr><td>의도치 않은 key</td><td>Map은 명시적으로 제공한 키 외에는 어떤 키도 가지지 않습니다.</td><td>Object는 프로토타입을 가지므로 기본 키가 존재할 수 있습니다. 주의하지 않으면 직접 제공한 키와 충돌할 수도 있습니다. * 참고: ES5부터, 프로토타입으로 인한 키 충돌은 Object.create(null)로 해결할 수 있지만, 실제로 쓰이는 경우는 적습니다.</td></tr><tr><td>key 타입</td><td>Map의 key는 함수, 객체 등을 포함한 모든 값이 가능합니다.</td><td>Object의 키는 반드시 String 또는 Symbol이어야 합니다.</td></tr><tr><td>key 정렬</td><td>Map의 키는 정렬됩니다. 따라서 Map의 이터레이션은 삽입순으로 이뤄집니다.</td><td>Object의 키는 정렬되지 않습니다. * 참고: ECMAScript 2015 이후로, 객체도 문자열과 Symbol 키의 생성 순서를 유지합니다. ECMEScript 2015 명세를 준수하는 JavaScript 엔진에서 문자열 키만 가진 객체를 순회하면 삽입 순을 따라갑니다.</td></tr><tr><td>크기</td><td>Map의 항목 수는 size 속성을 통해 쉽게 알아낼 수 있습니다.</td><td>Object의 항목 수는 직접 알아내야 합니다.</td></tr><tr><td>이터러블</td><td>Map은 이터러블이므로, 바로 이터레이션할 수 있습니다.</td><td>Object를 순회하려면 먼저 모든 키를 알아낸 후, 그 키의 배열을 순회해야 합니다.</td></tr><tr><td>성능</td><td>잦은 키-값 쌍의 추가와 제거에서 더 좋은 성능을 보입니다.</td><td>키-값 쌍의 빈번한 추가 및 제거에 최적화되지 않았습니다.</td></tr></tbody></table><ul><li>Map 오브젝트가 편리하고 유용성이 높습니다. 그러나 모든 상황에 해당하지는 않습니다.<br>Map 오브젝트는 컬렉션에서 효율이 높습니다. key, value 형태이고 이터러블일 때는 Map 오브젝트를 사용하고<br>값과 함수가 혼합된 형태면 Object 오브젝트를 사용하는 것이 좋습니다.</li></ul><hr><h2 id="new_Map">new Map(): Map 인스턴스 생성</h2><p>Map 인스턴스를 생성하여 반환합니다.</p><blockquote><p>new Map([iterable])</p></blockquote><ul><li>iterable 선택적 파라미터<br>요소가 키-값 쌍인 Array 또는 다른 순회 가능한 객체(예: [[1, ‘one’], [2, ‘two’]]). 각 키-값 쌍은 새로운 Map에 포함됩니다.</li></ul><figure class="highlight js"><figcaption><span>for-of</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> emptyMap = <span class="keyword">new</span> <span class="built_in">Map</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>([  </span><br><span class="line"> [<span class="string">"key1"</span>, <span class="string">"value1"</span>],  </span><br><span class="line"> [<span class="string">"key2"</span>, <span class="string">"value2"</span>],  </span><br><span class="line"> [<span class="string">"key1"</span>, <span class="string">"sports"</span>]  </span><br><span class="line">]);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">for</span> (<span class="keyword">var</span> element <span class="keyword">of</span> newMap)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(element);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// ["key1", "sports"]  </span></span><br><span class="line"><span class="comment">// ["key2", "value2"]</span></span><br></pre></td></tr></table></figure><ul><li>emptyMap = new Map()과 같이 파라미터를 작성하지 않고 Map 인스턴스를 생성할 수 있습니다. [key, value]가 없는 형태로 생성됩니다. 이는 Map 오브젝트 메서드를 사용하여 [key, value]를 추가해줄 수 있습니다.</li></ul><ol><li><p>Map() 파라미터는 이터러블 오브젝트이어야 하므로 대괄호[]를 작성하였으며, 그 안에 [“key1”, “value1”]형태로 작성하였습니다. key1이 key가 되고 value이 value가 됩니다. 다음은 newMap 인스턴스 구조입니다.</p><img src="/images/newMapInstance.JPG"><ol><li><p>&#95;&#95;proto&#95;&#95;: Map은 new Map()을 실행하면 Map.prototype에 연결된 프로퍼티로 인스턴스를 생성한다는 것을 암시합니다.</p></li><li><p>0: {“key1” =&gt; “sports”}에서 0은 인덱스이며 Map() 파라미터에 작성한 값이 아닙니다. Map은 엔진이 파라미터의 이터러블 오브젝트에 작성한 순서로 인덱스를 부여합니다. 따라서 작성한 순서대로 읽을 수 있습니다.</p></li></ol></li></ol><ol start="2"><li>for-of 문 출력 결과가 [“key1”, “sports”], [“key2”, “value2”]<br>두 개만 표시된 이유는 첫 번째의 “key1”과 세 번째 “key1”이 같기 때문입니다.<br>이와 같이 key 값이 같으면 추가되지 않고, value 값을 나중에 작성한 값으로 대체합니다.</li></ol><p><del>인덱스를 부여하여 작성한 순서로 저장하더라도 key 값의 일치 여부를 체크 하기 때문에 첫 번째의 value값을 세 번째의 value 값으로 대체하고 세 번째를 추가하지 않습니다.</del></p><figure class="highlight js"><figcaption><span>for.Each()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>([  </span><br><span class="line"> [<span class="string">"key1"</span>, <span class="string">"value1"</span>],  </span><br><span class="line"> [<span class="string">"key2"</span>, <span class="string">"value2"</span>]  </span><br><span class="line">]);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> element <span class="keyword">of</span> newMap)&#123;  </span><br><span class="line"> element.forEach(<span class="function">(<span class="params">keyValue, index</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(index, keyValue);  </span><br><span class="line"> &#125;);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> newMap)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(key, value);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">0 "key1"  </span></span><br><span class="line"><span class="comment">1 "value1"  </span></span><br><span class="line"><span class="comment">0 "key2"  </span></span><br><span class="line"><span class="comment">1 "value2"  </span></span><br><span class="line"><span class="comment">key1 value1  </span></span><br><span class="line"><span class="comment">key2 value2  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>Map() 파라미터에 이터러블 오브젝트를 작성하고, 그 안에 두 개의 [key, value]를 작성했습니다. for-of 문을 반복하면 element 변수에 [“key1”, “value1”]형태로 설정됩니다. 배열 형태이므로 for.Each() 메서드를 사용할 수 있습니다. for.Each()가 [“key1”, “value1”]형태를 첫 번째로 읽으면 for.Each() 의 keyValue 파라미터에 “key1”이 설정되고 index에 0이 설정됩니다. 두 번째를 읽으면 keyValue 파라미터에 “value1”이 설정되고 index에 1이 설정됩니다.</p></li><li><p>for-of 문을 처음 반복하면 [“key1”, “value1”]이 읽힙니다. 이때 “key1”이 for-of 문의 [key, value]에서 key에 설정되고 “value1”이 value에 설정됩니다. key, value가 모두 설정되므로 앞 코드와 같이 forEach()로 배열을 전개하지 않아도 됩니다.</p></li></ul><figure class="highlight js"><figcaption><span>Error</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">try</span> &#123;  </span><br><span class="line"> <span class="keyword">new</span> <span class="built_in">Map</span>([<span class="string">"one"</span>, <span class="number">1</span>]);  </span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"[one, 1]"</span>);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">try</span> &#123;  </span><br><span class="line"> <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;<span class="attr">one</span>: <span class="number">1</span>&#125;);  </span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"&#123;one: 1&#125;"</span>);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>([&#123;<span class="attr">one</span>: <span class="number">1</span>&#125;]);  </span><br><span class="line"><span class="built_in">console</span>.log(newMap);  </span><br><span class="line"><span class="comment">// [one, 1]  </span></span><br><span class="line"><span class="comment">// &#123;one: 1&#125;  </span></span><br><span class="line"><span class="comment">// &#123;undefined =&gt; undefined&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>Map() 파라미터에 이터러블 오브젝트를 작성하고 그 안에 배열로 엘리먼트를 작성합니다.<br>[“one”, 1]에서 대괄호[]가 이터러블이므로 이를 제외하면 “one”, 1 형태가 되어 에러가 발생합니다.<br>[[“one”, 1]]형태로 작성해야 합니다.</p></li><li><p>Map() 파라미터에 key,value를 작성하지만, {key: value} 형태로 작성할 수 없으며 TypeError가 발생합니다.<br>[[“one”, 1]]형태로 작성해야 합니다.</p></li><li><p>Map() 파라미터에 대괄호[]를 작성하고, 그 안에 {one: 1}형태로 작성하면 에러가 발생하지 않고<br>Map 인스턴스가 생성됩니다. 하지만 실행 결과에서 볼 수 있듯이 key,value에 값이 설정되지 않아 undefined가 출력됩니다.</p></li></ol><hr><h2 id="Map_set">set(): key와 value 설정</h2><p>set() 메서드는 Map 오브젝트에서 주어진 key를 가진 엘리먼트를 추가하고, key에 엘리먼트가 이미 있다면 대체합니다.</p><blockquote><p>Map.prototype.set(key, value)</p></blockquote><p>첫 번째 파라미터에 key가 될 String 또는 오브젝트를 작성하고 두 번째 파라미터에 value를 작성합니다.<br>set()을 실행한 후 Map인스턴스를 반환하므로 메서드 체인(method chain)형태로 계속해서 Map 인스턴스의 메서드를 호출할 수 있습니다.</p><figure class="highlight js"><figcaption><span>set</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>();  </span><br><span class="line"><span class="number">2.</span> newMap.set(<span class="string">"one"</span>, <span class="number">100</span>);  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(newMap.size);  </span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> newMap.set(&#123;&#125;, <span class="string">"오브젝트"</span>);  </span><br><span class="line"><span class="number">5.</span> newMap.set(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, <span class="string">"Function"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">6.</span> newMap.set(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"123"</span>), <span class="string">"인스턴스"</span>);  </span><br><span class="line"><span class="number">7.</span> newMap.set(<span class="literal">NaN</span>, <span class="string">"Not a Number"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">8.</span> <span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> newMap) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(key, value);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">1  </span></span><br><span class="line"><span class="comment">one 100  </span></span><br><span class="line"><span class="comment">Object &#123;&#125; : "오브젝트"  </span></span><br><span class="line"><span class="comment">function ()&#123;&#125; : "Function"  </span></span><br><span class="line"><span class="comment">Number &#123;[[PrimitiveValue]]: 123&#125; "인스턴스"  </span></span><br><span class="line"><span class="comment">NaN "Not a Number"  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li><p>new Map() 파라미터를 작성하지 않고 인스턴스를 생성했습니다.<br>인스턴스에 key, value를 추가할 수는 있으나 인스턴스를 삭제할 수는 없습니다.</p></li><li><p>newMap.set()으로 newMap 인스턴스에 [key, value]값을 추가합니다. “one”이 키가 되고 100이 value가 됩니다.</p></li><li><p>size 프로퍼티는 Map 인스턴스의 엘리먼트 수를 반환합니다. 이 값은 바꿀 수 없습니다. 바꾸면 TypeError가 발생합니다.</p></li><li><p>set()의 첫 번째 파라미터에 Object {}가 key가 되고, 두 번째 파라미터인 “오브젝트”가 value가 됩니다.</p></li><li><p>set()의 첫 번째 파라미터인 function 오브젝트가 key가 되고 두 번째 파라미터인 “Function”이 value가 됩니다.</p></li><li><p>첫 번째 파라미터인 Number 인스턴스가 key가 되고, 두 번째 파라미터인 “인스턴스”가 value가 됩니다.</p></li><li><p>첫 번째 파라미터인 NaN이 key가 되고, 두 번째 파라미터인 “Not a Number”가 value가 됩니다. NaN을 key로 사용할 수 있습니다.</p></li><li><p>newMap 인스턴스를 for-of 문으로 반복하면 추가한 순서대로 전개됩니다.</p><ul><li><p>newMap의 인스턴스 구조</p><pre><code>Map(5)    [[Entries]]    0: {&quot;one&quot; =&gt; 100}    1: {Object =&gt; &quot;오브젝트&quot;}    2: {function(){} =&gt; &quot;Function&quot;}    3: {Number =&gt; &quot;인스턴스&quot;}    4: {NaN =&gt; &quot;Not a Number&quot;}</code></pre></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>();  </span><br><span class="line">newMap.set(<span class="string">"one"</span>, <span class="number">100</span>);  </span><br><span class="line">newMap.set(<span class="string">"one"</span>, <span class="number">123</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> sportsObj = &#123;<span class="attr">sports</span>: <span class="string">"스포츠"</span>&#125;;  </span><br><span class="line"><span class="number">1.</span> newMap.set(sportsObj, <span class="string">"Sports Object"</span>);  </span><br><span class="line"><span class="number">2.</span> newMap.set(sportsObj, <span class="string">"Sports Object-변경"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> newMap.set(&#123;&#125;, <span class="string">"Object-1"</span>);  </span><br><span class="line"><span class="number">4.</span> newMap.set(&#123;&#125;, <span class="string">"Object-2"</span>);</span><br></pre></td></tr></table></figure><ul><li>newMap 인스턴스에 “one”을 key로 하여 100을 설정한 후, 다시 “one”을 key로 하여 123을 설정하면<br>key 값이 같으므로 100 이 123으로 대체됩니다.</li></ul><ol><li><p>set()의 첫 번째 파라미터에 Object 오브젝트를 직접 작성하지 않고 별도로 작성한 sportsObj 오브젝트를 지정했습니다. sportsObj가 key가 되고 “Sports Object”가 value가 됩니다.</p></li><li><p>sportsObj key가 존재하므로 value가 대체됩니다.</p></li><li><p>set()의 첫 번째 파라미터에 Object 리터럴 {}을 지정했습니다. Object 오브젝트를 생성하여 메모리에 저장하고 newMap 인스턴스에 key로 사용하여 “Object-1”을 추가합니다.</p></li><li><p>set()의 첫 번째 파라미터에 Object 리터럴을 지정해도 앞의 key값과 중복되지 않습니다.<br>왜냐하면 첫 번째 파라미터의 Object 리터럴이 새로운 Object 오브젝트를 생성하므로 앞의 코드와 다른 메모리 주소에 저장되기 때문입니다. 앞의 Object 오브젝트가 저장된 메모리 주소와 생성한 Object 오브젝트의 메모리 주소가 다르므로 value가 대체되지 않고 추가됩니다.</p></li></ol><hr><h2 id="Map_get">get(): key가 같은 value 반환</h2><p>Map 인스턴스에서 key 값이 같은 value를 반환합니다.</p><blockquote><p>Map.prototype.get(key)</p></blockquote><p>파라미터에 검색할 key 값을 작성합니다. 파라미터의 key가 Map 인스턴스에 존재하면 value를 반환하고, 존재하지 않으면 undefined를 반환합니다. key의 값 타입까지 체크합니다 (123 와 “123”은 같지 않습니다.)</p><figure class="highlight js"><figcaption><span>get()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>();  </span><br><span class="line"><span class="number">1.</span> newMap.set(<span class="string">"one"</span>, <span class="number">100</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(newMap.get(<span class="string">"one"</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(newMap.get(<span class="string">"two"</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> sportsObj = &#123;<span class="attr">sports</span>: <span class="string">"스포츠"</span>&#125;;  </span><br><span class="line">newMap.set(sportsObj, <span class="string">"Sports Object"</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(newMap.get(sportsObj));  </span><br><span class="line"><span class="comment">//100  </span></span><br><span class="line"><span class="comment">//undefined  </span></span><br><span class="line"><span class="comment">//Sports Object</span></span><br></pre></td></tr></table></figure><ol><li><p>set()을 실행하면 [“one”, 100]형태로 등록됩니다. get() 파라미터에 검색할 key 값을 작성합니다. “one”이 newMap 인스턴스에 존재하므로 value인 100을 반환합니다.</p></li><li><p>get()의 파라미터 값인 “two”가 newMap 인스턴스 key에 존재하지 않으므로 undefined 입니다.</p></li><li><p>set()의 첫 번째 파라미터에 sportsObj의 메모리 주소를 key로 지정하여 newMap 인스턴스에 추가합니다.<br>다시 sportsObj의 메모리 주소를 파라미터 값으로 지정하여 get()을 수행하므로 “Sports Object”가 반환됩니다.</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> newMap.set(&#123;&#125;, <span class="string">"Object"</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(newMap.get(&#123;&#125;));  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> newMap.set(<span class="number">123</span>, <span class="string">"값 123"</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(newMap.get(<span class="number">123</span>));  </span><br><span class="line"><span class="built_in">console</span>.log(newMap.get(<span class="string">"123"</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> newMap.set(<span class="literal">NaN</span>, <span class="string">"Not a Number"</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(newMap.get(<span class="literal">NaN</span>));  </span><br><span class="line"><span class="comment">// undefined  </span></span><br><span class="line"><span class="comment">// 값 123  </span></span><br><span class="line"><span class="comment">// undefined  </span></span><br><span class="line"><span class="comment">// Not a Number</span></span><br></pre></td></tr></table></figure><ol><li><p>set() 파라미터인 Object 오브젝트와 get() 파라미터인 Object 오브젝트의 메모리 주소가 다름으로 undefined를 반환합니다.</p></li><li><p>get(123)으로 검색하면 key 의 타입까지 체크하여 value를 반환합니다.<br>get(“123”)으로 값을 구하면 “123”이 String 타입이므로 타입이 같지않습니다. undefined가 반환됩니다.</p></li><li><p>set()의 파라미터에 NaN을 지정하고 get()의 파라미터에 NaN을 지정하면 key 값이 같으므로 value 값을 반환합니다. <del>ES5에서 (NaN === NaN) 비교 결과가 true가 아닌 문제가 있었지만 Map 오브젝트에 반영되었습니다.</del></p></li></ol><hr><h2 id="Map_has">has(): key 존재 여부</h2><p>Map 인스턴스에서 key 값의 존재 여부를 반환합니다.</p><blockquote><p>Map.prototype.has(key)</p></blockquote><p>key 값이 존재하면 true, 아니라면 false를 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>();  </span><br><span class="line">newMap.set(<span class="string">"one"</span>, <span class="number">100</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(newMap.has(<span class="string">"one"</span>));  </span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>key 를 비교한다는 점은 get()과 같습니다.<br>get()은 해당 key의 value를 반환.<br>has()는 key값 존재 여부를 체크, true/false 값을 반환합니다.</li></ul><hr><h2 id="Map_entries">entries(): 이터레이터 오브젝트 생성</h2><p>[key, value]를 반환하는 이터레이터 오브젝트를 생성하여 반환합니다.</p><blockquote><p>Map.prototype.entries()</p></blockquote><p>생성한 이터레이터 오브젝트에 next()를 호출하면 [key, value]를 반환합니다.<br>next()를 호출할 때마다 Map 인스턴스에 추가한 순서대로 읽힙니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>([  </span><br><span class="line"> [<span class="string">"key1"</span>, <span class="string">"value1"</span>],  </span><br><span class="line"> [<span class="string">"key2"</span>, <span class="string">"value2"</span>]  </span><br><span class="line">]);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> iteratorObj = newMap.entries();  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> result = iteratorObj.next();  </span><br><span class="line"><span class="built_in">console</span>.log(result);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: Array[2], done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: Array[2], done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>new Map()으로 두 개의 엘리먼트를 가진 Map 인스턴스를 생성합니다.<br>생성한 Map 인스턴스의 entries()를 호출하여 이터러블 오브젝트를 생성하고 반환합니다.</p></li><li><p>next()를 호출하면 첫 번째의 [“key1”, “value1”]를 {value: Array[2], done: false} 형태의 value에 설정하여 반환합니다. Array[2]로 표시된 이유는 [“key1”, “value1”] 형태이기 때문입니다.</p></li></ol><hr><h2 id="Map_keys">keys(): key 반환 이터레이터 오브젝트 생성</h2><p>key 값을 반환하는 이터레이터 오브젝트를 생성하여 반환합니다.</p><blockquote><p>Map.prototype.keys()</p></blockquote><p>생성한 이터레이터 오브젝트의 next()를 호출하면 [key, value]형태에서 key 값만 반환합니다.<br>Map 인스턴스에 추가한 순서대로 읽힙니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>([  </span><br><span class="line"> [<span class="string">"key1"</span>, <span class="string">"value1"</span>]  </span><br><span class="line">]);  </span><br><span class="line">newMap.set(&#123;&#125;, <span class="string">"오브젝트"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> iteratorObj = newMap.keys();  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: "key1", done:false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: Object, done:false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>newMap.keys()로 key 값만 반환하는 이터레이터 오브젝트를 생성해 iteratorObj에 할당합니다.</p></li><li><p>next()를 호출하면 [“key1”, “value1”]에서 “key1”을 {value: “key1”, done:false} 형태로<br>value에 설정하여 반환합니다.</p></li><li><p>({}, “오브젝트”) 형태로 추가했으므로 Object 오브젝트가 key가 됩니다.<br>{value: Object, done: false} 형태가 반환됩니다.</p></li></ol><hr><h2 id="Map_values">values(): value 반환 이터레이터 오브젝트 생성</h2><p>value 값을 반환하는 이터레이터 오브젝트를 생성하여 반환합니다.</p><blockquote><p>Map.prototype.values()</p></blockquote><p>생성한 이터레이터 오브젝트의 next()를 호출하면 value 값 만 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>([  </span><br><span class="line"> [<span class="string">"key1"</span>, <span class="string">"value1"</span>]  </span><br><span class="line">]);  </span><br><span class="line">newMap.set(&#123;&#125;, <span class="string">"오브젝트"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> iteratorObj = newMap.values();  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: "value1", done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: "오브젝트", done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>newMap.values()로 value 값을 반환하는 이터레이터 오브젝트를 생성하여 반환합니다.</p></li><li><p>next()를 호출하면 [“key1”, “value1”]에서 “value1”을 {value: “value1”, done: false}의 value에 설정하여 반환합니다.</p></li><li><p>“오브젝트”가 value가 됩니다. {value: “오브젝트”, done:false} 형태로 반환됩니다.</p></li></ol><hr><h2 id="Map_forEach">forEach(): 엘리먼트마다 콜백 함수 호출</h2><p>Map 인스턴스를 반복할 때 마다 callback 함수를 호출합니다.</p><blockquote><p>Map.prototype.forEach(function)</p></blockquote><p>첫 번째 파라미터에 반복할 때마다 호출할 콜백 함수를 작성합니다.</p><p>두 번째 파라미터는 선택적 파라미터로 콜백 함수에서 this로 참조할 오브젝트를 지정합니다.</p><h3 id="중요-포인트"><a href="#중요-포인트" class="headerlink" title="중요 포인트"></a>중요 포인트</h3><p>forEach()는 호출할 때마다 세 개의 파라미터를 넘겨줍니다.</p><ol><li>[key, value]에서 value</li><li>[key, value]에서 key</li><li>실행 중인 Map 인스턴스</li></ol><p><code>key, value 순서가 아닌 value, key 순서입니다.</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>([  </span><br><span class="line"> [<span class="string">"key1"</span>, <span class="string">"value1"</span>],  </span><br><span class="line"> [&#123;&#125;, <span class="string">"오브젝트"</span>]  </span><br><span class="line">]);  </span><br><span class="line">  </span><br><span class="line">newMap.forEach(<span class="function">(<span class="params">value, key, map</span>) =&gt;</span> &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(key, value);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">// key1 value1  </span></span><br><span class="line"><span class="comment">// Object &#123; &#125; "오브젝트"</span></span><br></pre></td></tr></table></figure><ul><li>forEach()가 처음 호출되면 [“key1”, “value1”]을 읽으며 파라미터 value에 “value1”이 설정되고 파라미터 key에 “key1”이 설정됩니다. 세 번째의 map 파라미터에 newMap 인스턴스가 설정됩니다.<br>두 번째 호출 역시 마찬가지로 설정됩니다.</li></ul><hr><h2 id="Map_delete">delete(): 엘리먼트 삭제</h2><p>Map 인스턴스에서 key 값이 같은 엘리먼트를 삭제합니다.</p><blockquote><p>Map.prototype.delete(key)</p></blockquote><p>파라미터에 삭제할 key 값을 지정합니다. Map 인스턴스에 같은 key가 존재하면 엘리먼트를 삭제하고 true를 반환합니다. key값이 존재하지 않으면 false를 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>([  </span><br><span class="line"> [<span class="string">"key1"</span>, <span class="string">"value1"</span>],  </span><br><span class="line"> [&#123;&#125;, <span class="string">"오브젝트"</span>]  </span><br><span class="line">]);  </span><br><span class="line"><span class="keyword">let</span> sportsObj = &#123;&#125;;  </span><br><span class="line">newMap.set(sportsObj, <span class="string">"추가"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(newMap.delete(<span class="string">"key1"</span>));  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(newMap.delete(&#123;&#125;));  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(newMap.delete(sportsObj));  </span><br><span class="line"><span class="comment">//true  </span></span><br><span class="line"><span class="comment">//false  </span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><ol><li><p>delete() 파라미터에 작성한 “key1”이 newMap 인스턴스에 존재하므로 [“key1”, “value1”] 엘리먼트를 삭제하고 true를 반환합니다.</p></li><li><p>delete() 파라미터에 작성한 Object 오브젝트{}가 newMap 인스턴스에 존재하는 것처럼 보이지만,<br>새로운 Object 오브젝트를 생성하여 메모리에 저장하므로 newMap 인스턴스에 저장된 Object 오브젝트와 메모리 주소가 달라서 삭제하지 못합니다. false가 반환됩니다.</p></li><li><p>delete() 파라미터의 sportsObj와 newMap 인스턴스의 sportsObj가 같은 메모리 주소를 참조하므로 삭제가 되며 true를 반환합니다.</p></li></ol><hr><h2 id="Map_clear">clear(): 모든 key, value 지움</h2><p>Map 인스턴스의 모든 [key, value]를 지웁니다.</p><blockquote><p>Map.prototype.clear()</p></blockquote><p>Map 인스턴스를 삭제하는 것이 아니라 [key, value]만 지웁니다.<br>나중에 Map 인스턴스에 [key, value]를 추가해 줄 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>([  </span><br><span class="line"> [<span class="string">"key1"</span>, <span class="string">"value1"</span>],  </span><br><span class="line"> [&#123;&#125;, <span class="string">"오브젝트"</span>]  </span><br><span class="line">]);  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(newMap.size);  </span><br><span class="line">  </span><br><span class="line">newMap.clear();  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(newMap.size);  </span><br><span class="line"><span class="comment">//0  </span></span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure><ol><li><p>size 프로퍼티는 newMap 인스턴스의 [key, value]엘리먼트 수를 반환합니다. 2가 출력됩니다.</p></li><li><p>clear()는 newMap 인스턴스의 모든 [key, value]를 지웁니다. 따라서 size 값으로 0이 출력됩니다.</p></li></ol><hr><h2 id="Map_Symbol_iterator">Symbol.iterator(): 이터레이터 오브젝트 생성</h2><p>이터레이터 오브젝트를 생성하여 반환합니다.</p><blockquote><p>Map.prototype.[Symbol.iterator]</p></blockquote><p>생성한 이터레이터 오브젝트의 next()를 호출하면 Map 인스턴스에 작성된 순서대로 [key, value]를 반환합니다.<br>Map.prototype.entries()와 같습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newMap = <span class="keyword">new</span> <span class="built_in">Map</span>([  </span><br><span class="line"> [<span class="string">"1"</span>, <span class="string">"music"</span>],  </span><br><span class="line"> [<span class="string">"2"</span>, <span class="string">"sports"</span>]  </span><br><span class="line">]);  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> iteratorObj = newMap[<span class="built_in">Symbol</span>.iterator]();  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: Array[2], done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: Array[2], done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>newMap 인스턴스의 Symbol.iterator를 호출하면 이터레이터 오브젝트를 생성하여 반환합니다.</p></li><li><p>next()를 호출할 때마다 [“1”, “music”] 과 [“2”, “sports”]를 순서대로 읽어<br>{value: Array[2], done: false} 형태로 반환합니다.<br>Array[2]에 읽은 [key, value]가 설정됩니다.</p></li></ol>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/10/Map%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScriprt/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Symbol 메서드 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/04/09/Symbol%20%EB%A9%94%EC%84%9C%EB%93%9C%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/04/09/Symbol%20%EB%A9%94%EC%84%9C%EB%93%9C%20-ECMAScript/</guid>
      <pubDate>Thu, 09 Apr 2020 01:34:23 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;Symbol 메서드&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/09/Symbol%20메서드%20-ECMAScript/#Symbol_for&quot;&gt;for(): Symbol 값 저장&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;글로벌(전역) Symbol 레지스트리&lt;/li&gt;
&lt;li&gt;Symbol의 대표적 사용 형태 세 가지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/09/Symbol%20메서드%20-ECMAScript/#Symbol_keyFor&quot;&gt;keyFor(): key 값 변환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/09/Symbol%20메서드%20-ECMAScript/#Symbol_toString&quot;&gt;toString(): 문자열로 변환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/09/Symbol%20메서드%20-ECMAScript/#Symbol_valueOf&quot;&gt;valueOf(): Symbol 프리미티브 값&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/09/Symbol%20메서드%20-ECMAScript/#getOwnPropertySymbols&quot;&gt;getOwnPropertySymbols(): Symbol 프로퍼티 반환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/09/Symbol%20메서드%20-ECMAScript/#JSON_stringify&quot;&gt;JSON.stringify(): JSON 형태로 변환&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;주석을 프로퍼티 key 값으로 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>Symbol 메서드<ul><li><a href="/2020/04/09/Symbol%20메서드%20-ECMAScript/#Symbol_for">for(): Symbol 값 저장</a><ul><li>글로벌(전역) Symbol 레지스트리</li><li>Symbol의 대표적 사용 형태 세 가지</li></ul></li><li><a href="/2020/04/09/Symbol%20메서드%20-ECMAScript/#Symbol_keyFor">keyFor(): key 값 변환</a></li><li><a href="/2020/04/09/Symbol%20메서드%20-ECMAScript/#Symbol_toString">toString(): 문자열로 변환</a></li><li><a href="/2020/04/09/Symbol%20메서드%20-ECMAScript/#Symbol_valueOf">valueOf(): Symbol 프리미티브 값</a></li><li><a href="/2020/04/09/Symbol%20메서드%20-ECMAScript/#getOwnPropertySymbols">getOwnPropertySymbols(): Symbol 프로퍼티 반환</a></li><li><a href="/2020/04/09/Symbol%20메서드%20-ECMAScript/#JSON_stringify">JSON.stringify(): JSON 형태로 변환</a><ul><li>주석을 프로퍼티 key 값으로 활용</li></ul></li></ul></li></ul><a id="more"></a><hr><h2 id="Symbol_for">for(): Symbol 값 저장</h2><p>글로벌 Symbol 레지스트리(registry)에 Symbol 값을 저장합니다.</p><blockquote><p>Symbol.for(key);</p></blockquote><ul><li><p>key<br>String, 필수. 심볼의 키 (심볼의 설명을 위해서도 쓰입니다).</p></li><li><p>반환 값<br>해당 키에 해당하는 심볼이 있다면 반환, 없으면 새로운 심볼을 만들고 반환합니다.</p></li></ul><p><mark>Symbol은 두 개의 스코프에 저장될 수 있습니다.<br>앞에서 다루었던 Symbol()은 Symbol을 생성한 스코프에 Symbol 값이 설정됩니다.</mark></p><p>반면, Symbol.for()은 글로벌 Symbol 레지스트리에 {key: value} 형태로 저장됩니다.<br>파라미터에 지정한 문자열이 key가 되고 생성한 Symbol 값이 value가 됩니다.</p><p><strong>Symbol.for()는 매 호출마다 새로운 심볼을 만들지 않고 현재 레지스트리에 해당 키를 가진 심볼이 있는지 먼저 검사를 합니다. 레지스트리에 key가 있다면 그 심볼(value)을 반환합니다. 만약 key에 해당하는 심볼이 없다면 Symbol.for()는 새로운 전역 심볼을 만들어 반환합니다.</strong></p><p>글로벌 Symbol 레지스트리는 Symbol 값을 공유하기 위한 영역입니다.<br>다른 자바스크립트 프레임워크에서도 공유할 수 있습니다.</p><h3 id="글로벌-전역-Symbol-레지스트리"><a href="#글로벌-전역-Symbol-레지스트리" class="headerlink" title="글로벌(전역) Symbol 레지스트리"></a>글로벌(전역) Symbol 레지스트리</h3><p>글로벌(전역) Symbol 레지스트리는 다음과 같은 가진 기록 구조를 가진 리스트입니다.<br>초기 값은 비어 있습니다.</p><ul><li>[[[key]] 심볼을 구분하기 위해 사용되는 문자열 키</li><li>[[[symbol]] 전역으로 저장되는 심볼</li></ul><h3 id="Symbol의-대표적-사용-형태-세-가지"><a href="#Symbol의-대표적-사용-형태-세-가지" class="headerlink" title="Symbol의 대표적 사용 형태 세 가지"></a>Symbol의 대표적 사용 형태 세 가지</h3><ol><li><p>Symbol() : Symbol 값을 생성하여 스코프 안에서 사용합니다.</p></li><li><p>Symbol.for() : 글로벌 Symbol 레지스트리에 저장되며 전체 프로그램에서 사용합니다.</p></li><li><p>Well-Known Symbol : 빌트인 Symbol 프로퍼티로 오버라이드하여 기능을 추가 및 변경 합니다.</p></li></ol><figure class="highlight js"><figcaption><span>Symbol.for()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.for(<span class="string">"sports"</span>)); <span class="comment">//새로운 전역심볼 생성  </span></span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.for(<span class="string">"sports"</span>));<span class="comment">// 이미 만들어진 심볼을 검색  </span></span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.for(<span class="string">"ABC"</span>) === <span class="built_in">Symbol</span>.for(<span class="string">"ABC"</span>)); <span class="comment">//전역심볼  </span></span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.for(<span class="string">"DEF"</span>) === <span class="built_in">Symbol</span>(<span class="string">"DEF"</span>)); <span class="comment">//지역 심볼  </span></span><br><span class="line"><span class="number">5.</span> <span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.for(<span class="literal">true</span>)); <span class="comment">// 문자열이 아님  </span></span><br><span class="line"><span class="comment">// Symbol(sports)  </span></span><br><span class="line"><span class="comment">// Symbol(sports)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// true  </span></span><br><span class="line"><span class="comment">// false  </span></span><br><span class="line"><span class="comment">// Symbol(true)</span></span><br></pre></td></tr></table></figure><ol><li><p>Symbol 값을 생성하여 글로벌 Symbol 레지스트리에 {key: value} 형태로 저장됩니다.<br>key: 파라미터로 넘겨준값 (“sports”)<br>value: 생성한 Symbol 값 ( Symbol.for(“sports”) )<br>생성한 Symbol을 출력하면 for을 제외하고 Symbol(“sports”)로 출력됩니다.</p></li><li><p>바로 위에서 sports를 글로벌 Symbol 레지스트리에 저장했으므로<br>저장된 sports 키의 value를 검색하여 반환합니다.<br>마찬가지로 for을 제외한 Symbol(“sports”) 형태로 출력됩니다.</p></li><li><p>Symbol 값을 생성하여 “ABC”를 프로퍼티 키로 글로벌 Symbol 레지스트리에 저장합니다.<br>오른쪽 Symbol.for(“ABC”)에서 글로벌 Symbol 레지스트리에 프로퍼티 키 “ABC”를 검색하여<br>생성되있는 Symbol 값을 반환합니다. 왼쪽과 오른쪽 Symbol 값이 같으므로 true가 반환됩니다.</p></li><li><p>Symbol.for()은 글로벌 Symbol 레지스트리에 저장되고<br>Symbol()은 스코프에 저장되면서 둘은 공유되지 않습니다. false가 반환됩니다.</p></li><li><p>파라미터에 true 와 같이 문자열이 아닌 값을 던져주면 문자열로 변환하여 프로퍼티 키로 사용합니다.<br>key: “true”<br>value: Symbol.for(“true”)<br>출력시 Symbol(true)로 출력됩니다.</p></li></ol><hr><h2 id="Symbol_keyFor">keyFor(): key 값 변환</h2><p>글로벌 Symbol 레지스트리에서 프로퍼티 키 값을 반환합니다.</p><blockquote><p>Symbol.keyFor(Symbol)</p></blockquote><p>파라미터에 글로벌 Symbol 레지스트리에 저장한 Symbol을 지정합니다.<br>Symbol이 아니면 TypeError가 발생합니다.<br>글로벌 Symbol 레지스트리에 Symbol이 존재하면 프로퍼티 키를 반환합니다.<br>Symbol이 존재하지 않으면 undefinded를 반환합니다.</p><figure class="highlight js"><figcaption><span>keyFor()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> globalSym = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>); <span class="comment">// 글로벌 Symbol 레지스트리에 Symbol 값을 생성합니다.  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(globalSym)); <span class="comment">// "foo"  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> localSym = <span class="built_in">Symbol</span>();  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(localSym)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>Symbol()은 글로벌 스코프에서 생성하더라도 글로벌 Symbol 레지스트리에는 등록되지 않습니다.<br>undefined가 반환됩니다.</li></ul><hr><h2 id="Symbol_toString">toString(): 문자열로 변환</h2><p>Symbol을 문자열로 변환하여 반환합니다.<br>Symbol 값이 아닌 Symbol 값을 생성한 Symbol() 형태를 문자열로 반환합니다.<br>Well-Known Symbol, 글로벌 Symbol 레지스트리도 변환됩니다.</p><blockquote><p>Symbol.prototype.toString()</p></blockquote><p>생성한 Symbol 값을 문자열에 연결하면 TypeError가 발생하지만, toString으로 변환하여 연결하면 에러가 나지 않고 문자열로 연결됩니다. toString() 메서드가 Symbol.prototype에 연결되어 있으므로 Symbol() 또는 Symbol.for()로 생성한 Symbol을 사용합니다.</p><figure class="highlight js"><figcaption><span>toString()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"1:"</span>, <span class="built_in">Symbol</span>(<span class="string">"123"</span>).toString());  </span><br><span class="line"><span class="comment">// 1: Symbol(123)  </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2:"</span>, <span class="built_in">Symbol</span>.for(<span class="string">"ABC"</span>).toString());  </span><br><span class="line"><span class="comment">// 2: Symbol(ABC)  </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"3:"</span>, <span class="built_in">Symbol</span>.iterator.toString());  </span><br><span class="line"><span class="comment">// 3: Symbol(Symbol.iterator)</span></span><br></pre></td></tr></table></figure><ol><li><ol start="2"><li>Symbol 값이 아닌 Symbol 값을 생성할 때의 형태를 문자열로 반환합니다.<br>Symbol.for()도 Symbol()과 같지만 출력할 때 for을 제외시킵니다.</li></ol></li><li><p>Well-Known Symbol을 문자열로 반환합니다. Symbol 값을 생성할 때의 형태<br>Symbol.iterator가 Symbol()의 파라미터에 표시됩니다.</p></li></ol><hr><h2 id="Symbol_valueOf">valueOf(): Symbol 프리미티브 값</h2><p>valueOf () 메서드는 Symbol 오브젝트의 프리미티브 값을 반환합니다.</p><blockquote><p>Symbol.prototype.valueOf()</p></blockquote><p>모든 빌트인 오브젝트에 valueOf() 메소드가 있으며 프리미티브 값을 반환합니다.<br>예시로 New Number(123)으로 생성한 인스턴스를 valueOf()로 실행하면 123이 반환됩니다.</p><p>Symbol도 빌트인 오브젝트이지만 반환 값 형태가 다릅니다.<br>Symbol(123)으로 생성한 Symbol로 valueOf()를 실행하면 Symbol 값이 반환되지 않고,<br>Symbol 값을 생성할 때의 “Symbol(123)”이 반환됩니다.</p><hr><h2 id="getOwnPropertySymbols">getOwnPropertySymbols(): Symbol 프로퍼티 반환</h2><p>getOwnPropertySymbols()는 반환 대상이 Symbol인 Object 오브젝트 메서드 입니다.<br>배열로 반환합니다.</p><blockquote><p>Object.getOwnPropertySymbols()</p></blockquote><ul><li><p>파라미터<br>추출 대상 Object</p></li><li><p>반환<br>지정한 Object 에서 Symbol 이외의 프로퍼티는 반환하지 않고 오직 Symbol만 배열로 반환합니다.</p></li></ul><figure class="highlight js"><figcaption><span>getOwnPropertySymbols</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bookObj = &#123;<span class="attr">book</span>: <span class="number">123</span>&#125;;  </span><br><span class="line">bookObj[<span class="built_in">Symbol</span>(<span class="string">"one"</span>)] = <span class="number">10</span>;  </span><br><span class="line">bookObj[<span class="built_in">Symbol</span>.for(<span class="string">"two"</span>)] = <span class="number">20</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> names = <span class="built_in">Object</span>.getOwnPropertyNames(bookObj);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1:"</span>, names);  </span><br><span class="line"><span class="comment">// 1: ["book"]  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> symbolList = <span class="built_in">Object</span>.getOwnPropertySymbols(bookObj);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2:"</span>, symbolList);  </span><br><span class="line"><span class="comment">// 2: [Symbol(one), Symbol(two)]  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> sym <span class="keyword">of</span> symbolList)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(sym.toString(), bookObj[sym]);  </span><br><span class="line"><span class="comment">// Symbol(one) 10  </span></span><br><span class="line"><span class="comment">// Symbol(two) 20  </span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> emptyList = <span class="built_in">Object</span>.getOwnPropertySymbols(&#123;&#125;);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"5:"</span>, emptyList.length);  </span><br><span class="line"><span class="comment">// 5: 0</span></span><br></pre></td></tr></table></figure><ul><li>{book:123}으로 Object 오브젝트를 생성하여 bookObj에 할당합니다.<br>Symbol(“one”)으로 Symbol을 생성하고, bookObj 오브젝트의 symbol-keyed 프로퍼티로 사용하여 10을 할당합니다.<br>이때 bookObj 오브젝트는 {book: 123, Symbol(“one”): 10} 형태가 됩니다.<br>글로벌 Symbol 레지스트리에 “two”를 프로퍼티 키로 Symbol 값을 등록하고, bookObj 오브젝트에 symbol-keyed 프로퍼티로 사용하여 20을 할당합니다.<br>이때 bookObj 오브젝트는 {book: 123, Symbol(“one”): 10, Symbol(“two”): 20} 형태가 됩니다.</li></ul><ol><li><p>getOwnPropertyNames() 파라미터에 지정한 bookObj 오브젝트에서 프로퍼티 이름을 배열로 반환합니다.<br>이때 Symbol은 반환되지 않습니다. 즉 [“book”]만 출력됩니다.<br>for-in문으로 전개해도 Symbol은 열거되지 않습니다.</p></li><li><p>getOwnPropertySymbols() 파라미터에 지정한 bookObj 오브젝트에서<br>Symbol-keyed 프로퍼티를 배열로 반환합니다. Symbol이 아닌 프로퍼티는 반환하지 않습니다.<br>[Symbol(one), Symbol(two)]가 반환됩니다.</p></li><li><ol start="4"><li>getOwnPropertySymbols()에서 배열로 반환해 줌으로 for-of문으로 전개할 수 있습니다.<br>Symbol이 sym 변수에 설정되어 String으로 변환되어 출력됩니다.</li></ol></li><li><p>getOwnPropertySymbols() 파라미터에 빈 Object 를 지정하면 빈 배열로 반환합니다.<br>length 값이 0 이 됩니다.</p></li></ol><hr><h2 id="JSON_stringify">JSON.stringify(): JSON 형태로 변환</h2><p>자바스크립트 형태를 JSON 형태의 문자열로 변환합니다.</p><blockquote><p>JSON.stringify(value[, replacer[, space]])</p></blockquote><ul><li><p>value<br>JSON 문자열로 변환할 값.</p></li><li><p>replacer 선택적 파라미터<br>문자열화 동작 방식을 변경하는 함수, 혹은 JSON 문자열에 포함될 값 객체의 속성들을 선택하기 위한 화이트리스트(whitelist)로 쓰이는 String 과 Number 객체들의 배열. 이 값이 null 이거나 제공되지 않으면, 객체의 모든 속성들이 JSON 문자열 결과에 포함된다.</p></li><li><p>space 선택적 파라미터<br>가독성을 목적으로 JSON 문자열 출력에 공백을 삽입하는데 사용되는 String 또는 Number 객체.</p><ul><li>Number 라면, 공백으로 사용되는 스페이스(space)의 수를 나타낸다; 이 수가 10 보다 크면 10 으로 제한된다. 1 보다 작은 값은 스페이스가 사용되지 않는 것을 나타낸다.</li><li>String 이라면, 그 문자열(만약 길이가 10 보다 길다면, 첫번째 10 개의 문자)이 공백으로 사용된다. 이 매개 변수가 제공되지 않는다면(또는 null 이면), 공백이 사용되지 않는다.</li></ul></li><li><p>반환 값<br>주어진 값과 대응하는 JSON 문자열.</p></li></ul><p>JSON.stringify()로 자바스크립트 형태의 {key: value}를 JSON 형태의 문자열로 변환하면,<br>Symbol-keyed 프로퍼티로 작성한 Symbol은 변환에서 제외됩니다.<br>Symbol 값을 외부에 노출시키지 않으려는 의도이지만, 에러 역시 나지 않으므로 주의해야 합니다.</p><figure class="highlight js"><figcaption><span>JSON.stringify</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(&#123;[<span class="built_in">Symbol</span>(<span class="string">"one"</span>)]: <span class="string">"1"</span>&#125;);  </span><br><span class="line"><span class="built_in">console</span>.log(result);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> result);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(&#123;[<span class="built_in">Symbol</span>.for(<span class="string">"two"</span>)]: <span class="string">"2"</span>&#125;));  </span><br><span class="line"><span class="comment">// "&#123; &#125;"  </span></span><br><span class="line"><span class="comment">// string  </span></span><br><span class="line"><span class="comment">// "&#123; &#125;"</span></span><br></pre></td></tr></table></figure><ul><li>위와 같이 Symbol(“one”)으로 생성한 Symbol을 Object 오브젝트의 symbol-keyed 프로퍼티로 사용한 것을<br>JSON.stringify()로 변환하면, Symbol이 변환에서 제외되어 중괄호 {}만 문자열로 반환됩니다.</li></ul><h3 id="주석을-프로퍼티-key-값으로-활용"><a href="#주석을-프로퍼티-key-값으로-활용" class="headerlink" title="주석을 프로퍼티 key 값으로 활용"></a>주석을 프로퍼티 key 값으로 활용</h3><p>Symbol 주석을 프로퍼티 키로 활용하여 JSON.stringify()에서 Symbol이 제외되는 것을 방지하기 위한<br>하나의 코드작성 법입니다.</p><figure class="highlight js"><figcaption><span>JSON.stringify() Symbol 제외 방지</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bookObj = &#123;&#125;;  </span><br><span class="line">bookObj[<span class="built_in">Symbol</span>(<span class="string">"one"</span>)] = <span class="number">10</span>;  </span><br><span class="line">bookObj[<span class="built_in">Symbol</span>.for(<span class="string">"two"</span>)] = <span class="number">20</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> symbolList = <span class="built_in">Object</span>.getOwnPropertySymbols(bookObj);  </span><br><span class="line"><span class="built_in">console</span>.log(symbolList);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> first, second, key, keyValue = &#123;&#125;;  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">for</span> (<span class="keyword">let</span> sym <span class="keyword">of</span> symbolList)&#123;  </span><br><span class="line"> <span class="number">3.</span> key = <span class="built_in">Symbol</span>.keyFor(sym);  </span><br><span class="line"> <span class="number">4.</span> <span class="keyword">if</span> (key)&#123;  </span><br><span class="line"> keyValue[key] = bookObj[sym];  </span><br><span class="line"> &#125; <span class="number">5.</span> <span class="keyword">else</span> &#123;  </span><br><span class="line"> <span class="comment">//Symbol(one)  </span></span><br><span class="line"> first = <span class="regexp">/^Symbol[(]/</span>[<span class="built_in">Symbol</span>.replace](sym.toString(), <span class="string">""</span>);  </span><br><span class="line"> second = <span class="regexp">/[)]$/</span>[<span class="built_in">Symbol</span>.replace](first, <span class="string">""</span>);  </span><br><span class="line"> <span class="number">6.</span> keyValue[second] = bookObj[sym];  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">7.</span> <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(keyValue));  </span><br><span class="line"><span class="comment">// [Symbol(one), Symbol(two)]  </span></span><br><span class="line"><span class="comment">// &#123;"one": 10, "two": 20&#125;</span></span><br></pre></td></tr></table></figure><ul><li>빈 오브젝트 bookObj에 Symbol(one) 과 Symbol.for(two)로 생성한 Symbol을<br>Symbol-keyed 프로퍼티로 사용하여 프로퍼티 값을 설정해 줬습니다.<br>{Symbol(“one”): 10, Symbol(“two”): 20} 형태가 됩니다.</li></ul><ol><li><p>getOwnPropertySymbols() 파라미터의 bookObj 오브젝트에서 반환받으면<br>[Symbol(one), Symbol(two)]가 출력됩니다. symbolList 변수에 할당합니다.</p></li><li><p>for-of 문으로 symbolList를 반복하면 배열의 순서대로 sym 변수에 할당됩니다.</p></li><li><p>Symbol.keyFor(sym)을 실행하면 글로벌 Symbol 레지스트리에 등록한 Symbol 키를 반환받습니다.<br>따라서 Symbol(one)은 undefined를 Symbol.for(two)는 “two”를 반환합니다.</p></li><li><p>Symbol.for(“two”)가 for-of 문의 sym에 설정될때 실행됩니다.<br>bookObj 오브젝트의 sym으로 값을 구하면 20이 반환되며, 글로벌 Symbol 레지스트리에 “two”가 프로퍼티 키로 등록되어 있으므로 {two: 20}형태가 됩니다.<br><del>Symbol.for()로 생성한 Symbol은 프로퍼티 키와 값을 갖고 있으므로 {key: value}형태를 만들수 있습니다.</del></p></li><li><p>Symbol(“one”)이 for-of 문의 sym에 설정될 때 실행됩니다.<br>“one”을 프로퍼티 키로 사용하기 위해 정규 표현식으로 “one”이외의 문자를 빈 문자열로 대체합니다.</p></li><li><p>bookObj 오브젝트에서 Symbol(“one”)으로 생성한 값으로 프로퍼티 값을 구하면 10이 반환되며,<br>second 변수 값이 “one”이므로 {one: 10}형태가 됩니다. for-of문 반복을 완료하면<br>{one: 10, two: 20} 형태가 됩니다.</p></li><li><p>파라미터에 keyValue를 지정하여 JSON.stringify()를 실행하면 {“one”: 10, “two”: 20}으로 변환됩니다.<br>Symbol() 주석을 유일하게 지정하면 {key: value} 형태로 Symbol을 변환할 수 있습니다.<br>Symbol()로 생성한 값을 오브젝트의 프로퍼티 키로 사용하고 이를 서버로 전송하려면 계획적인 접근이 필요합니다.</p></li></ol>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/09/Symbol%20%EB%A9%94%EC%84%9C%EB%93%9C%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Symbol 프로퍼티 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/04/06/Symbol%20%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/04/06/Symbol%20%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%20-ECMAScript/</guid>
      <pubDate>Mon, 06 Apr 2020 03:55:12 GMT</pubDate>
      <description>
      
        &lt;p&gt;Symbol 오브젝트에 프로퍼티들을 살펴봅니다.&lt;br&gt;이 프로퍼티들은 메서드로도 사용할 수 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Symbol 프로퍼티&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Well-Known_Symbol&quot;&gt;Well-Known Symbol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#toStringTag&quot;&gt;toStringTag&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;클래스의 메서드로 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#isConcatSpreadable&quot;&gt;isConcatSpreadable&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Array-like 오브젝트에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#unscopable&quot;&gt;unscopable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#species_개념&quot;&gt;species 개념&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#species&quot;&gt;species&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#return_other_Class&quot;&gt;다른 Class 반환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#return_null&quot;&gt;null 반환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#toPrimitive&quot;&gt;toPrimitive&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;toPrimitive() 파라미터의 세가지 모드(mode)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Symbol_iterator&quot;&gt;이터레이터&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Array.prototype[Symbol.iterator]&lt;/li&gt;
&lt;li&gt;String.prototype[Symbol.iterator]&lt;/li&gt;
&lt;li&gt;Object 이터레이션&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Symbol_generator&quot;&gt;제너레이터&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Symbol_asyncIterator&quot;&gt;asyncIterator(): 비동기 반복&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Symbol_match&quot;&gt;match(): match 결과 반환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Symbol_matchAll&quot;&gt;matchAll()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Symbol 오브젝트에 프로퍼티들을 살펴봅니다.<br>이 프로퍼티들은 메서드로도 사용할 수 있습니다</p><ul><li>Symbol 프로퍼티<ul><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Well-Known_Symbol">Well-Known Symbol</a></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#toStringTag">toStringTag</a><ul><li>클래스의 메서드로 사용</li></ul></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#isConcatSpreadable">isConcatSpreadable</a><ul><li>Array-like 오브젝트에서 사용</li></ul></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#unscopable">unscopable</a></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#species_개념">species 개념</a></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#species">species</a></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#return_other_Class">다른 Class 반환</a></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#return_null">null 반환</a></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#toPrimitive">toPrimitive</a><ul><li>toPrimitive() 파라미터의 세가지 모드(mode)</li></ul></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Symbol_iterator">이터레이터</a><ul><li>Array.prototype[Symbol.iterator]</li><li>String.prototype[Symbol.iterator]</li><li>Object 이터레이션</li></ul></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Symbol_generator">제너레이터</a></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Symbol_asyncIterator">asyncIterator(): 비동기 반복</a></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Symbol_match">match(): match 결과 반환</a></li><li><a href="/2020/04/06/Symbol%20프로퍼티%20-ECMAScript/#Symbol_matchAll">matchAll()</a></li></ul></li></ul><a id="more"></a><hr><h2 id="Well-Known_Symbol">Well-Known Symbol</h2><p>스펙에서 @@iterator 형태로 작성된 것을 볼 수 있으며<br>@@는 Symbol 대신 사용한 것입니다.<br>따라서 @@iterator는 Symbol.iterator와 같습니다.<br>@@iterator 형태는 스펙에서 사용하며 Symbol.iterator 형태는 내부 프로퍼티인<br>[[Description]]에 저장되는 형태입니다.<br>개발자 코드에서는 Symbol.iterator 형태를 사용합니다.</p><table><thead><tr><th>Spec name</th><th>[[Description]]</th></tr></thead><tbody><tr><td>@@asyncIterator</td><td>Symbol.asyncIterator</td></tr><tr><td>@@hasInstance</td><td>Symbol.hasInstance</td></tr><tr><td>@@isConcatSpreadable</td><td>Symbol.isConcatSpreadable</td></tr><tr><td>@@iterator</td><td>Symbol.iterator</td></tr><tr><td>@@match</td><td>Symbol.match</td></tr><tr><td>@@matchAll</td><td>Symbol.matchAll</td></tr><tr><td>참고용 프로퍼티</td><td>Symbol.prototype.description</td></tr><tr><td>@@replace</td><td>Symbol.replace</td></tr><tr><td>@@search</td><td>Symbol.search</td></tr><tr><td>@@species</td><td>Symbol.species</td></tr><tr><td>@@split</td><td>Symbol.split</td></tr><tr><td>@@toPrimitive</td><td>Symbol.toPrimitive</td></tr><tr><td>@@toStringTag</td><td>Symbol.toStringTag</td></tr><tr><td>@@unscopables</td><td>Symbol.unscopables</td></tr></tbody></table><ul><li><p>Well-Known Symbol은 스펙에서 처리 알고리즘(Algorism)을 구분하기 위해 부여한 이름입니다. 즉, 자바스크립트 엔진이 디폴트로 처리하는 알고리즘 유형 이름입니다.</p></li><li><p><mark>자바스크립트 프로그램에 같은 이름의 Well-Known.Symbol을 작성하면<br>엔진의 디폴트 처리를 실행하지 않고 프로그램에 작성한 코드를 실행합니다(오버라이딩)<br>Well-Known Symbol이 오버라이드되는 것과 같으므로 프로그램에 같은 이름을작성하여<br>Well-Known Symbol기능을 대체할 수 있습니다.</makr></p></li></ul><p><strong>이런 가변성과 유용성을 제공하는 것이 Well-Known Symbol의 목적입니다.</strong></p><hr><h2 id="toStringTag">toStringTag</h2><p>[object Object] 형태에서 Object를 Symbol.toStringTag 값으로 표시합니다.<br>객체의 기본 문자열 설명을 만드는 데 사용되는 문자열 값 속성입니다.<br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/toString">Object.prototype.toString()</a> 메소드에 의해 내부적으로 액세스됩니다.</p><h3 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h3><p><strong>많은 자바스크립트 타입들은 기본적으로 tag를 가지고 있습니다.</strong></p><figure class="highlight js"><figcaption><span>tag default</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">'foo'</span>);     </span><br><span class="line"><span class="comment">// "[object String]"  </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>, <span class="number">2</span>]);    </span><br><span class="line"><span class="comment">// "[object Array]"  </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">3</span>);         </span><br><span class="line"><span class="comment">// "[object Number]"  </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>);      </span><br><span class="line"><span class="comment">// "[object Boolean]"  </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>); </span><br><span class="line"><span class="comment">// "[object Undefined]"  </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>);      </span><br><span class="line"><span class="comment">// "[object Null]"  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... and more</span></span><br></pre></td></tr></table></figure><p><strong>기본적으로 toStringTag symbol이 정의되어 있는 것도 있습니다.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Map</span>());       </span><br><span class="line"><span class="comment">// "[object Map]"  </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;&#125;); </span><br><span class="line"><span class="comment">// "[object GeneratorFunction]"  </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Promise</span>.resolve()); </span><br><span class="line"><span class="comment">// "[object Promise]" </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... and more</span></span><br></pre></td></tr></table></figure><p><strong>class를 생성하면 자바스크립트는 기본값으로 Object tag를 설정합니다.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidatorClass</span> </span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> ValidatorClass()); </span><br><span class="line"><span class="comment">// "[object Object]"</span></span><br></pre></td></tr></table></figure><p><strong>toStringTag를 이용하여 자신만의 맞춤 태그를 설정할 수 있습니다.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidatorClass</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">get</span> [Symbol.toStringTag]() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">'Validator'</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> ValidatorClass()); </span><br><span class="line"><span class="comment">// "[object Validator]"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>toStringTag 예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Sports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;  </span><br><span class="line"><span class="keyword">let</span> sportsObj = <span class="keyword">new</span> Sports;  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(sportsObj.toString());  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> Sports.prototype[<span class="built_in">Symbol</span>.toStringTag] = <span class="string">"Sports-Function"</span>;  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(sportsObj.toString());  </span><br><span class="line"><span class="comment">// [object Object]  </span></span><br><span class="line"><span class="comment">// [object Sports-Function]</span></span><br></pre></td></tr></table></figure><ol><li><p>new Sports로 생성한 인스턴스로 toString()을 실행하면 [object Object]가 반환됩니다.<br>Object 오브젝트도 [object Object]를 반환하므로 구분이 어렵습니다.<br>한편 new Sports()의 파라미터 값이 없을때 new sports; 로 사용할 수 있습니다.</p></li><li><p>Sports.prototype[Symbol.toStringTag] = “Sports-Function”;<br>Sports.prototype[Symbol.toStringTag]에 [object Object] 의 Object에 표시할 문자열을 지정합니다.</p></li><li><p>sportsObj.toString()을 실행하면 엔진에서 디폴트 toStringTag 값을 반환하기 전에<br>sportsObj에서 Symbol.toStringTag의 작성 여부를 체크합니다.<br>값이 작성되어 있다면 디폴트 값이 아닌 작성된 값을 반환합니다.<br>따라서 [object Sports-Function] 이 출력됩니다.<br>[object Sports-Function]을 정규표현식으로 분리하면 Sports-Function을 구할 수 있습니다.</p></li></ol><h3 id="클래스의-메서드로-사용"><a href="#클래스의-메서드로-사용" class="headerlink" title="클래스의 메서드로 사용"></a>클래스의 메서드로 사용</h3><p>Symbol.toStringTag를 클래스의 getter로 작성할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;&#125;;  </span><br><span class="line"><span class="keyword">let</span> bookObj = <span class="keyword">new</span> Book();  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(bookObj.toString());  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="class"><span class="keyword">class</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">get</span> [Symbol.toStringTag]() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"Sports-class"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> sportsObj = <span class="keyword">new</span> Sports();  </span><br><span class="line"><span class="built_in">console</span>.log(sportsObj.toString());  </span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(<span class="built_in">Map</span>.prototype[<span class="built_in">Symbol</span>.toStringTag]);  </span><br><span class="line"><span class="comment">//[object Object]  </span></span><br><span class="line"><span class="comment">//[object Sports-class]  </span></span><br><span class="line"><span class="comment">//Map</span></span><br></pre></td></tr></table></figure><ol><li><p>toString()을 실행하면 [object Object]가 반환됩니다.<br>따라서 Function 오브젝트, Object 오브젝트와 구분할 수 없습니다.</p></li><li><p>클래스에 Symbol.toStringTag를 getter로 선언했습니다.<br>return 문에 [object Object]에서 Object에 표시될 문자열을 작성했습니다.Sports-class가 반환됩니다.<br>getter로 작성하지 않고 메서드로 작성하면 [object Object]가 반환되므로 getter로 작성해야 합니다.</p></li><li><p>인스턴스로 toString()을 호출하면 sportsObj 인스턴스에 작성된 getSymbol.toStringTag가 호출됩니다.<br>호출된 메서드에서 “Sports-class”를 반환하므로 [object Sports-class]가 출력됩니다.</p></li><li><p>Map 같이 Symbol.toStringTag를 기본값(빌트인)으로 가지고 있는 것들이 있습니다.<br>Map.prototype[Symbol.toStringTag]를 실행하면 “Map”이 출력됩니다.<br>개발자 코드로 Symbol.toStringTag에 표시될 문자열을 작성하거나 getter를 사용하지 않아도 됩니다.</p></li></ol><hr><h2 id="isConcatSpreadable">isConcatSpreadable</h2><p>Symbol.isConcatSpreadable는<br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">Array.prototype.concat()</a> 메서드를 사용할 때 객체를 배열 요소에 병합해야하는지 구성하는 데 사용됩니다.</p><blockquote><p>[Symbol.isConcatSpreadable] = true / false</p></blockquote><ul><li>프로퍼티의 기본값은 true 입니다.<br>false로 설정시 배열을 펼처서 합치지 않고 배열의 끝에 배열을 추가합니다.<br>사용시 true/false 에 따라 생성되는 배열의 length값이 달라집니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> one = [<span class="number">11</span>, <span class="number">12</span>], two = [<span class="number">21</span>, <span class="number">22</span>];  </span><br><span class="line"><span class="keyword">let</span> result = one.concat(two);  </span><br><span class="line"><span class="built_in">console</span>.log(result, result.length);  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">Array(4)  </span></span><br><span class="line"><span class="comment"> 0: 11  </span></span><br><span class="line"><span class="comment"> 1: 12  </span></span><br><span class="line"><span class="comment"> 2: 21  </span></span><br><span class="line"><span class="comment"> 3: 22  </span></span><br><span class="line"><span class="comment"> length: 4  </span></span><br><span class="line"><span class="comment"> __proto__: Array(0)  </span></span><br><span class="line"><span class="comment">4   </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> two[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;  </span><br><span class="line">result = one.concat(two);  </span><br><span class="line"><span class="built_in">console</span>.log(result, result.length);  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">Array(3)  </span></span><br><span class="line"><span class="comment"> 0: 11  </span></span><br><span class="line"><span class="comment"> 1: 12  </span></span><br><span class="line"><span class="comment"> 2: Array(2)  </span></span><br><span class="line"><span class="comment"> 0: 21  </span></span><br><span class="line"><span class="comment"> 1: 22  </span></span><br><span class="line"><span class="comment"> length: 2  </span></span><br><span class="line"><span class="comment"> Symbol(Symbol.isConcatSpreadable): true  </span></span><br><span class="line"><span class="comment"> __proto__: Array(0)  </span></span><br><span class="line"><span class="comment"> length: 3  </span></span><br><span class="line"><span class="comment"> __proto__: Array(0)  </span></span><br><span class="line"><span class="comment">3  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> two[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">true</span>;  </span><br><span class="line">result = one.concat(two);  </span><br><span class="line"><span class="built_in">console</span>.log(result, result.length);  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">Array(4)  </span></span><br><span class="line"><span class="comment"> 0: 11  </span></span><br><span class="line"><span class="comment"> 1: 12  </span></span><br><span class="line"><span class="comment"> 2: 21  </span></span><br><span class="line"><span class="comment"> 3: 22  </span></span><br><span class="line"><span class="comment"> length: 4  </span></span><br><span class="line"><span class="comment"> __proto__: Array(0)  </span></span><br><span class="line"><span class="comment">4  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li><p>one 배열의 [11, 12]에 concat()의 파라미터에 지정한 two 배열 [21, 22]를 결합하면,<br>21 과 22가 각각 분리되어 one 배열 끝에 추가됩니다.<br>[11, 12, 21, 22] length: 4 가 반환됩니다.<br>Array.prototype에 [Symbol.isConcatSpreadable]을 작성하지 않았으므로 디폴트 true값 입니다.<br>일반적인 concat()메서드 사용입니다.</p></li><li><p>two[Symbol.isConcatSpreadable]에 false 값을 할당했습니다.<br>concat() 메서드로 one 배열과 two 배열을 결합하면 two 배열의 [21, 22]를 분리하지 않고<br>배열 자체를 첨부합니다. [11, 12, Array[2]] 형태로 결합되어 length 값은 3을 갖습니다.<br>개발자 도구에서 Array[2]를 살펴보면 [21, 22] length: 2 가 할당되어 있고<br>Symbol(Symbol.isConcatSpreadable): true로 isConcatSpreadable = false 가 적용된 것을 볼 수 있습니다. 기본값 isConcatSpreadable = true 인 경우 프로퍼티에 나타나지 않습니다.</p></li><li><p>two[Symbol.isConcatSpreadable]에 true를 할당하였으며 디폴트 값 true와 같습니다.<br>one 배열에 two 배열의 [21, 22]가 분리되어 끝에 첨부됩니다.<br>[11, 12, 21, 22] 형태가 됩니다.</p></li></ol><h3 id="Array-like-오브젝트에서-사용"><a href="#Array-like-오브젝트에서-사용" class="headerlink" title="Array-like 오브젝트에서 사용"></a>Array-like 오브젝트에서 사용</h3><p><mark>유사 배열(Array-like) 오브젝트도 concat()을 사용할 수 있습니다. 하지만 유사 배열 오브젝트는 isConcatSpreadable = true 값을 가지지 않습니다.</mark> concat()으로 배열을 하나씩 분리하여 추가 병합하고 싶다면 isConcatSpreadable를 사용하여 true로 설정해줍니다.</p><figure class="highlight js"><figcaption><span>isConcatSpreadable > Array-like</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one = [<span class="number">11</span>, <span class="number">12</span>];  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> fiveSix = &#123;  </span><br><span class="line"> <span class="number">0</span>: <span class="string">"five"</span>,  </span><br><span class="line"> <span class="number">1</span>: <span class="string">"six"</span>,  </span><br><span class="line"> length: <span class="number">2</span>  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> result = one.concat(fiveSix);  </span><br><span class="line"><span class="built_in">console</span>.log(result, result.length);  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">Array(3)  </span></span><br><span class="line"><span class="comment"> 0: 11  </span></span><br><span class="line"><span class="comment"> 1: 12  </span></span><br><span class="line"><span class="comment"> 2: Object&#123;  </span></span><br><span class="line"><span class="comment"> 0: "five",   </span></span><br><span class="line"><span class="comment"> 1: "six",   </span></span><br><span class="line"><span class="comment"> length: 2&#125;   </span></span><br><span class="line"><span class="comment"> length: 3  </span></span><br><span class="line"><span class="comment"> __proto__: Array(0)  </span></span><br><span class="line"><span class="comment">3  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> arrayLike = &#123;  </span><br><span class="line"> [<span class="built_in">Symbol</span>.isConcatSpreadable]: <span class="literal">true</span>,  </span><br><span class="line"> <span class="number">0</span>: <span class="string">"five"</span>,  </span><br><span class="line"> <span class="number">1</span>: <span class="string">"six"</span>,  </span><br><span class="line"> length: <span class="number">2</span>  </span><br><span class="line">&#125;;  </span><br><span class="line">result = one.concat(arrayLike);  </span><br><span class="line"><span class="built_in">console</span>.log(result, result.length);  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">Array(4)  </span></span><br><span class="line"><span class="comment"> 0: 11  </span></span><br><span class="line"><span class="comment"> 1: 12  </span></span><br><span class="line"><span class="comment"> 2: "five"  </span></span><br><span class="line"><span class="comment"> 3: "six"  </span></span><br><span class="line"><span class="comment"> length: 4  </span></span><br><span class="line"><span class="comment"> __proto__: Array(0)  </span></span><br><span class="line"><span class="comment">4  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li><p>one은 배열 [11, 12]이고 fiveSix는 Array-like {0: “five”, 1” “six”, length:2}입니다.<br>이 상태에서 concat()을 실행하면 [11, 12, Object] 형태가 됩니다.<br>오브젝트 형태가 분리되어 첨부되지 않습니다.</p></li><li><p>Array-like 오브젝트에 [Symbol.isConcatSpreadable]: true를 작성하여,<br>concat()을 실행하면 Array-like 오브젝트의 각 프로퍼티를 분리하여 배열 끝에 첨부합니다.</p></li></ol><hr><h2 id="unscopable">unscopable</h2><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/with">with</a>문에서 사용하며 값이 true 이면 프로퍼티를 전개 하지 않습니다.</p><blockquote><p>[Symbol.unscopables] = true/false</p></blockquote><p>Symbol.unscopables 값이 true일 때, with 문에서 프로퍼티를 전개하지 않으므로<br>Object 오브젝트의 프로퍼티 키를 사용하면 에러가 발생합니다.</p><p>ES5 에서 “use strict” 범위에 with 문을 사용하면 에러가 발생합니다.ES6도 마찬가지 입니다. ES6에서 stirct모드는 보편적인 환경이므로 Symbol.unscopables를 사용할 빈도가 그다지 높지 않습니다.</p><figure class="highlight js"><figcaption><span>Symbol.unscopables</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// "use strict" 를 선언하면 with 에서 에러 발생  </span></span><br><span class="line"><span class="keyword">let</span> sports = &#123;  </span><br><span class="line"> soccer: <span class="string">"축구"</span>,  </span><br><span class="line"> baseball: <span class="string">"야구"</span>  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">with</span>(sports)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(soccer, baseball);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> sports[<span class="built_in">Symbol</span>.unscopables] = &#123;  </span><br><span class="line"> baseball: <span class="literal">true</span>  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line"> <span class="number">3.</span> <span class="keyword">with</span> (sports) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(soccer);  </span><br><span class="line"> <span class="keyword">let</span> value = baseball;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(e.message);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// 축구 야구  </span></span><br><span class="line"><span class="comment">// 축구  </span></span><br><span class="line"><span class="comment">// baseball is not defined</span></span><br></pre></td></tr></table></figure><ol><li><p>with 문을 실행하면 파라미터에 작성한 sports 오브젝트의 프로퍼티가 펼쳐진(spread)형태가 됩니다.<br>따라서 프로퍼티 값을 구할 때 sports[“soccer”]형태로 작성하지 않고 soccer만 작성합니다.<br>soccer의 프로퍼티 값인 “축구”가 반환되고 baseball의 프로퍼티 값도 마찬가지로 반환되어<br>“축구” “야구”가 출력됩니다.</p></li><li><p>with(sports)를 실행할 때 sports 오브젝트에서 전개하지 않을 프로퍼티를 작성합니다.<br>baseball: true를 설정해줬으므로 with 문에서 baseball 프로퍼티가 전개되지 않습니다.<br>그러므로 soccer의 프로퍼티 값인 “축구”만 출력됩니다.</p></li><li><p>with(sports) 문에서 baseball 프로퍼티가 전개되지 않으므로 baseball을 변수에 할당하면<br>에러가 발생합니다.</p></li></ol><hr><h2 id="species_개념">species 개념</h2><p>Symbol.species는 constructor를 반환합니다.<br>constructor를 반환한다는 것은 constructor로 인스턴스를 생성하여 반환하는 것과 같습니다.<br>Symbol.species를 오버라이드 할 수 있으며, 개발자 코드로 반환되는 인스턴스를 변경할 수 있습니다.</p><p>species의 개념을 살펴 봅니다.</p><figure class="highlight js"><figcaption><span>species 개념</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> arrayObj = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> sliceOne = arrayObj.slice(<span class="number">1</span>, <span class="number">3</span>);  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> sliceTwo = sliceOne.slice(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><ol><li><p>let arrayObj = [1, 2, 3]을 실행하면 Array 오브젝트(인스턴스)를 생성하고 엘리먼트 값으로<br>1, 2, 3을 설정합니다. 아래는 [1, 2, 3]이 할당된 arrayObj 인스턴스 구조입니다.</p><img src="/images/speciesArrayObj.JPG">    <p>arrayObj 구성을 보면 prototype이 없으며 &#95;&#95;proto&#95;&#95;만 있습니다.<br>&#95;&#95;proto&#95;&#95;에는 Array 오브젝트의 prototype에 연결된 프로퍼티가 첨부되어 있습니다.<br>Array의 오브젝트 프로퍼티가 연결되어 있지만 arrayObj에는 연결된 프로퍼티가 없습니다.<br>따라서 arrayObj는 Array 오브젝트가 아닌 Array 인스턴스입니다.</p></li></ol><ol start="2"><li>arrayObj.slice(1, 3) 코드는 자바스크립트에서 일반적으로 사용하는 [1, 2, 3].slice(1, 3)형태와 다릅니다.[1, 2, 3]으로 Array 인스턴스를 생성하여 arrayObj에 할당하고, arrayObj에 있는 slice()를 호출하는 형태 입니다. 실행하면 [1, 2, 3]에서 2와 3이 반환되어 sliceOne 변수에 할당될 것으로 생각할 수 있습니다.<br>하지만, sliceOne변수에 할당되는 것은 Array 인스턴스 입니다. 2 와 3이 인스턴스 값으로 설정됩니다.<br>arrayObj 와 sliceOne 둘다 Array 오브젝트 인스턴스 입니다. 배열의 엘리먼트 값이 달라집니다.</li></ol><p><strong>여기서 중요한 점은 Array 인스턴스(arrayObj)의 slice()를 호출하면 slice()실행 결과가 반영된</strong><br><strong>Array 인스턴스가 반환된다는 점입니다. Array 인스턴스가 반환되므로 sliceOne 인스턴스를 지정하여 slice()를 호출할 수 있습니다.</strong></p><ol start="3"><li>sliceOne 인스턴스를 지정하여 slice()를 호출하고 마찬가지로 Array 인스턴스가 반환됩니다.<br>Symbol.species를 이해하려면 먼저 이에 대한 이해가 필요합니다.</li></ol><hr><h2 id="species">species</h2><p>Symbol.species는 constructor를 반환합니다.</p><p>Symbol.species는 static 액세서 프로퍼티로 getter만 있고 setter는 없습니다.<br>Array, Map, Set, Promise, RegExp, ArrayBuffer, TypedArray 오브젝트에 Symbol.species가 빌트인으로 포함되어 있습니다.</p><p>위에 거론된 빌트인 오브젝트를 상속받는 클래스에 Symbol.species를 작성하면, 빌트인 오브젝트의 Symbol.species가 오버라이드됩니다. 이를 통해 클래스의 Symbol.species에서 다른 오브젝트를 반환할 수 있습니다.</p><ul><li>예를 들어 인스턴스의 slice()를 호출하면 slice()를 호출한 인스턴스를 반환하지만, 클래스에 Symbol.species를 작성하여 인스턴스가 아닌 Array 오브젝트를 반환할 수 있습니다. <strong>(인스턴스 대신 인스턴스의 부모 오브젝트 반환)</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">get</span> [Symbol.species]() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Array</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> oneInstance = <span class="keyword">new</span> ExtendArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> twoInstance = oneInstance.slice(<span class="number">1</span>, <span class="number">2</span>);  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(oneInstance <span class="keyword">instanceof</span> ExtendArray);  </span><br><span class="line">  </span><br><span class="line"><span class="number">5.</span> <span class="built_in">console</span>.log(twoInstance <span class="keyword">instanceof</span> <span class="built_in">Array</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">6.</span> <span class="built_in">console</span>.log(twoInstance <span class="keyword">instanceof</span> ExtendArray);  </span><br><span class="line"><span class="comment">//true  </span></span><br><span class="line"><span class="comment">//true  </span></span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/instanceof">instanceof 연산자</a>는 생성자의 프로토 타입 속성이 객체의 프로토 타입 체인에 나타나는지 테스트하여 true/false값을 반환합니다.</p><ol><li><p>ExtendArray 클래스에서 Array 오브젝트를 상속받습니다. 클래스에 static 메서드이면서 getter를 사용하여 Symbol.species를 작성하였습니다. Array 오브젝트의 Symbol.species가 오버라이드 됩니다.<br>인스턴스의 Array 오브젝트 메서드를 호출하면 오버라이드된 Symbol.species가 호출됩니다.<br>그리고 return Array;를 하므로 메서드를 호출한 인스턴스가 반환되지 않고 Array 인스턴스가 반환됩니다.</p><ul><li>return Array가 Array 오브젝트의 constructor를 반환하지만, return 문은 오른쪽의 표현식을 평가하고 평가 결과를 반환하므로 Array 오브젝트의 constructor를 호출하고 그 결과인 Array 인스턴스를 반환합니다.</li></ul></li><li><p>new 연산자로 ExtendArray()룰 호출하면서 파라미터로 1, 2, 3을 넘겨줬습니다.<br>ExtendArray 클래스에서 Array 오브젝트를 상속받았으므로 생성한 인스턴스는 Array 오브젝트 특성을 갖습니다.</p></li><li><p>oneInstance 인스턴스에 상속받은 Array 오브젝트가 존재하므로 slice()를 호출할 수 있습니다.<br>slice()가 호출되면 ExtendArray 클래스에 getter로 작성된 Symbol.species()가 호출되며,<br>oneInstance가 반환되지 않고 Array 인스턴스를 생성하여 반환합니다.</p></li><li><p>new ExtendArray(1, 2, 3)으로 생성한 인스턴스를 oneInstance에 할당했으므로 true가 출력됩니다.</p></li><li><p>oneInstance.sliceOne(1, 2)를 실행하면 클래스에 작성한 Symbol.species()가 호출됩니다.<br>return Array로 생성한 인스턴스를 twoInstance에 할당했으므로 true가 출력됩니다.</p></li><li><p>new ExtendArray()로 생성한 인스턴스를 twoInstance에 할당한 것이 아니라, Array 오브젝트로 생성한 인스턴스(oneInstance)를 할당했으므로 false가 출력됩니다.<br>이처럼 Symbol.species로 반환되는 인스턴스를 변경할 수 있습니다.</p></li></ol><hr><h2 id="return_other_Class">다른 Class 반환</h2><p>위 에서 return 문에서 상속받은 Array 오브젝트를 반환하는 형태를 살펴봤습니다.<br>여기서는 다른 클래스를 반환하는 형태를 살펴봅니다.</p><figure class="highlight js"><figcaption><span>other-Class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendOne</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123;  </span><br><span class="line"> showOne()&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"ExtendOne"</span>);  </span><br><span class="line">    </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">2.</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendTwo</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123;  </span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">get</span> [Symbol.species]() &#123;  </span><br><span class="line"> <span class="keyword">return</span> ExtendOne;  </span><br><span class="line"> &#125;  </span><br><span class="line"> showTwo()&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"ExtendTwo"</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> twoInst = <span class="keyword">new</span> ExtendTwo(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);  </span><br><span class="line"><span class="keyword">let</span> threeInst = twoInst.filter(<span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">10</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(threeInst);  </span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> threeInst.showOne();  </span><br><span class="line"><span class="built_in">console</span>.log(threeInst.showTwo);  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">ExtendOne(2)  </span></span><br><span class="line"><span class="comment"> 0: 20  </span></span><br><span class="line"><span class="comment"> 1: 30  </span></span><br><span class="line"><span class="comment"> length: 2  </span></span><br><span class="line"><span class="comment"> __proto__: Array  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="comment">// ExtendOne  </span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ol><li><p>ExtendOne 클래스에서 Array 오브젝트를 상속받습니다.<br>이 클래스를 아래에 작성한 2. ExtendTwo 클래스의 [Symbol.species]에서 반환합니다.</p></li><li><p>[Symbol.species] ( )에서 ExtendOne을 return 하므로 클래스를 반환하는 것처럼 보입니다만,<br>클래스의 constructor를 반환하므로 인스턴스로 생성하여 반환하게 됩니다.<br>이와 같이 [Symbol.species] ( )를 호출한 인스턴스가 아닌 다른 인스턴스로 반환할 수 있습니다.</p></li><li><p>twoInst.filter()가 호출되면, 우선 twoInst 인스턴스를 생성한 ExtendTwo 클래스에서 [Symbol.species] 작성 여부를 체크합니다. 존재하면 클래스의 [Symbol.species] ()를 호출하고 존재하지 않으면 상속받은 Array 오브젝트의 [Symbol.species] ()를 호출합니다.</p></li><li><p>호출된 [Symbol.species] ()에서 ExtendOne 인스턴스를 반환하여 ExtendTwo 클래스에서 Array 오브젝트를 상속받았으므로 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">filter()</a> 메서드를 호출할 수 있습니다.<br>ExtendOne 클래스에서 filter() 메서드를 지원하지 않는 오브젝트를 상속받으면 Error가 발생합니다.</p></li></ol><p>filter() 실행 결과 twoInst에 설정하지 않고 반환할 인스턴스에 할당합니다. 즉 threeInst 인스턴스에 할당됩니다. 따라서 twoInst 인스턴스 값 [10, 20, 30]이고 threeInst 인스턴스 값은 [20, 30]입니다.</p><ol start="5"><li>return ExtendOne으로 인해 ExtendOne 인스턴스가 threeInst에 설정되므로,<br>threeInst 인스턴스의 showOne()을 호출할 수 있습니다. showTwo는 존재하지 않으므로 undefined가 출력됩니다.</li></ol><hr><h2 id="return_null">null 반환</h2><p>[Symbol.species] ()에서 null을 반환하면 디폴트[Symbol.species] ()가 호출됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendOne</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123;  </span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">get</span> [Symbol.species]() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> oneInst = <span class="keyword">new</span> ExtendOne(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);  </span><br><span class="line"><span class="keyword">let</span> arrayInst = oneInst.filter(<span class="function"><span class="params">value</span> =&gt;</span> value &gt; <span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(arrayInst <span class="keyword">instanceof</span> <span class="built_in">Array</span>);  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(arrayInst <span class="keyword">instanceof</span> ExtendOne);  </span><br><span class="line"><span class="comment">// true  </span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol><li><p>oneInst.filter()를 호출하면 ExtendOne 클래스의 [Symbol.species] ()가 호출되며 null를 반환합니다.<br>null이 반환되면 디폴트 [Symbol.species] ()가 호출됩니다.<br>ExtendOne 클래스에 작성하지 않았지만 상속받은 Array 오브젝트에 있으므로 [Symbol.species] ()가 호출되며<br>Array 인스턴스를 생성하여 반환합니다. 따라서 filter()를 실행할 수 있습니다.</p></li><li><p>oneInst.filter()를 실행하면 [Symbol.species] ()에서 Array 인스턴스를 반환하여 arrayInst에 할당하므로 true값이 출력됩니다.</p></li><li><p>[Symbol.species] ()에서 Array 인스턴스를 반환하므로 arrayInst는 ExtendOne 클래스의 인스턴스가 아닙니다.<br>false</p></li></ol><hr><h2 id="toPrimitive">toPrimitive</h2><p>오브젝트를 프리미티브(원시값) 타입으로 변환합니다.</p><p>자바스크립트의 프리미티브 값은 number, string, boolean, undefined, null 그리고 symbol입니다.<br>+연산자는 앞뒤의 값 타입에 따라 값을 더하거나 연결합니다. (1+2)는 3이되지만 (1+”2”)는 12가 됩니다.<br>반면 곱하기(*), 나누기(/), 빼기(-)는 연산만 하고 연결은 하지 않습니다.</p><p><mark>연산 대상이 Number 타입이 아닐 경우 엔진의 ToPrimitive 모듈을 기준으로 값을 변환합니다. 예를 들어, 숫자에 true를 더하면 1로 변환하여 더하고, 문자열에 true를 더하면 “true”로 변환하여 연결합니다. 이때 Symbol.toPrimitive()로 ToPrimitive를 오버라이드하여 엔진의 변환 기준을 변경할 수 있습니다.</mark>(엔진의 디폴트 변환 값을 개발자 코드로 변경)</p><h3 id="세-가지-모드"><a href="#세-가지-모드" class="headerlink" title="세 가지 모드"></a>세 가지 모드</h3><p>Symbol.toPrimitive() 에서 값을 변환하는 기준은 이를 호출하는 형태에 따라 결정됩니다.</p><p>엔진은 호출한 곳의 형태에 따라 Symbol.toPrimitive(hint) 파라미터에 세 가지 모드(Mode)를 설정합니다.<br><del>개발자가 작성하는 것이 아니라 엔진이 다음 기준으로 설정하는 것입니다.</del></p><ol><li><p>Number 환경이면 “number”를 toPrimitive(hint) 파라미터에 설정합니다.</p></li><li><p>String 환경이면 “string”을 toPrimitive(hint) 파라미터에 설정합니다.</p></li><li><p>Number 와 String 환경이 아니면 toPrimitive(hint) 파라미터에 “default”를 설정합니다.</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;  </span><br><span class="line"> [<span class="built_in">Symbol</span>.toPrimitive](hint)&#123;  </span><br><span class="line"> <span class="keyword">if</span> (hint === <span class="string">"number"</span>)&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="number">30</span>;  </span><br><span class="line"> &#125;;  </span><br><span class="line"> <span class="keyword">if</span> (hint === <span class="string">"string"</span>)&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"문자열"</span>;  </span><br><span class="line"> &#125;;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"디폴트"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(<span class="string">"1:"</span>, <span class="number">20</span> + obj); <span class="comment">// 1: 20디폴트  </span></span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="string">"2:"</span>, <span class="number">20</span> * obj); <span class="comment">// 2: 600  </span></span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(<span class="string">"3:"</span>, obj + <span class="number">50</span>); <span class="comment">// 3: 디폴트50  </span></span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(<span class="string">"4:"</span>, +obj + <span class="number">50</span>);<span class="comment">// 4: 80  </span></span><br><span class="line"><span class="number">5.</span> <span class="built_in">console</span>.log(<span class="string">"5:"</span>, <span class="string">`<span class="subst">$&#123;obj&#125;</span>`</span> + <span class="number">123</span>); <span class="comment">// 5: 문자열123</span></span><br></pre></td></tr></table></figure><ol><li><p>(20 + obj)와 같이 오브젝트가 연산 대상이면, 자동으로 obj 오브젝트의 [Symbol.toPrimitive] ()가 호출됩니다. 파라미터에 “default”가 설정됩니다. 함수에서 “디폴트”를 반환하여 문자열을 연결하는 형태가 되어 “20디폴트”가 출력됩니다.</p></li><li><p>곱하기(*)를 사용하였으므로 파라미터에 “number”가 설정됩니다. 함수에서 30을 반환하며 20을곱해 600이 출력됩니다.</p></li><li><p>(20 + obj)에서 파라미터에 “default”가 설정되듯이 마찬가지로 “default”가 설정됩니다.<br>함수에서 “디폴트”를 반환하여 50을 연결하므로 “디폴트50”이 출력됩니다.</p></li><li><p>+obj 에서 +는 단항+연산자로 피연산자를 Number 타입으로 변환합니다.<br>함수에서 30을 반환하며 50을더해 80이 출력됩니다.</p></li><li><p>템플릿을 사용한 형태로 파라미터에 “string”이 설정됩니다. 함수에서 “문자열”을 반환하여<br>${obj}가 “문자열”로 변환됩니다. 123을 연결하여 “문자열123”이 출력됩니다.</p></li></ol><hr><h2 id="Symbol_iterator">이터레이터</h2><p>Symbol.iterator()는 이터레이터 오브젝트를 생성하여 반환합니다.</p><p>Symbol.iterator는 String, Array, Map, Set, TypedArray 오브젝트의 prototype에 연결되어 있습니다.<br>오브젝트의 [Symbol.iterator]를 호출하면 이터레이터 오브젝트를 생성하여 반환합니다.</p><p>Object 오브젝트에는 Symbol.iterator가 없습니다만, 개발자 코드로 구현할 수 있습니다.</p><h3 id="Array-prototype-Symbol-iterator"><a href="#Array-prototype-Symbol-iterator" class="headerlink" title="Array.prototype[Symbol.iterator]"></a>Array.prototype[Symbol.iterator]</h3><p>배열 처리를 위한 이터레이터 오브젝트를 생성하여 반환합니다. 배열 엘리먼트를 하나씩 처리할 수 있습니다.</p><figure class="highlight js"><figcaption><span>iterator-Array</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numberArray = [<span class="number">10</span>, <span class="number">20</span>];  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> numberArray)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(value);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> iteratorObj = numberArray[<span class="built_in">Symbol</span>.iterator]();  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="comment">//10  </span></span><br><span class="line"><span class="comment">//20  </span></span><br><span class="line"><span class="comment">/*Object  </span></span><br><span class="line"><span class="comment"> value: 10  </span></span><br><span class="line"><span class="comment"> done: false  </span></span><br><span class="line"><span class="comment"> __proto__: Object*/</span>  </span><br><span class="line"><span class="comment">/*Object  </span></span><br><span class="line"><span class="comment"> value: 20  </span></span><br><span class="line"><span class="comment"> done: false  </span></span><br><span class="line"><span class="comment"> __proto__: Object*/</span>  </span><br><span class="line"><span class="comment">/*Object  </span></span><br><span class="line"><span class="comment"> value: undefined  </span></span><br><span class="line"><span class="comment"> done: true  </span></span><br><span class="line"><span class="comment"> __proto__: Object*/</span></span><br></pre></td></tr></table></figure><ul><li><p>numberArray는 Array 오브젝트 인스턴스 구조입니다.<br>Symbol.iterator()를 호출할 수 있습니다.</p></li><li><p>numberArray[Symbol.iterator] ()는 numberArray 인스턴스의 Symbol.iterator()를 호출하는 것으로 이터레이터 오브젝트를 생성하여 반환합니다. 이터레이터 오브젝트를 사용하여 배열 엘리먼트를 하나씩 처리할 수 있습니다.</p></li><li><p>next()를 호출할 때마다 배열 엘리먼트 값을 {value: 10, done:false} 형태로 반환합니다.</p></li></ul><h3 id="String-prototype-Symbol-iterator"><a href="#String-prototype-Symbol-iterator" class="headerlink" title="String.prototype[Symbol.iterator]"></a>String.prototype[Symbol.iterator]</h3><p>문자열 처리를 위한 이터레이터 오브젝트를 반환합니다.</p><p>문자열을 문자 단위로 하나씩 처리할 수 있습니다.</p><figure class="highlight js"><figcaption><span>iterator-string</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">"1A"</span>;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> stringValue) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(value);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> iterObj = stringValue[<span class="built_in">Symbol</span>.iterator]();  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(iterObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(iterObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(iterObj.next());  </span><br><span class="line"><span class="comment">// 1  </span></span><br><span class="line"><span class="comment">// A  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// Object &#123;value: "1", done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: "A", done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>“1A”를 1과 A로 분리하여 for-of문을 실행합니다. 문자 단위로 반복할 수 있는 것은<br>String.prototype에 Symbol.iterator가 있기 때문입니다.<br>for-of문에서 stringValue를 String 오브젝트로 생성하고 그 안에 Symbol.iterator()를 사용합니다.</p></li><li><p>stringValue[Symbol.iterator] ();형태로 호출하면 이터레이터 오브젝트를 반환합니다.<br>이터레이터 오브젝트를 사용하여 문자열을 문자 단위로 하나씩 처리할 수 있습니다.</p></li><li><p>next()를 호출할 때마다 문자열의 문자를 value 프로퍼티에 설정하고 {value: “1”, done: false}형태로 반환합니다.</p></li></ul><h3 id="Object-이터레이션"><a href="#Object-이터레이션" class="headerlink" title="Object 이터레이션"></a>Object 이터레이션</h3><p>Object 오브젝트에는 기본적으로 Symbol.iterator를 갖고 있지 않습니다. (for-of 등 반복처리불가.)</p><p><mark>Object 오브젝트에 Symbol.iterator를 작성하면 반복 처리를 할 수 있습니다.</mark></p><figure class="highlight js"><figcaption><span>iterator-Object</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> obj = &#123;  </span><br><span class="line"> [<span class="built_in">Symbol</span>.iterator]()&#123;  </span><br><span class="line">    <span class="number">2.</span> <span class="keyword">return</span> &#123;  </span><br><span class="line">        maxCount: <span class="number">2</span>,  </span><br><span class="line">        count: <span class="number">0</span>,  </span><br><span class="line">        next()&#123;   </span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.count &lt; <span class="keyword">this</span>.maxCount)&#123;  </span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="keyword">this</span>.count++, <span class="attr">done</span>: <span class="literal">false</span>&#125;;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> iteratorObj = obj[<span class="built_in">Symbol</span>.iterator]();  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br></pre></td></tr></table></figure><ol><li><p>Object 오브젝트를 반복처리 하기 위해서 [Symbol.iterator] ()를 obj prototype에 작성해줬습니다.</p></li><li><p>호출된 obj[Symbol.iterator] ()의 return으로 반환된 오브젝트를 iteratorObj에 할당합니다.</p></li><li><p>iteratorObj에 next()가 있으므로 iteratorObj.next() 형태로 호출할 수 있습니다.</p></li></ol><hr><h2 id="Symbol_generator">제너레이터</h2><p>Object 오브젝트에 Symbol.iterator를 제너레이터 함수로 작성하면, 이터레이터로 반복할 때 마다 yield를 수행합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">yield</span> <span class="number">10</span>;  </span><br><span class="line"> <span class="keyword">yield</span> <span class="number">20</span>;  </span><br><span class="line"> <span class="keyword">yield</span> <span class="number">30</span>;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> result = [...obj];  </span><br><span class="line"><span class="built_in">console</span>.log(result);  </span><br><span class="line"><span class="comment">//[10, 20, 30]</span></span><br></pre></td></tr></table></figure><ol><li><p>obj 오브젝트의 [Symbol.iterator]를 제너레이터 함수로 작성하였습니다.<br>이터레이터로 반복할 때 마다 yield 표현식을 평가하여 값을 반환합니다.</p></li><li><p>대괄호 [] 안에 spread 연산자로 obj 오브젝트를 작성했습니다. […obj]를 시작하면<br>엔진에서 obj에 [Symbol.iterator] 작성 여부를 체크합니다. 작성되있으므로<br>[Symbol.iterator] ()가 호출되며 이터레이터 오브젝트를 생성하여 반환합니다.<br>이터레이터가 반복될 때마다 yield에서 반환한 값을 배열에 첨부합니다.<br>반복이 끝나면 생성된 배열을 반환합니다.</p></li></ol><hr><h2 id="Symbol_asyncIterator">asyncIterator(): 비동기 반복</h2><p>Symbol.asyncIterator는 오브젝트의 asyncIterator 기본 값을 지정합니다.<br>asyncIterator 프로퍼티가 오브젝트에 설정되면 await for of 루프(loop)에서 비동기 반복할 수 있습니다.</p><p>오브젝트가 비동기 반복이 가능하려면 Symbol.asyncIterator 프로퍼티 키가 존재해야합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAsyncIterable = &#123;  </span><br><span class="line">    <span class="keyword">async</span>* [<span class="built_in">Symbol</span>.asyncIterator]() &#123;  </span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"hello"</span>;  </span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"async"</span>;  </span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"iteration!"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;  </span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> x <span class="keyword">of</span> myAsyncIterable) &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(x);  </span><br><span class="line">        <span class="comment">// "hello"  </span></span><br><span class="line">        <span class="comment">// "async"  </span></span><br><span class="line">        <span class="comment">// "iteration!"  </span></span><br><span class="line"> &#125;  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>오브젝트의 [Symbol.asyncIterator] 속성을 설정해줌으로써 비동기 이터러블을 커스텀하여 정의할 수 있습니다.</li></ul><p><mark>현재 기본적으로 [Symbol.asyncIterator] 프로퍼티가 built-in 되어 있는 JavaScript 오브젝트는 없습니다.</mark></p><p>하지만 WHATWG(Web Hypertext Application Technology Working Group, WHATWG)에서는<br>최근에 [Symbol.asyncIterator]가 스펙에 기준에 도달함으로써 비동기 반복이 가능한 첫 번째 built-in 오브젝트로 설정되었습니다.</p><p><a href="https://ko.wikipedia.org/wiki/WHATWG">WHATWG 위키</a><br><a href="https://whatwg.org/">WHATWG 공식홈페이지</a></p><hr><h2 id="Symbol_match">match(): match 결과 반환</h2><p>String 오브젝트에서 정규 표현식을 사용할 수 있는 메서드<br>match(), replace(), search(), split() 에 대응하는</p><p>Symbol 오브젝트 Symbol.match(), Symbol.replace(), Symbol.search(), Symbol.split()이 있습니다.</p><ul><li>String.prototype.match()가 호출되면 먼저 오브젝트에서 Symbol.match 작성 여부를 체크합니다.<br>작성돼있다면 오브젝트의 Symbol.match()를 호출합니다. String.prototype.match()는 호출되지 않습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(<span class="string">"1"</span>, <span class="string">"Sports"</span>.match(<span class="regexp">/s/</span>));  </span><br><span class="line"><span class="comment">// 1: [0: "5", index: 5, input: "Sports"]  </span></span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MatchCheck</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">constructor</span>(base) &#123;  </span><br><span class="line"> <span class="keyword">this</span>.base = base;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="number">2.</span> [<span class="built_in">Symbol</span>.match](target) &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.base.indexOf(target) &gt;= <span class="number">0</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> instMatch = <span class="keyword">new</span> MatchCheck(<span class="string">"sports"</span>);  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(<span class="string">"2:"</span>, <span class="string">"po"</span>.match(instMatch));  </span><br><span class="line"><span class="comment">// 2: true</span></span><br></pre></td></tr></table></figure><ol><li><p>“Sports”에 패턴/s/를 매치하면 매치 결과를 배열로 반환합니다. “Sports”가 문자열이므로<br>엔진이 String.prototype에 연결된 프로퍼티로 String 인스턴스를 생성합니다.<br>생성한 인스턴스에 “Sports”를 설정한 후 match()를 호출하면서 /s/를 파라미터로 넘겨줍니다.</p></li><li><p>Symbol.match()의 target 파라미터에 설정된 문자열이 this.base에 포함되어 있으면 true를 반환하고, 아니면 false를 반환합니다.</p></li><li><p>new MatchCheck(“sports”);를 실행하면 constructor가 호출되고 파라미터로 넘겨 준 “sports”가 this.base에 설정됩니다.</p></li><li><p>“po”.match(instMatch)가 호출되면 파라미터에 작성한 instMatch 인스턴스에서 Symbol.match의 작성 여부를 체크합니다. 존재하므로 Symbol.match(target)을 호출하면서 “po”를 파라미터 값으로 넘겨줍니다.<br>Symbol.match()에서 “sports” 와 “po”로 match를 행하며, “po”가 있으므로 true를 반환합니다.</p></li></ol><h2 id="Symbol_matchAll">matchAll()</h2><p>Symbol.matchAll 은 String 오브젝트를 정규표현식으로 평가하여<br>반환결과를 이터레이터 오브젝트로 반환합니다.</p><p>Symbol.matchAll은 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll">String.prototype.matchAll()</a>메서드에 의해 호출 됩니다.</p><p>+참고 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll">RegExp.prototype[@@matchAll] ( )</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/[0-9]+/g</span>;  </span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'2016-01-02|2019-03-07'</span>;  </span><br><span class="line"><span class="keyword">let</span> result = re[<span class="built_in">Symbol</span>.matchAll](str);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(result, x =&gt; x[<span class="number">0</span>]));  </span><br><span class="line"><span class="comment">// expected output: Array ["2016", "01", "02", "2019", "03", "07"]</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/06/Symbol%20%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Symbol 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/04/06/Symbol%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/04/06/Symbol%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</guid>
      <pubDate>Mon, 06 Apr 2020 01:35:07 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;Symbol Object&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#primitive&quot;&gt;primitive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#Symbol_값_생성&quot;&gt;Symbol()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#Symbol_값_변경&quot;&gt;Symbol 값 변경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#Symbol_Object&quot;&gt;Symbol 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#Object_Symbol&quot;&gt;오브젝트에서 Symbol 사용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#Symbol_ex&quot;&gt;Symbol 사용 형태&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>Symbol Object<ul><li><a href="/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#primitive">primitive</a></li><li><a href="/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#Symbol_값_생성">Symbol()</a></li><li><a href="/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#Symbol_값_변경">Symbol 값 변경</a></li><li><a href="/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#Symbol_Object">Symbol 오브젝트 생성</a></li><li><a href="/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#Object_Symbol">오브젝트에서 Symbol 사용</a></li><li><a href="/2020/04/06/Symbol%20오브젝트%20-ECMAScript/#Symbol_ex">Symbol 사용 형태</a></li></ul></li></ul><a id="more"></a><hr><h2 id="primitive">primitive</h2><p>자바스크립트에 프리미티브(primitive) 개념이 있습니다. 이는 오브젝트가 아닌 값 입니다.<br>ES5에 string, number, boolean, null, undefined가 있으며<br>ES6에 Symbol이 추가되었습니다.</p><p>(var num = 123;)을 실행하면 num에 123이 할당됩니다.<br>123은 number 타입의 프리미티브 값입니다.</p><p>string, number, boolean 은 래퍼(Wrapper) 오브젝트가 있습니다.<br>각각 String, Number, Boolean 오브젝트가 래퍼 오브젝트 입니다.<br>ES6에서 symbol의 Symbol 오브젝트가 추가되었습니다.<br>undefined, null은 래퍼 오브젝트가 없습니다.</p><p><strong>valueOf()로 래퍼 오브젝트의 프리미티브 값을 구할 수 있습니다.</strong><br><strong>단, Symbol은 값을 반환하지 않습니다.</strong></p><hr><h2 id="Symbol_값_생성">Symbol()</h2><blockquote><p>let sym = Symbol();</p></blockquote><p>형태로 작성하며 Symbol 값을 생성하여 sym에 할당합니다.</p><p>new 연산자는 사용할 수 없습니다.</p><p><strong>Symbol()로 생성된 값은 프로그램 전체를 통해 유일하며 값을 변경할 수 없습니다.</strong></p><p>생성한 Symbol에 프로퍼티를 설정할 수 없으며 strict mode에서 TypeError가 발생합니다.</p><p>Symbol()로 반환된 값이 오브젝트가 아니므로 오브젝트를 생성한다고 할 수 없습니다.<br>Symbol을 생성한다는 것은 뉘앙스에 차이가 있습니다. Symbol 값을 생성한다는 표현이 적절합니다.</p><p>Symbol은 String””, Array[], Object{}, Boolean(true/false)와 같이 오브젝트를<br>생성하는 리터럴이 없습니다. undefined, null과 같이 그 자체가 값이 되는 것도 아닙니다.</p><p>Symbol()과 같이 함수로 호출해야 값을 생성하며 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>();  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1:"</span>, sym);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2:"</span>, <span class="keyword">typeof</span> sym);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"3:"</span>, <span class="built_in">Symbol</span>(<span class="string">"주석"</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"4:"</span>, sym == <span class="built_in">Symbol</span>());  </span><br><span class="line"><span class="comment">// 1: Symbol()  </span></span><br><span class="line"><span class="comment">// 2: symbol  </span></span><br><span class="line"><span class="comment">// 3: Symbol(주석)  </span></span><br><span class="line"><span class="comment">// 4: false</span></span><br></pre></td></tr></table></figure><ul><li>Symbol()을 호출하면 Symbol 값을 생성하여 반환합니다.<br>생성한 값은 변경할 수 없으므로 const 변수에 할당해도 됩니다.</li></ul><ol><li><p>Symbol()로 값을 생성했는데 값이 출력되지 않고 실행 결과 Symbol()이 출력됩니다.<br>Symbol 값을 구하면 Symbol()로 생성한 값을 반환하지 않고,<br><strong>Symbol값을 생성했던 형태를 반환합니다. 브라우저 개발자 도구에서도 값을 볼 수 없습니다.</strong><br><strong>이것이 Symbol의 특징입니다.</strong></p></li><li><p>Symbol()로 생성한 값의 typeof는 symbol 입니다.</p></li><li><p>Symbol()의 파라미터는 선택사항으로 Symbol()로 생성한 값의 설명이나 주석을 문자열로 작성합니다. Symbol 값을 생성하는데 영향을 미치지 않습니다. Symbol 값을 외부에 제공하지 않으므로 디버깅할 때 유용합니다.<br>파라미터를 작성하지 않으면 undefined로 인식합니다. Symbol(“주석”)형태로 반환됩니다.</p></li><li><p><mark>앞에서 Symbol()로 생성한 값(sym)과 다시 Symbol()로 생성한 값을 비교하면<br>false가 반환됩니다.Symbol()을 실행할 때마다 프로그램 전체를 통해 유일한 값을<br>생성하므로 값이 같을 수 없습니다. 이것이 Symbol의 특징입니다.</mark></p></li></ol><hr><h2 id="Symbol_값_변경">Symbol 값 변경</h2><p>Symbol()로 생성한 Symbol 값을 변경할 수 없습니다. Symbol 값에 문자열을 연결할 수 있으나<br>String() 또는 toString()을 사용해야 합니다. 이 형태는 Symbol 값이 연결되는 것은 아니며<br>Symbol 값을 생성할 때의 형태를 연결합니다.</p><p>Symbol 값을 템플릿에 사용할 수 없고, + 연산자로 문자열을 연결하면 에러가 발생합니다.</p><figure class="highlight js"><figcaption><span>Symbol +연산자, or연산자 사용불가</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line"> +sym;  </span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"+sym 사용 불가"</span>);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line"> sym | <span class="number">0</span>;  </span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"sym | 0 사용 불가"</span>);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// +sym 사용 불가  </span></span><br><span class="line"><span class="comment">// sym | 사용 불가</span></span><br></pre></td></tr></table></figure><ul><li>단항 + 연산자를 사용하여 Number 타입으로 변환하면 에러가 발생합니다.<br>Symbol과 비트 or 연산자를 함께 사용하면 에러가 발생합니다.</li></ul><figure class="highlight js"><figcaption><span>Symbol 문자열 연결</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line"> sym + <span class="string">"문자열"</span>;  </span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line"> <span class="number">1.</span> <span class="built_in">console</span>.log(<span class="string">"문자열 연결 불가"</span>);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="built_in">String</span>(sym) + <span class="string">"연결"</span>);  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(sym.toString() + <span class="string">"연결"</span>);  </span><br><span class="line"><span class="comment">// 문자열 연결 불가  </span></span><br><span class="line"><span class="comment">// Symbol() 연결  </span></span><br><span class="line"><span class="comment">// Symbol() 연결</span></span><br></pre></td></tr></table></figure><ol><li><p>Symbol()로 생성한 값에 + 연산자로 문자열을 연결하면 에러가 발생합니다.</p></li><li><p>String(sym) 으로 Symbol을 문자열로 변환하면 문자열을 연결할 수 있습니다.<br>Symbol 값이 문자열로 연결되지는 않고 Symbol 값을 생성한 형태인<br>“Symbol()”이 연결됩니다. “Symbol() 연결”이 출력됩니다.</p></li><li><p>toString()으로 Symbol()을 문자열로 변환하면 문자열을 연결할 수 있습니다.<br>String()과 마찬가지로 Symbol()을 생성한 형태가 문자열에 연결됩니다.</p></li></ol><figure class="highlight js"><figcaption><span>Symbol 템블릿</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym =<span class="built_in">Symbol</span>(<span class="string">"123"</span>);  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line"> <span class="string">`<span class="subst">$&#123;sym&#125;</span>`</span>;  </span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"`$&#123;sym&#125; 불가`"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// `$&#123;sym&#125; 불가`</span></span><br></pre></td></tr></table></figure><p><strong>템블릿에서 Symbol 값을 사용하면 에러가 발생합니다.</strong><br>Symbol 값이 템플릿에 반영되면 문자열 값으로 변환되어 외부에 노출되기 때문입니다.<br>(Symbol 값을 생성한 형태도 반영되지 않습니다. Symbol 값을 외부에 노출시키지 않는 것이 Symbol의 특징입니다.)</p><hr><h2 id="Symbol_Object">Symbol 오브젝트 생성</h2><p>Object()에 Object(123)처럼 파라미터 값 123을 작성하면 Number 오브젝트를 반환합니다.<br>마찬가지로 Object()의 파라미터에 Symbol 값일 작성하면 Symbol 오브젝트를 반환합니다.</p><ul><li>Symbol 오브젝트에<ul><li>Symbol 메서드,</li><li>Symbol.prototype,</li><li>prototype에 연결된 프로퍼티가 설정됩니다.</li></ul></li></ul><figure class="highlight js"><figcaption><span>Symbol Object</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">"123"</span>);  </span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>(sym);  </span><br><span class="line"><span class="built_in">console</span>.log(obj);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(obj == sym);  </span><br><span class="line"><span class="built_in">console</span>.log(obj === sym);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* Symbol  </span></span><br><span class="line"><span class="comment">description: (...)  </span></span><br><span class="line"><span class="comment">&gt;__proto__: Symbol  </span></span><br><span class="line"><span class="comment">[[PrimitiveValue]]: Symbol(123)  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// true  </span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol><li><p>Symbol(“123”)으로 Symbol 값을 생성하고 이를 Object(sym) 파라미터에 지정합니다.<br>Symbol 오브젝트를 생성하여 반환하게 됩니다. 다음은 생성한 Symbol 오브젝트 구성 입니다.</p><img src="/images/SymbolObj.JPG"><ol><li><p>Symbol.prototype에 연결된 프로퍼티가 &#95;&#95;proto&#95;&#95;에 첨부됩니다.<br>이를 통해 Symbol.prototype의 메서드와 프로퍼티를 확인할 수 있습니다.</p></li><li><p>[[PrimitiveValue]]에 Symbol 값을 생성한 형태인 Symbol(“123”)이 설정됩니다.<br><del>Symbol 값이 설정되지 않고 값을 생성한 형태가 설정됩니다.</del><br>&#95;&#95;proto&#95;&#95;에 있는 valueOf()로 [[PrimitiveValue]]에 설정된 값을 반환받을 수 있습니다.</p></li></ol></li></ol><ol start="2"><li>Symbol(“123”)으로 생성한 값 sym 과 Object()의 파라미터에 지정하여 생성한 obj를 비교하면 true를 반환합니다. === 연산자로 타입까지 비교하면 false를 반환합니다. 값은 [[PrimitiveValue]] 값으로 비교하여 true를 반환하지만 타입은 Symbol 과 Object 의 타입이 비교되기 때문입니다.</li></ol><hr><h2 id="Object_Symbol">오브젝트에서 Symbol 사용</h2><p>프로그램에서 유일한 값을 갖은 Symbol의 특징을 이용하여<br>Symbol 값을 오브젝트의 프로퍼티 키로 사용하면 프로퍼티 키가 중복되지 않습니다.</p><ul><li><p>[Symbol()]<br>형태와 같이 대괄호[] 안에 Symbol()을 작성합니다.</p></li><li><p>{ [Symbol()]: 123}<br>프로퍼티 키에 작성한 Symbol()을 symbol-keyed property라고 합니다.<br>Symbol 값은 문자열이 아니며 값이기 때문에 []안에 {“Symbol”} 형태로 작성하지 않고<br>{Symbol} 형태로 작성합니다. 이 형태를 symbol-keyed property 라고 하는 것입니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">"123"</span>);  </span><br><span class="line"><span class="keyword">let</span> obj = &#123;[sym]: <span class="string">"456"</span>&#125;;  </span><br><span class="line"><span class="comment">// Symbol("123")을 변수에 할당하고 []안에 변수 이름을 작성하여  </span></span><br><span class="line"><span class="comment">// Object 의 프로퍼티 키로 사용  </span></span><br><span class="line"><span class="built_in">console</span>.log(obj);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 프로퍼티 키에 해당하는 값 출력  </span></span><br><span class="line"><span class="built_in">console</span>.log(obj[sym]);  </span><br><span class="line"><span class="built_in">console</span>.log(obj.sym);  </span><br><span class="line"><span class="comment">// 대괄호[]를 사용하지 않고 작성하면 에러가 발생하지 않고  </span></span><br><span class="line"><span class="comment">// undefined가 반환됨.  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">/* Object  </span></span><br><span class="line"><span class="comment">Symbol(123): "456"  </span></span><br><span class="line"><span class="comment">&gt;__proto__: Object  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 456  </span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h2 id="Symbol_ex">Symbol 사용 형태</h2><p>fon-in 문에서 symbol-keyed 프로퍼티가 열거되지 않습니다.<br><strong>Symbol 이 [[ Enumberable]]: false 이기 때문입니다.</strong></p><p>Symbol-keyed 프로퍼티를 열거 하려면 Object.getOwnPropertySymbols()를 사용해야 합니다.</p><h3 id="클래스-메서드-이름으로-Symbol-사용"><a href="#클래스-메서드-이름으로-Symbol-사용" class="headerlink" title="클래스 메서드 이름으로 Symbol 사용"></a>클래스 메서드 이름으로 Symbol 사용</h3><figure class="highlight js"><figcaption><span>method-name</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbolOne = <span class="built_in">Symbol</span>(<span class="string">"symbol one"</span>);  </span><br><span class="line"><span class="keyword">const</span> symbolTwo = <span class="built_in">Symbol</span>(<span class="string">"symbol two"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> <span class="number">1.</span> <span class="keyword">static</span> [symbolOne]() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"Symbol-1"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="number">2.</span> [symbolTwo]()&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"Symbol-2"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(Sports[symbolOne]());  </span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> <span class="keyword">let</span> obj = <span class="keyword">new</span> Sports();  </span><br><span class="line"><span class="built_in">console</span>.log(obj[symbolTwo]());  </span><br><span class="line"><span class="comment">// Symbol-1  </span></span><br><span class="line"><span class="comment">// Symbol-2</span></span><br></pre></td></tr></table></figure><ol><li><p>Symbol(“symbol one”)으로 생성한 값을 static 메서드 이름으로 사용한 형태입니다.<br>대괄호 []안에 Symbol 값을 할당한 변수 이름을 작성하고 이어서 소괄호()를 작성합니다.</p></li><li><p>Symbol(“symbol two”)로 생성한 값을 메서드 이름으로 사용한 형태입니다.<br>static 키워드를 작성하지 않았으므로 Sports.prototype에 symbolTwo{}가 연결됩니다.</p></li><li><p>symbolOne은 static 메서드 입니다. 클래스 이름에 이어 대괄호[]안에 메서드 이름을 작성하고 소괄호()를 작성하면 메서드가 호출됩니다.</p></li><li><p>symbolTwo{}가 Sports.prototype에 연결되어 있으므로 호출하기 위해 인스턴스를 생성합니다. 인스턴스에 이어 대괄호[]안에 메서드 이름을 작성하고 소괄호()를 작성하면 메서드로 호출됩니다.</p></li></ol><h3 id="JSON-stringify-에서-Symbol-사용"><a href="#JSON-stringify-에서-Symbol-사용" class="headerlink" title="JSON.stringify()에서 Symbol 사용"></a>JSON.stringify()에서 Symbol 사용</h3><p>JSON.stringify()는 Object 오브젝트의 프로퍼티를 {“key”: “value”}형태로 변환합니다.<br>key는 문자열로 변환되고 value는 타입에 따라 문자열로 변환되지 않을 수도 있습니다.<br>클라이언트에서 서버로 데이터를 JSON형태로 전송할 때 사용합니다.</p><p>Symbol 값은 외부에 노출되지 않도록 조치 되어 있기 때문에 {[sym]: “값”}과 같이<br>Symbol 값을 프로퍼티로 작성하여 JSON.stringify()를 실행하면 프로퍼티 키와 프로퍼티 값이<br>문자열로 변환되지 않고 빈 Object {}가 반환됩니다.</p><p><mark>이를 위한 대처방법으로 Object.getOwnPropertySymbols()를 사용하는 방법이 있습니다.</mark></p>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/06/Symbol%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Class 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/04/01/Class%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/04/01/Class%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</guid>
      <pubDate>Wed, 01 Apr 2020 00:45:41 GMT</pubDate>
      <description>
      
        &lt;p&gt;Class(클래스)를 완전하게 이해하려면 객체지항 프로그래밍(OOP:Object Oriented Programming)에 대한 이해가 필요합니다.&lt;/p&gt;
&lt;p&gt;OOP만 다루는 책이 있을 정도로 범위가 넓고 깊으므로&lt;br&gt;OOP는 나중에 자세히 다루고 ES6기준으로 살펴봅니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Class 오브젝트&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#Class_선언문&quot;&gt;Class 선언문&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#Class_표현식&quot;&gt;Class 표현식&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#클래스_특징&quot;&gt;Class 특징&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;strict 모드에서 실행&lt;/li&gt;
&lt;li&gt;클래스에 메서드 작성 방법&lt;/li&gt;
&lt;li&gt;prototype에 프로퍼티 연결&lt;/li&gt;
&lt;li&gt;prototype에 프로퍼티 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#constructor&quot;&gt;constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#constructor_return&quot;&gt;constructor 반환 값 변경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#getter_and_setter&quot;&gt;getter, setter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#상속&quot;&gt;상속&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#extends&quot;&gt;extends 키워드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#super&quot;&gt;super 키워드&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;메서드 오버라이딩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#builtin&quot;&gt;빌트인 오브젝트 상속&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#Object_super&quot;&gt;Object에서 super 사용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#static&quot;&gt;static 키워드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#Class_Hoisting&quot;&gt;Class 호이스팅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#computed_name&quot;&gt;computed name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#this&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#generator&quot;&gt;제너레이터&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#new_target&quot;&gt;new.target&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;name 프로퍼티&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/04/01/Class%20오브젝트%20-ECMAScript/#Image_Object&quot;&gt;오브젝트 상속&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Class(클래스)를 완전하게 이해하려면 객체지항 프로그래밍(OOP:Object Oriented Programming)에 대한 이해가 필요합니다.</p><p>OOP만 다루는 책이 있을 정도로 범위가 넓고 깊으므로<br>OOP는 나중에 자세히 다루고 ES6기준으로 살펴봅니다.</p><ul><li>Class 오브젝트<ul><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#Class_선언문">Class 선언문</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#Class_표현식">Class 표현식</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#클래스_특징">Class 특징</a><ul><li>strict 모드에서 실행</li><li>클래스에 메서드 작성 방법</li><li>prototype에 프로퍼티 연결</li><li>prototype에 프로퍼티 추가</li></ul></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#constructor">constructor</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#constructor_return">constructor 반환 값 변경</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#getter_and_setter">getter, setter</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#상속">상속</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#extends">extends 키워드</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#super">super 키워드</a><ul><li>메서드 오버라이딩</li></ul></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#builtin">빌트인 오브젝트 상속</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#Object_super">Object에서 super 사용</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#static">static 키워드</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#Class_Hoisting">Class 호이스팅</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#computed_name">computed name</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#this">this</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#generator">제너레이터</a></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#new_target">new.target</a><ul><li>name 프로퍼티</li></ul></li><li><a href="/2020/04/01/Class%20오브젝트%20-ECMAScript/#Image_Object">오브젝트 상속</a></li></ul></li></ul><a id="more"></a><hr><h2 id="Class_선언문">Class 선언문</h2><blockquote><p>Class name {}<br>Class name extends super_name {}</p></blockquote><p>엔진이 function 키워드를 만나면 Function 오브젝트를 생성하듯이<br>class 키워드를 만나면 Class 오브젝트를 생성합니다.<br>Class 오브젝트는 Function 오브젝트, String 오브젝트와 같이 하나의 오트젝트 타입입니다.</p><ul><li>name에 클래스 이름을 작성합니다.<br>name 다음의 extends는 키워드로 super_name(슈퍼 클래스)를 상속받을 때 사용합니다. 이 형태를 클래스 선언문 이라고 합니다.</li></ul><p>class는 클래스를 선언하는 키워드이고<br>엔진이 class 키워드로 생성한 오브젝트는 Class 오브젝트 입니다.<br>문맥에 따라 Class 오브젝트를 class라고 말하기도 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;  </span><br><span class="line"> getName() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"이름"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> obj = <span class="keyword">new</span> Member();  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(obj.getName());  </span><br><span class="line"><span class="comment">// 이름</span></span><br></pre></td></tr></table></figure><ul><li>class 키워드를 작성하고 이어서 클래스 이름을 작성합니다. 그리고 블록{}을 작성하고 블록에 클래스 코드를 작성합니다.<br>엔진이 class 키워드를 만나면 클래스(Class) 오브젝트를 생성합니다.</li></ul><ol><li><p>new 연산자로 Member()를 호출하면 인스턴스를 생성하여 반환합니다.</p><p><mark>function name(){}는 new 연산자로 인스턴스를 생성하지 않고<br>name()형태로 호출할 수 있지만,<br>클래스는 new 연산자로 인스턴스 생성없이 name()형태로 호출할 수 없으며<br>TypeError가 발생합니다.</mark></p></li><li><p>obj는 인스턴스이고 getName()은 class Member{}안에 작성한 메서드 입니다.<br>이와 같이 new 연산자로 생성한 인스턴스를 사용하여 클래스에 작성한 메서드를 호출할 수 있습니다. 실행 결과 “이름”이 출력됩니다.</p></li></ol><ul><li><p>참고</p><blockquote><p>new 연산자로 인스턴스를 생성하는 함수는 함수 이름의 첫 문자를 대문자로 작성합니다. 클래스 또한 new 연산자로 인스턴스를 생성하므로 클래스 이름의 첫 문자를 대문자로 사용합니다. 이는 스펙에 정의된 것은 아니며 자바스크립트 개발자들 사이의 관례입니다. 개발자가 코드의 대문자를 보고 인스턴스를 생성한다는 것을 알 수 있으므로 지키는 것이 좋습니다. 빌트인 Number 오브젝트, String 오브젝트도 이와 같은 맥락입니다.</p></blockquote></li></ul><ul><li><p>같은 클래스를 두 번 선언하려고 시도할 때<br>클래스 선언문으로 같은 클래스를 두 번 선언하면 오류가 발생합니다.</p><blockquote><p>class Foo {};<br>class Foo {}; // Uncaught SyntaxError: Identifier ‘Foo’ has already been declared</p></blockquote></li></ul><ul><li><p>이전에 표현식으로 정의한 경우에도 오류가 발생합니다.</p><blockquote><p>var Foo = class {};<br>class Foo {}; // Uncaught TypeError: Identifier ‘Foo’ has already been declared</p></blockquote></li></ul><hr><h2 id="Class_표현식">Class 표현식</h2><p>클래스 표현식으로 클래스를 선언합니다.</p><blockquote><p>let name = class {}<br>let name = class inner_name {}<br>let name = class extends super_name {}<br>let name = class inner_name extends super_name {}</p></blockquote><p>할당 연산자 (=) 왼쪽에 클래스 이름을 작성하고 오른쪽에 class 키워드를 작성하고 블록{}안에 클래스 코드를 작성합니다. 이를 클래스 표현식이라고 합니다.</p><p>Class 표현식은 이름을 가질 수도 있고, 갖지 않을 수도 있습니다. 이름을 가진 class 표현식의 이름은 클래스의 body에 대해 local scope에 한해 유효합니다.</p><p>4번째 구문 class 와 extends 키워드 사이의 inner_name은 클래스 안에서 자신을 호출할 때 사용합니다. <del>function 키워드 함수에서도 inner_name을 작성할 수 있지만 사용하지 않듯 클래스도 사용하지 않습니다.</del></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Member = <span class="class"><span class="keyword">class</span> </span>&#123;  </span><br><span class="line"> getName() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"이름"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Member();  </span><br><span class="line"><span class="built_in">console</span>.log(obj.getName());</span><br></pre></td></tr></table></figure><p>엔진이 클래스 키워드를 만나면 클래스 오브젝트를 생성하여 Member 변수에 할당합니다.</p><hr><h2 id="클래스_특징">클래스 특징</h2><p>Class는 사실 함수입니다. 함수를 함수 표현식과 함수 선언으로 정의할 수 있듯이 class 문법도 class 표현식과 class 선언 두 가지 방법을 제공합니다.</p><ol><li><p>strict 모드에서 실행</p><p><strong>“use static”을 선언하지 않아도 클래스의 코드는 static 모드에서 실행됩니다.</strong></p></li></ol><ol start="2"><li><p>클래스에 메서드 작성 방법</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;  </span><br><span class="line"> <span class="number">1.</span> setName(name) &#123;  </span><br><span class="line"> <span class="keyword">this</span>.name = name;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="number">2.</span> getName() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.name;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">4.</span> Member.prototype.getTitle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> Member);  </span><br><span class="line"><span class="comment">// function</span></span><br></pre></td></tr></table></figure><ul><li><p>setName(){ } 과 같이 function 키워드와 콜론(:)을 작성하지 않고 메서드 이름만 작성합니다.</p></li><li><p>setName()과 getName() 메서드 사이에 콤마를 작성하지 않습니다.</p></li><li><p>클래스의 typeof는 function 입니다. 이는 class가 function 구조라는 것을 의미합니다.</p></li><li><p>function name(){ }은 글로벌 오브젝트(window Object)에 설정되지만<br>class name(){ }은 글로벌 오브젝트에 설정되지 않습니다.<br>따라서 window.Member로 클래스에 접근하면 undefined가 반환됩니다.<br><code>Class 오브젝트의 프로퍼티는 for()문 등으로 열거할 수 없습니다.</code></p></li></ul></li></ol><ol start="3"><li>prototype에 프로퍼티 연결</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;  </span><br><span class="line"> setName(name) &#123;  </span><br><span class="line"> <span class="keyword">this</span>.name = name;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><del>prototype에 메서드를 연결하여 prototype.setName과 같이 작성하지 않고</del><br>setName을 작성합니다. 자바스크립트는 기본적으로 prototype에 메서드를 연결하는 구조이므로 <strong>클래스 안에 작성된 메서드를 엔진이 자동으로 prototype에 연결합니다.</strong><br>즉. 엔진이 Member.prototype.setName 형태로 연결해줍니다.</p><p>이는 중요한 의미를 갖습니다. 자바스크립트의 기본 아키텍처(구성 방식 혹은 컴퓨터 소프트웨어의 호환성)를 유지하면서 객체지향 언어의 특징을 반영하려는 접근입니다.</p><ol start="4"><li>prototype에 프로퍼티 추가</li></ol><blockquote><p>Member.prototype.getTitle = function(  ){ };  </p></blockquote><p><strong>클래스 밖에서 Member 클래스에 메서드를 추가하려면</strong> 위와 같이<br>Member.prototype에 메서드를 연결하여 작성합니다.<br>Member 클래스를 선언할 때는 클래스 블록{}안에 작성하겠지만,<br>인스턴스를 생성한 후 상황에 따라 추가할 때 이 형태로 작성합니다.</p><ul><li>참고<br>이렇게 메서드를 추가하면 이미 생성된 인스턴스에서 추가한 메서드를 공유할 수 있도록 엔진이 처리하게 되므로 부하 혹은 자원낭비가 됩니다.<br>좋은 사용 예시로는 사용자의 행동이나 서버 데이터에 따라 메서드를 따로 추가할 수 있는 점이 있습니다.(역동성이 높다.)</li></ul><hr><h2 id="constructor">constructor</h2><ul><li><p>constructor 메소드는 class 인스턴스를 생성하고 생성된 인스턴스를 초기화하는 역활을 합니다.</p></li><li><p>“constructor” 라는 이름을 가진 메소드는 클래스 안에 한 개만 존재할 수 있습니다. 만약 클래스에 여러 개의 constructor 메소드가 존재하면 SyntaxError 가 발생할 것입니다.</p></li><li><p>constructor는 부모 클래스의 constructor 를 호출하기 위해 super 키워드를 사용할 수 있습니다.</p></li><li><p>참고<br>클래스에 constructor를 작성하지 않으면 prototype의 constructor가 호출됩니다.<br>이를 디폴트 constructor라고 하고 constructor가 없으면 인스턴스를 생성할 수 없습니다.<br>ES5 에서 클래스 오브젝트를 실행하면 엔진이 디폴트 constructor를 호출해서 이를 활용할 수 없었습니다.<br>ES6 에서는 개발자가 constructor를 정의할 수 있어서 Class 오브젝트 뿐 아니라<br>Proxy 오브젝트, Reflect 오브젝트에서 활용할 수 있습니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">constructor</span>(name)&#123;  </span><br><span class="line"> <span class="keyword">this</span>.name = name;  </span><br><span class="line"> &#125;  </span><br><span class="line"> getName() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.name;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> memberObj = <span class="keyword">new</span> Member(<span class="string">"스포츠"</span>);  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(memberObj.getName());  </span><br><span class="line"><span class="comment">// 스포츠</span></span><br></pre></td></tr></table></figure><ol><li><p>클래스 안에 constructor를 작성했으며 constructor 안에 생성한 인스턴스에 초기값을 설정하는 코드를 작성했습니다.<br>constructor 안의 this는 생성하는 인스턴스를 참조합니다.</p></li><li><p>new Member(“스포츠”)를 실행하면 Member 클래스에 작성한 constructor가 자동으로 호출되며 파라미터 값으로 “스포츠”를 넘겨 줍니다.</p><ul><li>new 연산자는 constructor를 호출하면서 파라미터를 넘겨주는 역활</li><li>호출된 constructor가 인스턴스를 생성하여 반환하면 new 연산자가 받아 new를 실행한 곳으로 반환합니다.</li></ul></li></ol><h2 id="클래스-와-인스턴스-생성-과정-이해를-위한-개념적인-순서"><a href="#클래스-와-인스턴스-생성-과정-이해를-위한-개념적인-순서" class="headerlink" title="클래스 와 인스턴스 생성 과정 이해를 위한 개념적인 순서"></a><mark>클래스 와 인스턴스 생성 과정 이해를 위한 개념적인 순서</mark></h2><pre><code>1. new Member(&quot;스포츠&quot;)를 실행합니다.2. new 연산자가 constructor를 호출하면서 파라미터 값을 넘겨줍니다.3. constructor의 블록 코드를 실행하기 전에 빈 Object 오브젝트를생성합니다.4. 이 것이 인스턴스입니다. 인스턴스가 생성되면 빈 오브젝트를 채웁니다.5. 인스턴스 구성에 필요한 프로퍼티를 Object 오브젝트에 설정합니다.6. constructor 블록에 있는 코드를 실행합니다.7. 인스턴스를 먼저 생성하므로 constructor에서 this로 인스턴스를 참조할수    있습니다.8. 생성된 인스턴스를 반환합니다.</code></pre><ol start="3"><li>console.log(memberObj.getName());를 호출하면 다음 코드가 실행됩니다.</li></ol><blockquote><p>getName() {<br> return this.name;<br>}</p></blockquote><p>constructor에서 this에 “스포츠”를 설정했으므로 “스포츠”가 반환됩니다.</p><p>아래는 생성된 memberObj 인스턴스 구조입니다.</p><img src="/images/constructorInstance.JPG"><p>constructor에서 파라미터로 받은 “스포츠”를 this.name에 할당했으며,<br>이때 this가 생성하는 인스턴스를 참조하므로 인스턴스 프로퍼티로 설정됩니다.</p><ul><li><p>&#95;&#95;proto&#95;&#95;는 인스턴스를 생성하면 엔진이 자동으로 첨부합니다.</p></li><li><p>&#95;&#95;proto&#95;&#95;에 Member.prototype에 연결된 프로퍼티를 첨부하므로 getName도 첨부됩니다.</p></li><li><p>&#95;&#95;proto&#95;&#95;에 Object 오브젝트의 prototype에 연결된 프로퍼티가 첨부됩니다.</p></li></ul><hr><h2 id="constructor">constructor</h2><p>constructor는 일반적으로 return 문을 작성하지 않으며, 생성한 인스턴스를 반환합니다.<br>return을 사용하면 인스턴스 이외의 값을 반환할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">constructor</span>()&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> getName()&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"이름"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> memberObj = <span class="keyword">new</span> Member();  </span><br><span class="line"><span class="built_in">console</span>.log(memberObj.getName());</span><br></pre></td></tr></table></figure><p>constructor(){ }안에 return 1;을 작성하였습니다.<br><del>일반적으로 숫자 값을 반환하지 않습니다, 엔진 처리 방법 예시를 위해 작성되었습니다.</del><br><mark>constructor에서 Number 또는 String 값을 반환하면 이를 무시하고 생성한 인스턴스를 반환합니다.</mark></p><p>console.log(memberObj.getName();)을 호출하면 constructor에서 1을 반환하여<br>memberObj에 1이 설정됩니다. 이후에 getName()을 호출하면 인스턴스 1에 getName()이 존재하지 않으므로 에러가 발생합니다. 하지만 Member 인스턴스를 반환하므로 getName()이 호출됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">constructor</span>()&#123;  </span><br><span class="line"> <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">"홍길동"</span>&#125;;  </span><br><span class="line"> &#125;  </span><br><span class="line"> getName()&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"이름"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">let</span> memberObj = <span class="keyword">new</span> Member();  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(memberObj.name);  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(memberObj.getName);  </span><br><span class="line"><span class="comment">// 홍길동  </span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>constructor에서 Object오브젝트를 return하면 이를 반환합니다.<br>즉, {name: “홍길동”}이 반환됩니다.</p><ol><li><p>memberObj에 반환된 {name: “홍길동”}이 설정되어 있으므로 memberObj.name 값이 홍길동 으로 출력됩니다.</p></li><li><p>클래스에 getName 메서드를 작성했지만, 인스턴스를 반환하지 않고 {name: “홍길동”}을 반환하므로<br>MemberObj에 getName이 존재하지 않습니다. undefined가 출력됩니다.</p></li></ol><hr><h2 id="getter_and_setter">getter, setter</h2><p>클래스에도 getter와 setter를 선언할 수 있습니다.<br>메서드 이름 앞에 “get”을 작성하면 getter, “set”을 작성하면 setter가 됩니다.</p><figure class="highlight js"><figcaption><span>getter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">get</span> getName() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"이름"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> memberObj = <span class="keyword">new</span> Member();  </span><br><span class="line"><span class="built_in">console</span>.log(memberObj.getName);  </span><br><span class="line"><span class="comment">// 이름</span></span><br></pre></td></tr></table></figure><p>get getName()과 같이 메서드 이름 앞에 get을 작성하여 getter로 선언합니다.</p><p>getName이 getter이므로 메서드로 호출됩니다.</p><figure class="highlight js"><figcaption><span>setter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">set</span> setName(name) &#123;  </span><br><span class="line"> <span class="keyword">this</span>.name = name;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">get</span> getName() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.name;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> memberObj = <span class="keyword">new</span> Member();  </span><br><span class="line">memberObj.setName = <span class="string">"이름"</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(memberObj.getName);  </span><br><span class="line"><span class="comment">// 이름</span></span><br></pre></td></tr></table></figure><p>memberObj.setName = “이름”과 같이 setter로 선언된 메서드 이름에 값을 할당하면<br>setName이 메서드로 호출됩니다. 이때 할당하는 값인 “이름”을 파라미터 값으로 넘겨줍니다.</p><hr><h2 id="상속">상속</h2><p>객체지향 프로그래밍에서 상속은 주요한 기능 중 하나입니다.<br>클래스를 상속받으면 상속받은 클래스의 메서드와 프로퍼티를 사용할 수 있습니다.</p><ul><li>참고<br>상속해 주는 클래스를 일반적으로 부모 클래스라고 부릅니다만<br>앞으로는 “슈퍼 클래스”라고 표기해줍시다.<br>슈퍼 클래스라고 표기하는 이유는 ES6에서 super키워드가 있으며<br>슈퍼 클래스를 지칭하므로 직관적이기 때문입니다.<br>상속받는 클래스도 일반적으로 자식 클래스라고 부릅니다만,<br>슈퍼 클래스와 운을 맞추기 위해 “서브 클레스”로 표기해줍시다.</li></ul><p><mark>자바스크립트 (객채지향 프로그래밍)의 상속 형태는 상속이 아니다?</mark></p><p>일반적으로 상속이라고 하면 부모의 재산을 자식에게 물려주면<br>자식이 부모의 능력을 고스란히 물려받습니다.<br>자바스크립트에서는 객체도 생성자도 모두 프로토타입에 접근할 수 있고<br>심지어 변경까지할 수 있습니다.<br>이는 상속받을 것들을 자기 마음대로 선택,변경할 수 있게 되고<br>다른 언어의 상속과는 다른 형태를 갖습니다.<br>상속이라고 부르지만, 프로토타입의 (자원)공유로 이해하는 것이 적절해 보입니다.</p><p><strong>ES5에서의 상속 구현 형태</strong></p><figure class="highlight js"><figcaption><span>ES5 상속 형태</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">function</span> <span class="title">Sports</span>(<span class="params">member</span>)</span>&#123;  </span><br><span class="line"> <span class="number">2.</span> <span class="keyword">this</span>.member = member;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">3.</span> Sports.prototype.setItem = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">this</span>.item = item;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> <span class="function"><span class="keyword">function</span> <span class="title">Soccer</span>(<span class="params">member</span>)</span>&#123;  </span><br><span class="line"> Sports.call(<span class="keyword">this</span>, member);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">5.</span> Soccer.prototype = <span class="built_in">Object</span>.create(Sports.prototype, &#123;  </span><br><span class="line"> setGround: &#123;  </span><br><span class="line"> value: <span class="function"><span class="keyword">function</span>(<span class="params">ground</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">this</span>.ground = ground;  </span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="number">6.</span> Soccer.prototype.constructor = Soccer;  </span><br><span class="line">  </span><br><span class="line"><span class="number">7.</span> <span class="keyword">var</span> obj = <span class="keyword">new</span> Soccer(<span class="number">11</span>);  </span><br><span class="line"><span class="number">8.</span> obj.setItem(<span class="string">"축구"</span>);  </span><br><span class="line">obj.setGround(<span class="string">"상암"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">9.</span> <span class="built_in">console</span>.log(obj.member); <span class="comment">// 11  </span></span><br><span class="line"><span class="built_in">console</span>.log(obj.item); <span class="comment">// 축구  </span></span><br><span class="line"><span class="built_in">console</span>.log(obj.ground); <span class="comment">// 상암</span></span><br></pre></td></tr></table></figure><ol><li><p>Sports 첫 문자를 대문자로 작성한 것은 new 연산자로 인스턴스를 생성하려는 의도입니다. new Sports()를 실행하면 Sports()가 호출되고, 다시 디폴트 constructor를 호출합니다. 그래서 Sports()를 생성자(constructor)함수라고 부릅니다.</p></li><li><p>this.member에서 this가 생성하는 인스턴스를 참조하므로 member는 인스턴스 프로퍼티가 됩니다. Sports(생성자 함수)함수에서 this.member = member 형태가 인스턴스에 초기값으로 설정됩니다. <del>이렇게 설정된 값은 생성된 모든 인스턴스에서 공유하지 않고 인스턴스마다 값을 각각 유지합니다. 이것이 인스턴스를 만드는 목적 중의 하나입니다.</del></p></li><li><p>생성자 함수가 있으면 Sports.prototype.setItem과 같이 prototype에 메서드를 연결한 코드가 작성되어 있습니다. 이를 작성하지 않으면 생성자 함수가 아닌 일반 함수 입니다. <strong>이 형태가 ES5에서 인스턴스를 구현하는 기본 형태입니다.</strong></p></li><li><p>Soccer()가 호출되면 Sports()를 호출합니다. Soccer의 첫 문자가 대문자이므로 인스턴스를 사용한다는 것을 알 수 있습니다. 그런데 new Sports()가 아닌 Sports.call()형태로 함수를 호출한 것은, 바로 다음 코드에서 Sports.prototype을 사용하여 인스턴스를 생성하므로 인스턴스에 초기값만 성정하면 되기 때문입니다.</p></li><li><p>Object.create()의 두 번째 파라미터 setGround를 첫 번째 파라미터인 Soccer.prototype에 첨부합니다. 그리고 Sports.prototype에 연결된 메서드를 Soccer.prototype.&#95;&#95;proto&#95;&#95;에 첨부합니다.<br>이렇게 연결된 후에 new Soccer()로 인스턴스를 생성하면 Soccer.prototype과 Sports.prototype에 연결된 메서드를 인스턴스 메서드로 호출할 수 있습니다.<strong>ES5에서는 이와 같은 방법으로 상속을 구현합니다.</strong></p></li><li><p>Soccer.prototype에 constructor가 연결되어 있는데, 앞 코드에서<br>Soccer.prototype에 프로퍼티를 연결하므로 constructor가 지워집니다.<br>Soccer를 설정하지 않아도 인스턴스가 생성되지만, constructor에서 Soccer전체를 참조하는 것이 정상입니다.</p></li><li><p>new 연산자로 Soccer() 생성자 함수를 호출하여 인스턴스를 생성합니다.<br>Sports.prototype에 연결된 메서드는 인스턴스에 포함되지만, Sports() 생성자 함수는 포함되지 않으므로 Sports.call(this.member); 코드를 수행하여 인스턴스에 초기값을 설정합니다. this는 생성한 인스턴스를 참조하게 됩니다.</p></li><li><p>setItem()은 상속받은 Sports.prototype에 연결된 메서드 입니다.<br>상속을 받으면 인스턴스에서 직접 상속받은 메서드를 호출할 수 있습니다.</p></li><li><p>생성자 함수를 모두 호출하여 인스턴스에 초기값을 설정했으므로 인스턴스 프로퍼티로 프로퍼티 값을 구할 수 있습니다.<br>ES5에서는 이와 같이 prototype에 연결해야 하며 직관적이지 않은 점도 있습니다.</p></li></ol><hr><h2 id="extends">extends 키워드</h2><p>ES6에서는 extends 키워드로 상속을 구현합니다.</p><blockquote><p>class subClass extends superClass { }</p></blockquote><ul><li><p>subClass<br>상속 받는 자식 클래스(서브 클래스).</p></li><li><p>superClass<br>상속 해주는 부모 클래스(슈퍼 클래스).</p></li><li><p>new subClass()로 인스턴스를 생성하면 인스턴스에서 subClass 클래스와 super 클래스의 메서드를 호출할 수 있습니다.</p></li></ul><figure class="highlight js"><figcaption><span>extends ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="class"><span class="keyword">class</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">constructor</span>(member)&#123;  </span><br><span class="line"> <span class="keyword">this</span>.member = member;  </span><br><span class="line"> &#125;  </span><br><span class="line"> getMember()&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.member;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">2.</span> <span class="class"><span class="keyword">class</span> <span class="title">Soccer</span> <span class="keyword">extends</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> setGround(ground)&#123;  </span><br><span class="line"> <span class="keyword">this</span>.ground = ground;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> obj = <span class="keyword">new</span> Soccer(<span class="number">11</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(obj.getMember()); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><ol><li><p>Sports 클래스를 상속받으므로 Sports 클래스는 슈퍼 클래스입니다.<br>new Soccer()로 인스턴스를 생성하면 constructor가 호출되며,this가 생성하는 인스턴스를 참조하므로 파라미터로 받은 값을 인스턴스의 member 프로퍼티에 설정할 수 있습니다.</p></li><li><p>extends 키워드 기준으로 왼쪽의 Soccer 클래스가 서브클래스<br>오른쪽 Sports 클래스가 슈퍼클래스입니다. 즉, Soccer 클래스에서 Sports 클래스를 상속받습니다. this.ground에서 this는 생성한 인스턴스를 참조합니다.</p><ul><li>이 시점의 Soccer 클래스 구조입니다.    <img scr="/images/extendsSoccer.JPG"></li></ul><ol><li>Soccer.prototype에 setGround가 연결되어 있으며</li><li>Soccer.prototype.&#95;&#95;proto&#95;&#95;에 Sports.prototype에 연결되어 있는 getMember가 첨부되어 있습니다.</li><li>Soccer.&#95;&#95;proto&#95;&#95;에 Sports.prototype에 연결된 프로퍼티도 첨부되어 있습니다.</li></ol><ul><li>이와 같이 extends 키워드는 서브클래스의 prototype에 &#95;&#95;proto&#95;&#95;를 만들고 여기에 슈퍼클래스의 prototype에 연결된 프로퍼티를 연결합니다.<br><del>슈퍼클래스의 prototype에 연결된 메서드를 복사하는 것이 아니라 공유합니다.</del><br>new Soccer()로 인스턴스를 생성할 때 Soccer.prototype에 연결된 프로퍼티를 사용하므로 서브클래스와 슈퍼클래스의 메서드가 인스턴스에 포함됩니다.</li></ul></li><li><p>new Soccer(11)을 실행하면 다음의 순서와 방법으로 실행합니다.</p><ol><li>Soccer 클래스의 constructor가 호출됩니다.</li><li>Soccer 클래스에는 constructor를 작성하지 않았습니다.</li><li>슈퍼 클래스의 constructor가 호출되면서 11을 파라미터 값으로 넘겨줍니다.</li><li>슈퍼 클래스의 constructor에서 this는 현재의 인스턴스를 참조하므로 인스턴스의 member 프로퍼티에 파라미터로 받은 11을 설정한 후 돌아오게 되며,</li><li>생성한 인스턴스를 obj에 할당합니다.</li></ol><ul><li><p>다음은 obj의 인스턴스 구조입니다.</p><img src="/images/extendsObj.JPG"></li><li><p>인스턴스를 생성하는 주체는 서브 클래스입니다. new Sports()가 아닌 new Soccer()로 인스턴스를 생성합니다.</p></li><li><p>슈퍼 클래스의 constructor에서 this.member에 설정한 값이 인스턴스 프로퍼티로 설정됩니다.</p></li><li><p>&#95;&#95;proto&#95;&#95;에 서브 클래스의 prototype에 연결된 메서드가 첨부되었으며</p></li><li><p>&#95;&#95;proto&#95;&#95;에 슈퍼 클래스의 prototype에 연결된 메서드가 첨부됩니다.</p></li><li><p>메서드를 호출할 때 &#95;&#95;proto&#95;&#95;를 작성하지 않아도 되므로<br>setGround()와 getMember()를 인스턴스에서 직접 호출할 수 있습니다.</p></li></ul></li></ol><ol start="4"><li>obj.getMember()를 호출하면 우선 obj.&#95;&#95;proto&#95;&#95;에서 메서드를 찾습니다. 존재하지 않으면 obj.&#95;&#95;proto&#95;&#95;.&#95;&#95;proto&#95;&#95;에서 찾습니다. 메서드가 존재하면 호출됩니다.<br>이것이 자바스크립트의 상속 메커니즘 입니다.</li></ol><hr><h2 id="super">super 키워드</h2><p>서브 클래스와 슈퍼 클래스에 같은 이름의 메서드가 존재하면 슈퍼 클래스의 메서드는 호출되지 않습니다.<br>이때 super 키워드를 사용하여 슈퍼 클래스의 메서드(혹은 함수)를 호출할 수 있습니다.</p><p>서브 클래스 constructor에 super()를 작성하면 슈퍼 클래스의 constructor가 호출됩니다.<br>super.name()과 같이 super 키워드에 이어서 호출하려는 메서드 이름을 작성합니다.</p><h3 id="메서드-오버라이딩"><a href="#메서드-오버라이딩" class="headerlink" title="메서드 오버라이딩"></a>메서드 오버라이딩</h3><p>서브 클래스와 슈퍼 클래스에 같은 이름의 메서드가 있을 때 서브 클래스의 메서드가 호출 되는 것을<br>메서드 오버라이딩(Overriding)이라고 합니다. 메서드 오버라이딩은 의도적인 접근 방식입니다.</p><p>서브 클래스와 슈퍼 클래스의 같은 이름의 메서드가 같은 목적을 가진 것을 나타내면서<br>서브 클래스의 목적에 맞도록 보완할 때 사용합니다.(슈퍼 클래스의 메서드 기능을 사용하면서 서브 클래스에서 기능을 추가,변경할 때 사용합니다.)</p><p>슈퍼 클래스와 서브 클래스의 메서드 기능/목적이 다른 경우에는 같은 이름을 사용하지 않습니다.</p><figure class="highlight js"><figcaption><span>super-1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> setGround(ground)&#123;  </span><br><span class="line"> <span class="keyword">this</span>.ground = ground;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="class"><span class="keyword">class</span> <span class="title">Soccer</span> <span class="keyword">extends</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> setGround(ground)&#123;  </span><br><span class="line"> <span class="number">2.</span> <span class="keyword">super</span>.setGround();  </span><br><span class="line"> <span class="keyword">this</span>.ground = ground;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> obj = <span class="keyword">new</span> Soccer();  </span><br><span class="line">obj.setGround(<span class="string">"상암구장"</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(obj.ground);  </span><br><span class="line"><span class="comment">// 상암구장</span></span><br></pre></td></tr></table></figure><p><del>Sports 클래스는 슈퍼 클래스 입니다. 상속을 해주지만 단독으로 인스턴스를 생성할 수도 있습니다.</del></p><ul><li><p>Class Sports{}에는 그라운드(setground)가 필요합니다.<br>Sports의 종목이 여러개라면 종목마다 그라운드(setGround)형태도 달라져야 할 수 있습니다.<br>그런 의미에서 setGround()메서드는 의미 없어 보일 수 있습니다.</p></li><li><p>하지만 Sports 클래스를 상속받는 서브 클래스에서 setGround를 오버라이딩 하면 일관성 있게<br>그라운드를 정의할 수 있습니다. 메서드 이름을 유지하면서 서브클래스 마다<br>적합한 그라운드(setGround)를 설정해 주는 것입니다.<br>이를 객체 지향에서 추상화(Abstraction)라고 합니다.</p></li></ul><ol><li><p>Soccer 클래스에서 Sports 클래스를 상속받습니다. Sports 클래스에 setGround()가 있으며<br>Soccer 클래스에도 있으므로 메서드가 오버라이딩 됩니다.<br>new Soccer()로 인스턴스를 생성한 후 setGround()를 호출하게 되면 서브클래스(Soccer)의<br>메서드가 호출됩니다. 이때 super.setGround()는 슈퍼클래스(Sports)의 setGround()를 호출합니다.</p></li><li><p>super.setGround()를 호출하면서 파라미터 값은 정해주지 않았습니다.<br>슈퍼클래스(Soccer)의 setGround()에서 this.ground에 undefined가 설정됩니다.<br>super.setGround()를 실행한 후 돌아오면 바로 다음 줄의 this.ground에서 파라미터로 받은 값을 설정합니다.</p></li><li><p>new Soccer()로 인스턴스를 생성하고 setGround()를 호출하면 인스턴스의 ground 프로퍼티에 파라미터 값이 설정됩니다. ground가 인스턴스 프로퍼티이므로 obj.ground로 값을 출력할 수 있습니다.</p></li></ol><figure class="highlight js"><figcaption><span>super-2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span>(member)&#123;  </span><br><span class="line">        <span class="keyword">this</span>.member = member;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.member);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">2.</span> <span class="class"><span class="keyword">class</span> <span class="title">Soccer</span> <span class="keyword">extends</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> <span class="number">3.</span> <span class="keyword">constructor</span>(member)&#123;  </span><br><span class="line">        <span class="keyword">super</span>(member);  </span><br><span class="line">        <span class="keyword">this</span>.member = <span class="number">456</span>;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.member);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> obj = <span class="keyword">new</span> Soccer(<span class="number">123</span>);  </span><br><span class="line"><span class="comment">// 123  </span></span><br><span class="line"><span class="comment">// 456</span></span><br></pre></td></tr></table></figure><ol><li><p>new Soccer(123)을 실행하면 Soccer 클래스의 constructor가 호출됩니다.</p></li><li><p>constructor 첫째 줄의 super(member)를 실행하면 슈퍼 클래스의 constructor를<br>호출 하면서 파라미터로 받은 값을 넘겨줍니다. 슈퍼 클래스의 constructor를<br>호출하려면 서브클래스 constructor의 첫째 줄에 super()를 작성해야 합니다.</p></li></ol><p><strong>super() 앞에 변수를 선언하거나 변수에 값을 할당하는 코드는 작성해도 되지만,</strong><br><strong>this 키워드는 super() 앞에 사용할 수 없습니다.</strong></p><ol start="3"><li>super()로 인해 constructor가 호출되면 this로 인스턴스를 참조할 수 있습니다.<br>따라서 파라미터로 받은 member 값을 인스턴스의 member 프로퍼티에 할당할 수 있습니다.</li></ol><hr><h2 id="builtin">빌트인 오브젝트 상속</h2><p>extends 키워드로 Array 오브젝트 등의 빌트인 오브젝트를 상속받을 수 있습니다.<br>상속을 받지 않고 서브 클래스에서 빌트인 오브젝트의 메서드를 호출해도 되지만<br>상속 받는 것과 차이가 있습니다. 서브 클래스에서 빌트인 오브젝트를 상속받으면<br>빌트인 오브젝트의 메서드를 마치 서브 클래스에서 선언한 것처럼 사용할 수 있게 됩니다.</p><figure class="highlight js"><figcaption><span>builtin</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">constructor</span>()&#123;  </span><br><span class="line"> <span class="keyword">super</span>();  </span><br><span class="line"> &#125;  </span><br><span class="line"> getTotal()&#123;  </span><br><span class="line"> <span class="keyword">let</span> total = <span class="number">0</span>;  </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> <span class="keyword">this</span>)&#123;  </span><br><span class="line"> total += value;  </span><br><span class="line"> &#125;;  </span><br><span class="line"> <span class="keyword">return</span> total;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> obj = <span class="keyword">new</span> ExtendArray();  </span><br><span class="line"><span class="number">3.</span> obj.push(<span class="number">10</span>, <span class="number">20</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(obj.getTotal());  </span><br><span class="line"><span class="comment">// 30</span></span><br></pre></td></tr></table></figure><ol><li><p>클래스 ExtendArray 에 빌트인 오브젝트인 Array 오브젝트를 상속받았습니다.<br>new 연산자로 인스턴스를 생성하면 인스턴스는 Array 오브젝트의 특징을 갖게됩니다.<br>따라서 인스턴스에서 push()와 같은 Array 메서드를 직접 호출할 수 있습니다.<br>“[].push()”형태가 아닌 “인스턴스.push()”형태로 호출할 수 있습니다.<br>이 형태의 차이에 상속 받는 목적이 담겨있다고 할 수 있습니다.</p></li><li><p>new ExtendArray()를 실행하면 아래에 작성한 constructor가 호출됩니다.</p><blockquote><p>constructor(){<br>super();<br>}</p></blockquote><p>super()가 슈퍼 클래스의 constructor를 호출하므로 Array 오브젝트 constructor가<br>호출됩니다.</p></li></ol><ol start="3"><li><p>obj 인스턴스에 push()메서드가 상속되어 있으므로 obj.push(10,20)형태로 호출할 수 있습니다.<br>obj.push(10, 20) 과 [].push(10, 20)에서 obj 인스턴스가 Array 리터럴[]에 해당됩니다.<br>따라서 obj 인스턴스에 10 과 20를 설정하는 것은 Array 인스턴스에 설정하는 것과 같습니다.<br>이것이 빌트인 오브젝트를 상속받는 목적 중의 하나입니다.</p></li><li><p>obj.getTotal()을 호출하면 for-of 문으로 [10, 20]을 합산하여 반환합니다.<br><del>값을 합산해주는 빌트인 함수도 있지만 for(var value of this)문에서<br>this를 다루기 위해 의도적으로 for-of 문을 사용했습니다.</del><br>this가 obj 인스턴스를 참조합니다. obj 인스턴스는 [10, 20]값이 설정되어 있으며<br>Array 오브젝트를 상속받은 상태 이므로 length 프로퍼티를 갖고있습니다.<br>즉, 이터레이션을 수행할 수 있는 조건을 충족합니다.</p><blockquote><p>for(var value of [10, 20]){<br>total += value;<br>} return total</p></blockquote></li></ol><p>위 헝태가 되어 엘리먼트(10, 20)를 하나씩 읽어가면서 for-of 문을 반복합니다.</p><hr><h2 id="Object_super">Object에서 super 사용</h2><p>두 개의 Object 오브젝트가 연결된 구조에서 super.name() 형태로 슈퍼 오브젝트의<br>메서드를 호출할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Sports = &#123;  </span><br><span class="line"> getTitle()&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Sports"</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> Soccer = &#123;  </span><br><span class="line"> getTitle()&#123;  </span><br><span class="line"> <span class="keyword">super</span>.getTitle();  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Soccer"</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">Object</span>.setPrototypeOf(Soccer, Sports);  </span><br><span class="line"><span class="number">2.</span> Soccer.getTitle();  </span><br><span class="line"><span class="comment">//Sports  </span></span><br><span class="line"><span class="comment">//Soccer</span></span><br></pre></td></tr></table></figure><ol><li><p>Object.setPrototypeOf()을 실행하면 Soccer.&#95;&#95;proto&#95;&#95;에<br>Sports 오브젝트의 프로퍼티가 첨부됩니다.<br>Object 오브젝트가 대상이므로 생성자 함수가 없지만,&#95;&#95;proto&#95;&#95;에 프로퍼티가 첨부되는 것이 상속 구조(형태)입니다.</p></li><li><p>Soccer.getTitle();이 호출되면, 첫째 줄에서 super.getTitle()을 호출합니다.<br>상속을 하면 &#95;&#95;proto&#95;&#95;로 계층을 만들고,&#95;&#95;proto&#95;&#95;에 상속받을 오브젝트의 프로퍼티를 첨부하므로, super는 한 단계 아래의 &#95;&#95;proto&#95;&#95;를 참조하는 것과 같습니다.</p></li></ol><p>현재 Soccer.&#95;&#95;proto&#95;&#95;에 Sports 오브젝트의 getTitle()이 첨부되어 있습니다.<br>따라서 super.getTitle()을 호출하면, super가 Soccer.&#95;&#95;proto&#95;&#95;를 참조하므로<br>Sports 오브젝트의 getTitle()이 호출됩니다.  </p><p><strong>이와 같이 Object.setPrototypeOf()으로 &#95;&#95;proto&#95;&#95;구조를 만들고 상속받을 오브젝트의 프로퍼티를 첨부하면, super키워드로 상속 계층 구조에 있는 메서드를 호출할 수 있습니다.</strong></p><hr><h2 id="static">static 키워드</h2><p>클래스에 static(정적) 메서드를 정의합니다.</p><blockquote><p>static methodName() { … }</p></blockquote><p>prototype에 연결된 메서드는 인스턴스를 생성하여 호출 하지만,<br>static 메서드는 인스턴스를 생성하지않고 클래스에 직접 연결하여 호출합니다.</p><p>static 메서드는 prototype에 연결되지 않으므로 인스턴스에서 호출할 수 없습니다.<br>클래스 이름을 지정하여 static 메서드를 호출해야 합니다.</p><ul><li>중요 포인트<br>엔진이 class 키워드를 만나면 클래스 안에 static 메서드 작성 여부를 체크합니다.<br>static 메서드가 존재한다면 이를 Function 오브젝트로 생성합니다.<br>(메서드를 호출하기 위해서는 메서드가 Function 오브젝트여야 하고,<br>이렇게 생성함으로써 클래스 아래의 static메서드를 호출할 수 있게 합니다.)</li></ul><figure class="highlight js"><figcaption><span>자바스크립트 Function 오브젝트 생성 형태</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// Function 오브젝트입니다.  </span></span><br><span class="line"> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// Function 오브젝트가 아닙니다.  </span></span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>function 안에 function은 Function 오브젝트로 생성하지 않고,<br>function이 호출되어 안에 있는 function으로 들어갔을 때<br>Function 오브젝트를 생성합니다.<br>따라서 function을 호출하지 않으면 안에 있는 function은<br>아무것도 아닙니다. 그저 작성돼있는 함수 입니다.<br>이 점이 static 키워드를 사용한 메서드와 차이점 입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">static</span> getGround() &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"상암구장"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(Sports.getGround());</span><br></pre></td></tr></table></figure><p>getGround(){} 앞에 static을 작성하여 static메서드로 선언했습니다.</p><ol><li>Sports는 클래스 이름이고 getGround()는 static메서드 입니다.<br>이와 같이 앞에 클래스 이름을 작성하고 이어서 static메서드를 작성하여 호출합니다.</li></ol><hr><h2 id="Class_Hoisting">Class 호이스팅</h2><p>클래스는 호이스팅(Hoisting)이 되지 않습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class  </span></span><br><span class="line"><span class="keyword">let</span> result = Member;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">static</span> getMember()&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"member"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="built_in">console</span>.log(Member.getMember()); <span class="comment">// member  </span></span><br><span class="line"><span class="built_in">console</span>.log(result.getMember()); <span class="comment">// TypeError  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// function과 비교  </span></span><br><span class="line"><span class="keyword">let</span> result2 = Member2;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Member2</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"member2"</span>;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="built_in">console</span>.log(Member2());<span class="comment">// member2  </span></span><br><span class="line"><span class="built_in">console</span>.log(result2());<span class="comment">// member2</span></span><br></pre></td></tr></table></figure><p>호이스팅 된다면 Member 클래스가 result 변수에 할당됩니다.<br>호이스팅 되지않으면 Member를 인식하지 못합니다. Error</p><ul><li><p>클래스는 호이스팅 되지않아 result에 할당할 Member를 인식하지 못합니다.<br>result에 Member 값을 넣으려면 클래스 문이 완전히 끝난 뒤에 작성해야합니다.</p></li><li><p>function은 호이스팅 되므로 result2에 Member2를 인식하여 할당할 수 있습니다.</p></li></ul><hr><h2 id="computed_name">computed name</h2><p>클래스의 메서드 이름을 조합(computed name)하여 작성할 수 있습니다.</p><figure class="highlight js"><figcaption><span>computed name</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> type = <span class="string">"Type"</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">static</span> [<span class="string">"get"</span> + type](kind)&#123;  </span><br><span class="line"> <span class="keyword">return</span> kind ? <span class="string">"스포츠"</span> : <span class="string">"음악"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(Sports[<span class="string">"get"</span> + type](<span class="number">1</span>)); <span class="comment">// 스포츠  </span></span><br><span class="line"><span class="built_in">console</span>.log(Sports.getType(<span class="number">1</span>)); <span class="comment">// 스포츠</span></span><br></pre></td></tr></table></figure><p>변수 type 에 문자열 값 “Type”을 할당해 줬습니다.<br>static 메서드 []안에 문자열 “get” 과 클래스 밖에 작성된 type 변수 값을<br>작성해줬습니다. static메서드의 이름이 getType이 됩니다.<br>이와 같이 static 메서드 []안에 조합할 이름을 작성합니다.</p><ol><li>문자열 “get”과 변수인 type을 조합하여 호출합니다.<br>파라미터 값이 1 (true)이므로 호출된 getType()에서 “스포츠”를 반환합니다.<br>물론 console.log(Sports.getType(1)); 형태로 호출할 수 도 있습니다.</li></ol><hr><h2 id="this">this</h2><p>static 메서드에서 this는 클래스 오브젝트를 참조합니다.<br>constructor 안에서 this.constructor.name()형태로 static 메서드를 호출할 수 있습니다.</p><figure class="highlight js"><figcaption><span>this 예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">static</span> setGround(ground)&#123;  </span><br><span class="line"> <span class="keyword">this</span>.ground = ground;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">static</span> getGround()&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.ground;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">Sports.setGround(<span class="string">"상암구장"</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(Sports.getGround());  </span><br><span class="line"><span class="comment">// 상암구장</span></span><br></pre></td></tr></table></figure><p>Sports.setGround(“상암구장”)를 실행하면 static메서드인 setGround()가 호출됩니다.<br>this.ground에서 this가 Sports 클래스를 참조하므로 Sports 클래스에<br>{ground: “상암구장”} 형태로 설정됩니다.</p><p>Sports.getGround()를 실행하면 getGround() 정적 메서드가 호출됩니다.<br>this.Ground에서 this가 Sports 클래스를 참조하므로 setGround()에서<br>Sports 클래스에 설정한 ground 프로퍼티 값을 구할 수 있습니다. //상암구장</p><figure class="highlight js"><figcaption><span>this 호출 예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sports</span></span>&#123;  </span><br><span class="line"> <span class="keyword">constructor</span>()&#123;  </span><br><span class="line"> <span class="number">1.</span> <span class="built_in">console</span>.log(Sports.getGround());  </span><br><span class="line"> <span class="number">2.</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.constructor.getGround());  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">static</span> getGround()&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="string">"상암구장"</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Sports();</span><br></pre></td></tr></table></figure><p>new Sports()를 실행하면 constructor가 호출됩니다.<br>constructor 블록{}안에서 static메서드인 getGround를 호출하며,<br>this.constructor 형태도 사용하고 있습니다.</p><ol><li><p>Sports 클래스에 static 메서드로 getGround()를 작성했으므로<br>Sports.getGround() 형태로 호출할 수 있습니다.<br>constructor 블록{} 아래에 getGround()가 작성되어 있습니다만<br>이미 Function 오브젝트로 생성된 상태이므로 호출이 됩니다.</p></li><li><p>constructor가 Sports 클래스를 참조하며 인스턴스의 &#95;&#95;proto&#95;&#95;에<br>constructor가 첨부되어 있으므로 this.constructor.getGround() 형태로<br>static메서드를 호출할 수 있습니다. 구조는 다음 사진과 같습니다.</p><img src="/images/ClassThisInstance.JPG"></li></ol><ul><li>this.getGround()형태로는 호출할 수 없습니다. (//undefined)<br>this가 new Sport()로 생성한 인스턴스를 참조하고,<br>getGround는 static메서드 이므로 인스턴스에 존재하지 않기 때문입니다.</li></ul><hr><h2 id="generator">제너레이터</h2><p>클래스 안에 제너레이터 함수를 작성할 수 있습니다.<br>클래스 안에 작성한 제너레이터 함수는 prototype에 연결됩니다.<br>따라서 static 메서드로 호출할 수 없고 인스턴스를 생성하여 호출해야 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;  </span><br><span class="line"> *gen() &#123;  </span><br><span class="line"> <span class="keyword">yield</span> <span class="number">10</span>;  </span><br><span class="line"> <span class="keyword">yield</span> <span class="number">20</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Member();  </span><br><span class="line"><span class="keyword">let</span> genObj = obj.gen();  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: 10, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 20, done: false&#125;</span></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">new Member()로 클래스 인스턴스를 생성 합니다. 변수 obj에 할당됩니다.  </span></span><br><span class="line"><span class="string">genObj 변수에 obj.gen 메서드를 할당합니다.  </span></span><br><span class="line"><span class="string">genObj.next()로 호출할 수 있게됩니다.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* * *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;h2 id="new_target"&gt;new.target&lt;/h2&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">new.target은 메타(meta) 프로퍼티로 생성자 함수와 클래스에서  </span></span><br><span class="line"><span class="string">constructor를 참조합니다. new 연산자로 인스턴스를 생성하지 않으면  </span></span><br><span class="line"><span class="string">new.target 값은 undefined 입니다.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">let</span> sports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">new</span>.target);  </span><br><span class="line">&#125;  </span><br><span class="line">sports();  </span><br><span class="line"><span class="keyword">new</span> sports();  </span><br><span class="line"><span class="comment">// undefined  </span></span><br><span class="line"><span class="comment">/* function() &#123;  </span></span><br><span class="line"><span class="comment"> console.log(new.target);  </span></span><br><span class="line"><span class="comment">&#125;  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>sports(); 와 같이 new 연산자를 사용하지 않고 호출하면 new.target값은 undefined 입니다.</p><p>new sports();로 호출하면 new.target은 constructor를 참조합니다.<br>sports 함수에 constructor를 작성하지 않았으므로 디폴트 constructor가 호출됩니다.<br>디폴트 constructor = (function: Object() {native code})<br>constructor가 sports 전체를 참조하므로 sports 함수의 코드가 출력됩니다.</p><h3 id="name-프로퍼티"><a href="#name-프로퍼티" class="headerlink" title="name 프로퍼티"></a>name 프로퍼티</h3><p>ES6는 클래스, 함수 오브젝트에 name 프로퍼티가 존재하며 이름이 설정됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">constructor</span>()&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Sports:"</span>, <span class="keyword">new</span>.target.name);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soccer</span> <span class="keyword">extends</span> <span class="title">Sports</span> </span>&#123;  </span><br><span class="line"> <span class="keyword">constructor</span>()&#123;  </span><br><span class="line"> <span class="keyword">super</span>();  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Soccer:"</span>, <span class="keyword">new</span>.target.name);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> sportsObj = <span class="keyword">new</span> Sports();  </span><br><span class="line"><span class="keyword">let</span> soccerObj = <span class="keyword">new</span> Soccer();  </span><br><span class="line"><span class="comment">// Sports: Sports  </span></span><br><span class="line"><span class="comment">// Sports: Soccer  </span></span><br><span class="line"><span class="comment">// Soccer: Soccer</span></span><br></pre></td></tr></table></figure><ul><li><p>new Sports()를 호출하면 Sports 클래스이므로 클래스 name 프로퍼티에 “Sports”가<br>설정되어 있습니다. constructor에서 new.target은 constructor를 참조하므로<br>Sports 클래스의 name 프로퍼티 값 “Sports”가 출력됩니다.</p></li><li><p>new Soccer()를 호출하면 super()로 인해 Sports의 constructor가 호출됩니다.<br>Sports의 constructor에서 new.target은 super()로 호출한 Soccer의<br>constructor를 참조합니다. 따라서 new.target.name 값으로 Sports가 아닌 Soccer가 출력됩니다.</p></li></ul><hr><h2 id="Image_Object">Image 오브젝트 상속</h2><ul><li><p>DOM(Document Object Model)에서 제공하는 Image 인터페이스, Audio 인터페이스 등을 상속받을 수 있습니다.<br>빌트인 Array 오브젝트를 상속받으면 Array 오브젝트 특징을 갖듯이<br>상속받은 인터페이스 특징을 갖습니다.</p></li><li><p>DOM의 Image 인터페이스는 웹 페이지에 png 파일과 같은 이미지 파일을 표현하기 위한 속성을 제공합니다.<br>인터페이스는 객체지향 용어로 이 자체를 그대로 사용할 수 없고 오브젝트로 변환하여 사용해야 합니다.<br>DOM은 오브젝트를 제공하지 않고 인터페이스를 제공하는데,이는 자바스크립트뿐만 아니라 Java등의 다른 언어에서도 사용하기 때문입니다. 각 언어에서 DOM인터페이스를 언어에 맞게 변환하여 사용합니다.</p></li></ul><p>인터페이스를 오브젝트로 변환하려면 extends 키워드를 사용합니다.</p><figure class="highlight js"><figcaption><span>extends-image</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsImage</span> <span class="keyword">extends</span> <span class="title">Image</span></span>&#123;  </span><br><span class="line"> <span class="keyword">constructor</span>() &#123;  </span><br><span class="line"> <span class="keyword">super</span>();  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="number">2.</span> setProperty(image)&#123;  </span><br><span class="line"> <span class="keyword">this</span>.src = image.src;  </span><br><span class="line"> <span class="keyword">this</span>.alt = image.alt;  </span><br><span class="line"> <span class="keyword">this</span>.title = image.title;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> imageObj = <span class="keyword">new</span> ExtendsImage();  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> properties = &#123;  </span><br><span class="line"> src: <span class="string">"file/rainbow.png"</span>,  </span><br><span class="line"> alt: <span class="string">"나무와 집이 있고 그 위에 무지개가 있는 모습"</span>,  </span><br><span class="line"> title: <span class="string">"무지개"</span>  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">imageObj.setProperty(properties);  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>).appendChild(imageObj);</span><br></pre></td></tr></table></figure><ol><li><p>Image 오브젝트를 extends 키워드로 상속받습니다.<br>ExtendsImage 클래스는 Image 특성을 갖게됩니다.<br>즉, &lt; img &gt; 엘리먼트의 속성을 직접 사용할 수 있습니다.<br>또한 this로 엘리먼트 속성에 접근할 수 있습니다.</p></li><li><p>파라미터로 받은 &lt; img &gt; 속성 값을 this가 참조하는 imageObj 인스턴스에 설정합니다.</p></li><li><p>&lt; body&gt; 엘리먼트에 자식 요소로 imageObj를 첨부합니다.<br>body 엘리먼트에 imageObj 안에 있는 img 엘리먼트 속성도 첨부 횝니다.</p></li></ol><p>웹페이지에 이미지가 표시되고 그 속성은 다음과 같습니다.</p><blockquote><p>&lt; img src = “file/rainbow.png”<br>alt= “나무와 집이 있고 그 위에 무지개가 있는 모습”<br>title= “무지개” &gt;</p></blockquote>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/04/01/Class%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Generator 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/03/31/Generator%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/03/31/Generator%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</guid>
      <pubDate>Mon, 30 Mar 2020 23:54:39 GMT</pubDate>
      <description>
      
        &lt;hr&gt;
&lt;p&gt;함수를 호출하면 함수 블록의 코드를 한 번에 실행하지만,&lt;br&gt;제너레이터(Generator)오브젝트는 나누어서 실행할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generator&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/31/Generator%20오브젝트%20-ECMAScript/#function*_선언문&quot;&gt;function* 선언문&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/31/Generator%20오브젝트%20-ECMAScript/#function*_표현식&quot;&gt;function* 표현식&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/31/Generator%20오브젝트%20-ECMAScript/#GeneratorFunction&quot;&gt;GeneratorFunction():제너레이터 함수 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/31/Generator%20오브젝트%20-ECMAScript/#yield&quot;&gt;yield: 제너레이터 함수 실행,멈춤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/31/Generator%20오브젝트%20-ECMAScript/#next&quot;&gt;next():yield 단위로 실행&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/31/Generator%20오브젝트%20-ECMAScript/#next_ex&quot;&gt;next() 활용 예제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/31/Generator%20오브젝트%20-ECMAScript/#throw&quot;&gt;throw(): Error 발생&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/31/Generator%20오브젝트%20-ECMAScript/#yield*&quot;&gt;yield* 키워드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p>함수를 호출하면 함수 블록의 코드를 한 번에 실행하지만,<br>제너레이터(Generator)오브젝트는 나누어서 실행할 수 있습니다.</p><ul><li>Generator<ul><li><a href="/2020/03/31/Generator%20오브젝트%20-ECMAScript/#function*_선언문">function* 선언문</a></li><li><a href="/2020/03/31/Generator%20오브젝트%20-ECMAScript/#function*_표현식">function* 표현식</a></li><li><a href="/2020/03/31/Generator%20오브젝트%20-ECMAScript/#GeneratorFunction">GeneratorFunction():제너레이터 함수 생성</a></li><li><a href="/2020/03/31/Generator%20오브젝트%20-ECMAScript/#yield">yield: 제너레이터 함수 실행,멈춤</a></li><li><a href="/2020/03/31/Generator%20오브젝트%20-ECMAScript/#next">next():yield 단위로 실행</a></li><li><a href="/2020/03/31/Generator%20오브젝트%20-ECMAScript/#next_ex">next() 활용 예제</a></li><li><a href="/2020/03/31/Generator%20오브젝트%20-ECMAScript/#throw">throw(): Error 발생</a></li><li><a href="/2020/03/31/Generator%20오브젝트%20-ECMAScript/#yield*">yield* 키워드</a></li></ul></li></ul><a id="more"></a><p>제너레이터 함수 작성 형식은 3가지가 있습니다.</p><ol><li><p>function* 선언문</p></li><li><p>function* 표현식</p></li><li><p>GeneratorFunction</p></li></ol><p>function* 선언문과 표현식은 기존의 function과 형태가 같습니다,<br>“*”를 사용하는 형태만 다릅니다.<br>GeneratorFunction은 new Function()과 같으며<br>파라미터에 지정한 문자열로 제너레이터 함수를 생성하여 반환합니다.</p><h3 id="중요-포인트"><a href="#중요-포인트" class="headerlink" title="중요 포인트"></a>중요 포인트</h3><p>제너레이터 함수를 호출하면 제너레이터 오브젝트를 생성하여 반환합니다.<br>function()을 호출하면 함수 블록을 실행하지만, 제너레이터 함수는 함수 블록을 실행하지 않고 제너레이터 오브젝트를 생성하여 반환합니다.<br>생성한 제너레이터 오브젝트에 호출한 함수에서 넘겨 준 파라미터 값이 설정됩니다.</p><p><strong>생성된 제너레이터 오브젝트는 이터레이터 오브젝트입니다.</strong><br>이터레이터 오브젝트의 메서드를 호출했을 때 제너레이터 함수 블록을 실행합니다.<br>제너레이터 함수 블록에 yield 키워드를 작성하면 함수블록의 코드를 모두 실행하지 않고 yield 키워드 단위로 나누어 실행합니다.</p><p>제너레이터 함수는 new 연산자를 사용할 수 없으며 사용시 TypeError가 발생합니다.</p><hr><h2 id="function*_선언문">function* 선언문</h2><p>선언문 형태로 제너레이터 함수를 정의합니다.</p><blockquote><p>function* name([param[, param[, … param]]]) {<br>statements<br>}</p></blockquote><ul><li><p>name<br>함수명.</p></li><li><p>param<br>함수에 전달되는 인수의 이름. 함수는 인수를 255개까지 가질 수 있다.</p></li><li><p>statements<br>함수의 본체를 구성하는 구문들.</p></li><li><p>반환 값<br>Generator 객체를 반환합니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">function</span>* <span class="title">sports</span>(<span class="params">one, two</span>)</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"함수 블록"</span>);  </span><br><span class="line"> <span class="keyword">yield</span> one + two;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> sports);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> genObj = sports(<span class="number">1</span>, <span class="number">2</span>);  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> genObj);  </span><br><span class="line"><span class="comment">// function  </span></span><br><span class="line"><span class="comment">// object</span></span><br></pre></td></tr></table></figure><ol><li><p>function* sports(one, two){} 형태를 제너레이터 선언문이라고 합니다.<br>처음 제너레이터 함수를 호출하면서 넘겨주는 파라미터 값이 sports()의 파라미터에 작성한 이름(one, two)에 설정됩니다.</p></li><li><p>console.log(typeof sprts) 제너레이터 함수의 typeof는 function입니다.</p></li><li><p>let genObj = sports(1,2)<br>sports(1,2)로 호출하면 sports 함수 블록을 수행하지 않고 제너레이터 오브젝트를 생성하여 반환합니다. 함수 블록을 수행하면 console.log(“함수 블록”)이 실행되어야 하는데 실행되지 않습니다.<br>sports(1,2)에서 넘겨 준 파라미터 값이 function* sports(one,two){}의 파라미터 one 과 two에 설정됩니다. 따라서 제너레이터 오브젝트를 사용하여 제너레이터 함수를 호출했을 때 추가 처리를 하지 않아도 파라미터 값을 사용할 수 있습니다.</p></li><li><p>생성된 제너레이터 오브젝트의 type 인 object가 출력됩니다.</p></li></ol><p>Generator 설명<br>Generator는 빠져나갔다가 나중에 다시 돌아올 수 있는 함수입니다. 이때 컨텍스트(변수 값)는 출입 과정에서 저장된 상태로 남아 있습니다.</p><p>Generator 함수는 호출되어도 즉시 실행되지 않고, 대신 함수를 위한 Iterator 객체가 반환됩니다. Iterator의 next() 메서드를 호출하면 Generator 함수가 실행되어 yield 문을 만날 때까지 진행하고, 해당 표현식이 명시하는 Iterator로부터의 반환값을 반환합니다. yield* 표현식을 마주칠 경우, 다른 Generator 함수가 위임(delegate)되어 진행됩니다.</p><p>이후 next() 메서드가 호출되면 진행이 멈췄던 위치에서부터 재실행합니다. next() 가 반환하는 객체는 yield문이 반환할 값(yielded value)을 나타내는 value 속성과, Generator 함수 안의 모든 yield 문의 실행 여부를 표시하는 boolean 타입의 done 속성을 갖습니다. next() 를 인자값과 함께 호출할 경우, 진행을 멈췄던 위치의 yield 문을 next() 메서드에서 받은 인자값으로 치환하고 그 위치에서 다시 실행하게 됩니다.</p><hr><h2 id="function*_표현식">function* 표현식</h2><p>표현식 형태로 제너레이터 함수를 정의합니다.</p><blockquote><p>function* [name]([param1[, param2[, …, paramN]]]) {<br>statements<br>}</p></blockquote><ul><li><p>name<br>함수명. 생략하면 익명 함수가 됩니다. 함수명은 함수내에만 한정됩니다.</p></li><li><p>paramN<br>함수에 전달되는 인수의 이름. 함수는 최대 255 개의 인수를 가질 수 있습니다.</p></li><li><p>statements<br>함수의 본체를 구성하는 구문들.</p></li><li><p>반환 값<br>Generator 객체</p></li><li><p>function* expression 은 function* statement 과 매우 유사하고 형식도 같습니다. function* expression 과 function* statement 의 주요한 차이점은 함수명으로, function* expressions 에서는 익명 함수로 만들기 위해 함수명이 생략될 수 있습니다.</p></li></ul><figure class="highlight js"><figcaption><span>function* expression</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> sports = <span class="function"><span class="keyword">function</span>*(<span class="params">one, two</span>)</span>&#123;  </span><br><span class="line"> <span class="number">4.</span> <span class="built_in">console</span>.log(<span class="string">"함수 블록"</span>);  </span><br><span class="line"> <span class="keyword">yield</span> one + two;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> genObj = sports(<span class="number">10</span>, <span class="number">20</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="comment">//함수 블록  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 30, done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>function 이름이 없는 무명(혹은 익명) 함수입니다.<br>함수를 변수에 할당해 줌으로써 sports를 함수 이름으로 사용할 수 있습니다.<br>function_에 직접 함수 이름을 작성할 수 있지만, 외부에서 함수를 호출할 때는 sports()로 호출해야 합니다.<br>function_ 함수 이름은 함수 안에서 자신을 호출할 때 사용됩니다.(재귀 함수 호출)<br><del>하지만 변수에 할당하며 작성한 함수 이름으로 재귀 호출할 수 있으므로<br>function* 에 직접 함수이름을 작성하는 방법은 잘 사용하지 않습니다.<br>자바스크립트 초기 버전에서 사용했습니다.</del></p></li><li><p>sports(10, 20)으로 호출하여 제너레이터 오브젝트를 생성하고, 10을 파라미터 one에 설정하고 20을 two에 설정합니다.<br>이때, 함수 블록의 코드를 실행하지 않고 생성한 제너레이터 오브젝트를 반환합니다.</p></li><li><p>생성된 제너레이터 오브젝트는 이터레이터 오브젝트입니다. 제너레이터 오브젝트의 next()를 호출하면 이터레이터 오브젝트와 같은 처리를 수행합니다.<br>next()를 호출하여 sports 제너레이터 함수의 함수 블록을 수행합니다.</p></li><li><p>제너레이터 함수 블록의 코드 입니다.<br>console에 “함수 블록”을 출력합니다.<br>sports(10, 20)으로 호출했을 때, one과 two에 값을 설정했으므로<br>yield 키워드에서 파라미터 이름으로 값을 구할 수 있습니다.<br>yield 키워드는 yield 오른쪽의 표현식을 평가하고,<br>평가 결과를 {value: 30, done: false} 형태로 반환합니다.</p></li></ol><hr><p><strong>개발자 도구에서 sports 제너레이터 함수</strong> (== 크롬브라우저)</p><img src="/images/sportsConsole.JPG"><p>엔진이 function* 키워드를 만나면 제너레이터 함수 오브젝트를 생성하여<br>sports 변수에 할당 합니다.</p><p>sports(10, 20)을 호출하면 sports.prototype에 연결된 프로퍼티로 제너레이터 오브젝트를 생성하여 반환합니다.</p><p>&#95;&#95;proto&#95;&#95;.constructor는 생성자 함수로 이름이 GeneratorFunction입니다.</p><p>반환된 제너레이터 오브젝트에<br>&#95;&#95;proto&#95;&#95;.&#95;&#95;proto&#95;&#95;에 next()가 있으므로<br>genObj.next()형태로 호출할 수 있습니다.</p><hr><h2 id="GeneratorFunction">GeneratorFunction(): 제너레이터 함수 생성</h2><p>제너레이터 함수를 생성하여 반환합니다.</p><p>GeneratorFunction 생성자는 새로운 generator function 객체를 생성합니다. JavaScript 에서 모든 generator function 은 실제로 GeneratorFunction object 입니다.</p><p>주의할 점은, GeneratorFunction 이 전역 객체(global object)가 아니란 점입니다. GeneratorFunction은 다음의 코드를 실행해서 얻을 수 있습니다.</p><blockquote><p>Object.getPrototypeOf(function*(){}).constructor</p></blockquote><p>new 연산자로 GeneratorFunction() 함수를 호출할 수 없습니다. 이름 없는 제너레이터 함수를 생성하고, 여기에 연결된 constructor를 사용하여 제너레이터 함수를 생성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> GenConst = <span class="built_in">Object</span>.getPrototypeOf(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;&#125;).constructor;  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> sports = <span class="keyword">new</span> GenConst(  </span><br><span class="line"> <span class="string">"one"</span>, <span class="string">"two"</span>,  </span><br><span class="line"> <span class="string">"console.log('함수 블록'); yield one + two"</span>  </span><br><span class="line">);  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> genObj = sports(<span class="number">3</span>, <span class="number">4</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="comment">// 함수 블록  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 7, done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>제너레이터 함수를 생성하기 위한 생성자(constructor)를 구합니다.<br>function*(){}으로 익명 제너레이터 함수를 생성하여 Object.getPrototypeOf()의 파라미터 값으로 지정합니다. 익명 제너레이터 함수의 prototype 오브젝트가 반환됩니다. prototype에 constructor가 있으므로 이를 반환하고 GenConst에 할당합니다. (Genconst 변수가 생성자 함수가 되는 것 입니다.)</p></li><li><p>new 연산자로 GenConst 생성자를 호출하여 제너레이터 함수를 생성합니다.<br>(GenConst의 파라미터에 생성될 제너레이터 함수에서 사용할 파라미터와 함수 블록 코드를 문자열로 작성합니다.)<br>첫 번째 one 과 두 번째 two가 제너레이터 함수의 파라미터가 되고,<br>세 번째 파라미터가 함수 블록 코드가 됩니다.</p></li></ol><p>파라미터의 문자열을 parsing(문자열 해석?)하면 다음과 같은 형태가 되는 것입니다.</p><figure class="highlight js"><figcaption><span>new GenConst parsing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>*(<span class="params">one,two</span>)</span>&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'함수 블록'</span>);  </span><br><span class="line"> <span class="keyword">yield</span> one + two  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>sports(3,4)로 호출하면 제너레이터 오브젝트를 생성하여 반환합니다.<br>function*(one, two){}에서 3이 one에 4가 two에 설정됩니다.</p></li><li><p>next()를 호출하면 함수 블록 코드를 실행합니다.<br>Object {value: 7, done: false}를 반환합니다.</p></li></ol><hr><h2 id="yield">yield: 제너레이터 함수 실행, 멈춤</h2><p>yield 키워드는 제너레이터 함수를 멈추게 하거나 다시 실행하는데 사용됩니다.</p><blockquote><p>[returnValue] = yield [expression];</p></blockquote><ul><li><p>expression<br>제너레이터 함수에서 제너레이터 프로토콜을 통해 반환할 값을 정의합니다(표현식). 값이 생략되면, undefined를 반환합니다.</p></li><li><p>returnValue<br>제너레이터 실행을 재개 하기 위해서, optional value을 제너레이터의 next() 메서드로 전달하여 반환합니다.</p></li><li><p>yield의 표현식 평가 결과를 왼쪽의 returnValue에 할당하지 않습니다.<br>제너레이터 오브젝트의 next()를 호출하면 next() 파라미터 값이 returnValue에 할당됩니다.</p></li><li><p>next()로 제너레이터 함수를 호출하면 yield 작성에 관계없이 “{value: 값, done: false/true}” 형태로 반환합니다.</p></li><li><p>yield를 수행하면 표현식 평가 결과가 value 값에 설정되고, yield를 수행하지 못하면 undefined가 설정됩니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">sports</span>(<span class="params">one</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">let</span> two = <span class="keyword">yield</span> one;  </span><br><span class="line"> <span class="keyword">let</span> param = <span class="keyword">yield</span> two + one;  </span><br><span class="line"> <span class="keyword">yield</span> param + one;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> generatorObj = sports(<span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(generatorObj.next());  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(generatorObj.next());  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(generatorObj.next(<span class="number">20</span>));  </span><br><span class="line"><span class="comment">//Object &#123;value: 10, done: false&#125;  </span></span><br><span class="line"><span class="comment">//Object &#123;value: NaN, done: false&#125;  </span></span><br><span class="line"><span class="comment">//Object &#123;value: 30, done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>sports(10)으로 호출하여 제너레이터 함수의 one 파라미터에 10이 설정되고<br>제너레이터 오브젝트를 생성하여 반환합니다. (함수 블록의 코드는 실행하지 않습니다.)</p></li><li><p>generatorObj.next()를 호출하면 sports 제너레이터 함수 블록의 첫 줄부터 첫 번째 yield까지 수행합니다. == (let two = yield one;)<br>yield의 표현식 평과 결과 {value: 10, done: false}형태를 반환합니다.<br>할당연산자(=)는 오른쪽 값을 왼쪽 변수에 할당하지만, yield 의 할당연산자(=)는 할당하지 않습니다.</p></li><li><p>next()를 다시한번 호출하면 파라미터 값을 (let two = yield one)에서 two 변수에 설정합니다. 파라미터 값이 지정되지 않았으며 undefined가 two 변수에 설정됩니다. 그리고 아래 코드를 실행합니다.<br>two 변수에 undefined가 설정되어 있고, one 변수에 10이 설정되어 있으므로<br>Object {value: NaN, done: false}를 반환합니다. NaN을 param 변수에 설정하지 않습니다.</p></li><li><p>next(20)으로 호출하면 파라미터 값 20을 (let param = yield two + one)에서 param 변수에 설정합니다. param 변수 값이 20이고 one 변수 값이 10이므로<br>{value: 30, done: false}를 반환합니다.</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">sports</span>(<span class="params">one</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">yield</span> one;  </span><br><span class="line"> <span class="number">4.</span> <span class="keyword">let</span> check = <span class="number">10</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> genObj = sports(<span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="comment">//Object &#123;value: 10, done: false&#125;  </span></span><br><span class="line"><span class="comment">//Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>sports(10) 으로 호출하면 제너레이터 함수의 one 파라미터에 10이 설정되고<br>제너레이터 오브젝트를 생성하여 반환합니다.</p></li><li><p>next()를 호출하면 함수 블록의 첫 줄부터 첫 번째 yield의 표현식까지 수행합니다. yield one; = {value: 10, done: false} 형태로 반환합니다.</p></li><li><p>next()를 호출하면 파라미터 값을 바로 앞 yield 왼쪽에 있는 변수에 할당합니다.<br>그런데 왼쪽의 변수가 없으므로 값을 할당하지 않습니다.<br>이후에 아래 코드를 실행합니다.</p></li><li><p>check에 10을 할당하는 코드이지만 더 이상 수행할 yield는 없고<br>함수 안에 더 처리해야할 코드도 없습니다. 반환할 값이 없습니다.<br>value 프로퍼티 값에 undefined를 설정하고, done 프로퍼티 값에 true를 설정합니다. {value: undefined, done: true} 형태로 반환됩니다.</p></li></ol><hr><h2 id="next">next(): yield 단위로 실행</h2><p>제너레이터 함수에서 yield 단위로 실행합니다.</p><p>next()를 호출하면 yield를 기준으로 이전 yield의 다음 줄부터 yield까지 수행합니다.</p><p>제너레이터 함수에 yield가 여러개 작성되어 있으면, yield 수만큼 next()를 작성해줘야 제너레이터 함수 전체를 실행하게 됩니다.</p><p>파라미터는 선택으로 제너레이터 함수가 멈춘 yield의 왼쪽 변수에 설정합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params">value</span>)</span>&#123;  </span><br><span class="line"> value = value + <span class="number">10</span>;  </span><br><span class="line"> <span class="keyword">yield</span> ++value;  </span><br><span class="line"> value = value + <span class="number">7</span>;  </span><br><span class="line"> <span class="keyword">yield</span> ++value;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> genObj = gen(<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="comment">//Object &#123;value: 12, done: false&#125;  </span></span><br><span class="line"><span class="comment">//Object &#123;value: 20, done: false&#125;  </span></span><br><span class="line"><span class="comment">//Object &#123;value: undefined, done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>gen(1)로 호출하면 제너레이터 함수의 value 파라미터에 1이 설정되며 제너레이터 오브젝트를 생성하여 반환합니다.</p></li><li><p>next()를 호출하면 제너레이터 함수 첫 줄부터 yield의 표현식까지 수행합니다.<br>즉, 다음 코드를 실행합니다.<br>value = value + 10;<br>yield ++value;<br>파라미터로 받은 1에 10을 더해 value에 할당합니다.<br>다음으로 yield ++value;를 실행하여 value값에 1을 더합니다.<br>{value: 12, done: false}가 반환됩니다.</p></li><li><p>다시 next()를 호출하면 yield ++value에서 yield 왼쪽에 파라미터 값을 설정합니다. 그런데 왼쪽에 변수가 없으므로 다음 코드를 실행합니다.<br>value = value + 7;<br>yield ++value;<br>value 변수 값이 12이므로 7을 더해 19를 value에 할당합니다.<br>다음으로 yield ++value;을 실행하여 {value: 20, done: false}를 반환합니다.</p></li><li><p>다시 next()를 호출하면 제너레이터 함수에 yield가 없으므로<br>{value: undefined, done: false}를 반환합니다.</p></li></ol><hr><h2 id="next_ex">next() 활용 예제</h2><p>청구 금액과 할인 금액 계산하여 반환</p><ol><li><p>청구 금액을 계싼하는 제너레이터 함수와 할인 금액을 계산하는 일반 함수를 정의합니다.</p></li><li><p>청구 금액 계산 제너레이터 함수는 수량과 단가를 파라미터로 받아 금액을 계산합니다.</p></li><li><p>계산한 금액을 yield로 반환합니다.</p></li><li><p>할인 금액 함수를 호출하면서 yield로 반환된 값을 파라미터 값으로 넘겨 줍니다.</p></li><li><p>파라미터의 금액에 따라 할인 금액을 계산하여 반환합니다.</p></li><li><p>청구 금액 계산 제너레이터 함수를 호출하면서 할인 금액을 파라미터로 넘겨줍니다.</p></li><li><p>합계 금액에서 할인 금액을 빼서 청구 금액을 계산합니다,</p></li><li><p>계산된 청구 금액을 반환합니다.</p></li></ol><figure class="highlight js"><figcaption><span>next(), yield 활용 예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 청구 금액을 계산하는 제너레이터 함수 getAmount  </span></span><br><span class="line"><span class="comment">// 파라미터 qty = 수량 , price = 단가  </span></span><br><span class="line"><span class="keyword">let</span> getAmount = <span class="function"><span class="keyword">function</span>*(<span class="params">qty, price</span>)</span>&#123;  </span><br><span class="line"><span class="comment">// 함수가 처음 호출될 때 수량에 단가를 곱해 합계 금액을 구하고 소숫점은 버립니다.  </span></span><br><span class="line"> <span class="keyword">let</span> amount = <span class="built_in">Math</span>.floor(qty * price);  </span><br><span class="line"><span class="comment">// 두 번째 호출될 때 할인 금액(discount)을 받아   </span></span><br><span class="line"><span class="comment">// 합계 금액에서 할인 금액을 빼서 반환합니다.  </span></span><br><span class="line"> <span class="keyword">let</span> discount = <span class="keyword">yield</span> amount;  </span><br><span class="line"> <span class="keyword">return</span> amount - discount;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// 할인 금액을 구하는 함수 getDiscount  </span></span><br><span class="line"><span class="comment">// 파라미터 값인 amount가 1000 보다 크면 0.2를 곱하고  </span></span><br><span class="line"><span class="comment">// 아니면 0.1을 곱합니다.  </span></span><br><span class="line"><span class="keyword">let</span> getDiscount = <span class="function"><span class="keyword">function</span>(<span class="params">amount</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> amount &gt; <span class="number">1000</span> ? amount * <span class="number">0.2</span> : amount * <span class="number">0.1</span>;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// getAmount(10, 60)으로 호출하여 qty값 10 price값 60이 설정됩니다.  </span></span><br><span class="line"><span class="comment">// 제너레이터 오브젝트를 생성하여 반환합니다.  </span></span><br><span class="line"><span class="keyword">let</span> amountObj = getAmount(<span class="number">10</span>, <span class="number">60</span>);  </span><br><span class="line"><span class="comment">// next()를 호출하여 제너레이터 함수를 실행시키고 반환된 결과를  </span></span><br><span class="line"><span class="comment">// result 변수에 할당합니다.  </span></span><br><span class="line"> <span class="comment">/*  </span></span><br><span class="line"><span class="comment"> let amount = Math.floor(qty * price);  </span></span><br><span class="line"><span class="comment"> 10 * 60 = 600  </span></span><br><span class="line"><span class="comment"> amount에 600이 할당됩니다.  </span></span><br><span class="line"><span class="comment"> &#123;value: 600, done: false&#125; 반환  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">let</span> result = amountObj.next();  </span><br><span class="line"><span class="built_in">console</span>.log(result);  </span><br><span class="line"><span class="comment">//할인 금액을 구하는 함수  </span></span><br><span class="line"><span class="comment">//앞의 next()에서 value:600을 반환했으므로 파라미터 값으로 600을 넘겨줍니다.  </span></span><br><span class="line"><span class="comment">//호출된 dcAmount에서 60을 반환합니다.  </span></span><br><span class="line"><span class="keyword">let</span> dcAmount = getDiscount(result.value);  </span><br><span class="line"><span class="built_in">console</span>.log(dcAmount);  </span><br><span class="line"><span class="comment">//next(dcAmount)로 호출하여 파라미터 값 60을 넘겨줍니다  </span></span><br><span class="line"><span class="comment">// let discount = yield amount 에서 60이 discount에 설정됩니다.  </span></span><br><span class="line"><span class="comment">// 그리고 return amount - discount 를 실행하여  </span></span><br><span class="line"><span class="comment">// &#123;value: 540, done: true&#125;를 반환합니다.  </span></span><br><span class="line"><span class="built_in">console</span>.log(amountObj.next(dcAmount));</span><br></pre></td></tr></table></figure><hr><h3 id="next-의-다양한-형태"><a href="#next-의-다양한-형태" class="headerlink" title="next()의 다양한 형태"></a>next()의 다양한 형태</h3><p>next()와 yield를 조합한 다양한 형태를 살펴 봅니다.<br>제너레이터 함수를 계속 호출 하려면 yield가 이에 대응할 수 있어야 합니다.<br>이를 위해 한 줄에 다수의 yield를 작성할 수도 있고,<br>배열 안에 다수의 yield를 작성할 수도 있습니다.</p><figure class="highlight js"><figcaption><span>next-while</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params">value</span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">let</span> count = <span class="number">0</span>;  </span><br><span class="line"> <span class="keyword">while</span> (value)&#123;  </span><br><span class="line"> <span class="keyword">yield</span> ++count;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> genObj = gen(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: 1, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 2, done: false&#125;</span></span><br></pre></td></tr></table></figure><p>제너레이터 함수에 while문을 작성하고 그 안에 yield를 작성한 형태입니다.</p><ol><li><p>처음 next()를 호출하면 gen()함수의 첫 줄부터 yield까지 수행한 후 그 값을 반환합니다.<br>(let count = 0;)는 처음 한 번만 실행되고 다음부터는 실행하지 않습니다.<br>while(value){}에서 value 파라미터 값이 true이므로 블락을 실행합니다.<br>yield ++count가 실행되어 {value: 1, done: false}를 반환합니다.</p></li><li><p>다시 next()를 호출하면 앞에서 증가된 count 변수 값이 유지되므로 값을 누적할 수 있습니다. yield ++count를 실행하여 {value: 2, done: false}를 반환합니다.<br>이와 같이 while문 안에 yield를 작성하면 next()를 호출할 때마다 yield가 수행됩니다.</p></li></ol><figure class="highlight js"><figcaption><span>next-return-yield</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">yield</span> <span class="keyword">yield</span> <span class="keyword">yield</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">let</span> genObj = gen();  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(genObj.next(<span class="number">10</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(genObj.next(<span class="number">20</span>));  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(genObj.next(<span class="number">30</span>));  </span><br><span class="line"><span class="comment">// Object &#123;value: undefined, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 10, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 20, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 30, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>제너레이터 함수의 return 문에 다수의 yield를 작성한 형태입니다.<br>return 문의 표현식에 yield가 3개 작성되어 있습니다.</p><ol><li><p>처음 next()를 호출하면 첫 번째 yield를 수행합니다.<br>yield에 반환 값이 없으므로 {value: undefined, done: false}를 반환합니다.</p></li><li><p>두 번째로 next(10)을 호출하면 두 번째 yield를 수행합니다.<br>왼쪽에 파라미터 값을 받을 변수가 없으므로 파라미터로 넘겨준 값 그대로 반환합니다. 따라서 {value: 10, done: false}를 반환합니다.</p></li><li><p>세 번째로 next(20)을 호출하면 세 번째 yield를 수행합니다.<br>{value: 20, done: false}를 반환합니다.</p></li><li><p>마지막으로 next(30)을 호출하면 수행할 yield가 없습니다.<br>{done: true}를 반환하고, return을 작성했으므로 파라미터로 넘겨준 값을<br>반환 합니다. 즉 {value: 30, done: false}이 반환됩니다.<br>return을 작성하지 않으면 {value: undefined, done: true}를 반환합니다.</p></li></ol><figure class="highlight js"><figcaption><span>next-array-yield</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> [<span class="keyword">yield</span> <span class="keyword">yield</span>];  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> genObj = gen();  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(genObj.next(<span class="number">10</span>));  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(genObj.next(<span class="number">20</span>));  </span><br><span class="line"><span class="comment">// Object &#123;value: undefined, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 10, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: Array[1], done: true&#125;</span></span><br></pre></td></tr></table></figure><p>제너레이터 함수의 return 문에 배열안에 다수의 yield를 작성한 형태입니다.</p><ol><li><ol start="2"><li>는 return문에 yield을 연속으로 작성한 것과 같습니다.<br>yield가 2개 뿐이므로 더 이상 수행할 yield가 없는 상태가 됩니다.</li></ol></li><li><p>마지막으로 next(20)을 호출하면 (return [yield yield])에서 yield를 제외한<br>[]안에 파라미터로 넘겨준 값을 작성합니다.<br>{value: Array[1], done: true} 형태로 반환됩니다.<br>Array[1]은 {0:20} 입니다.</p></li></ol><figure class="highlight js"><figcaption><span>for-of-yield</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params">start</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">let</span> value = start;  </span><br><span class="line"> <span class="keyword">while</span> (<span class="literal">true</span>)&#123;  </span><br><span class="line"> <span class="keyword">yield</span> ++value;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> count <span class="keyword">of</span> gen(<span class="number">10</span>))&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(count);  </span><br><span class="line"> <span class="keyword">if</span> (count &gt; <span class="number">12</span>)&#123;  </span><br><span class="line"> <span class="keyword">break</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// 11  </span></span><br><span class="line"><span class="comment">// 12  </span></span><br><span class="line"><span class="comment">// 13</span></span><br></pre></td></tr></table></figure><p>for-of() 문에 제너레이터 함수를 호출하는 코드를 작성한 형태입니다.</p><ul><li><p>처음 for-of 문을 시작하면 gen(10)을 호출하여 제너레이터 함수의 start 파라미터에 10을 설정하고 제너레이터 오브젝트를 생성하여 반환합니다.<br>호출한 gen(10) 위치로 돌아오면 반환받은 오브젝트를 할당할 변수가 없으므로 엔진 내부에 저장합니다.</p></li><li><p>gen() 함수를 호출하며 이는 next()를 호출한 것과 같습니다.<br>let value = start;를 수행한 후 while (true){yield ++value;}를 수행합니다.<br>{value: 11, done:false}를 반환하게 되며 value 프로퍼티 값이 count 변수에 설정됩니다.</p></li><li><p>for-of 문의 블록에 작성한 코드를 수행하며 콘솔에 11이 출력됩니다.<br>count 변수 값이 11이므로 다시 for-of 문을 반복하게 됩니다.<br>count 변수 값이 12보다 클때 까지 for-of문을 반복합니다.</p></li></ul><hr><h2 id="throw">throw(): Error 발생</h2><p>throw() 메서드는 Generator의 실행을 재개시키고 Generator 함수의 실행 문맥 속으로 error를 주입합니다.</p><p>제너레이터 함수를 호출하여 받은 제너레이터 오브젝트의 throw()를 호출하면<br>에러가 발생합니다. 에러가 발생하면 제너레이터 함수의 catch()문에서 에러를 받습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">try</span> &#123;  </span><br><span class="line"> <span class="keyword">yield</span> <span class="number">10</span>;  </span><br><span class="line"> &#125; <span class="keyword">catch</span> (message) &#123;  </span><br><span class="line"> <span class="keyword">yield</span> message;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">yield</span> <span class="number">20</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">let</span> genObj = gen();  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(genObj.throw(<span class="string">"에러 발생"</span>));  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: 10, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: "에러 발생", done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 20, done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>next()를 호출하면 try문 의 (yield 10;)을 실행합니다.<br>에러가 발생하지않으며 {value: 10, done: false}를 반환합니다.</p></li><li><p>throw(“에러 발생”)를 호출하면 제너레이터 함수의 catch(message)가 실행됩니다.<br>throw()의 파라미터 값이 catch(message)의 message 파라미터에 설정됩니다.<br>catch() 블록{}의 (yield message;)가 실행되어 {value: “에러 발생”, done: false}가 반환됩니다.<br>중요한 점은 done: false를 반환한다는 점입니다. 즉, 에러는 발생했지만 다음에 next()를 호출할 수 있습니다.</p><ul><li>genObj.throw(Error(“에러 발생”)); 과 같이 파라미터에 Error 오브젝트를 작성할 수도 있습니다.</li></ul></li><li><p>앞에서 throw()를 호출하며 catch()블록을 수행했지만 이터레이터가 종료된 것은 아닙니다. 따라서 다시 next()를 호출할 수 있으며 함수의 (yield 20;)을 수행하여<br>{value: 20, done: false}를 반환합니다.</p></li></ol><figure class="highlight js"><figcaption><span>제너레이터 함수에서 에러가 발생</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">throw</span> <span class="string">"에러 발생"</span>;  </span><br><span class="line"> <span class="keyword">yield</span> <span class="number">20</span>;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> genObj = gen();  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">try</span> &#123;  </span><br><span class="line"> <span class="keyword">let</span> result = genObj.next();  </span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(error);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="comment">//에러 발생  </span></span><br><span class="line"><span class="comment">// Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>try문에서 next()를 호출하면 제너레이터 함수 첫 줄에서 throw문으로 인해 에러가 발생하며, catch(error)에서 에러를 받습니다.<br>(throw “에러 발생”)에서 “에러 발생”이 catch(error)의 error 파라미터에 설정됩니다.</p></li><li><p>제너레이터 함수에서 에러가 발생하면 이터레이터가 종료됩니다.<br>따라서 next()를 실행하면 제너레이터 함수내에 throw “에러 발생” 밑에<br>yield 20;이 있지만 실행되지 않습니다.<br>{value: undefined, done: true}가 반환됩니다.</p></li></ol><hr><h2 id="yield*">yield* 키워드</h2><blockquote><p>yield* [[expression]]</p></blockquote><p>표현식(expression)에 이터러블 오브젝트를 작성합니다. next()를 호출할 때 마다<br>이터러블 오브젝트를 하나씩 실행하며, 결과 값을 yield의 반환 값으로 사용합니다.</p><p>표현식에 제너레이터 함수를 작성할 수 있습니다.<br>표현식으로 호출된 함수에 다수의 yield가 있으면 호출된 함수의 yield를 전부 처리한 후 yield* 아래에 작성한 코드를 실행합니다.</p><figure class="highlight js"><figcaption><span>yield* 표현식에 제너레이터 함수 작성 형태</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> plusGen = <span class="function"><span class="keyword">function</span>*(<span class="params">value</span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">yield</span> value + <span class="number">5</span>;  </span><br><span class="line"> <span class="keyword">yield</span> value + <span class="number">10</span>;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params">value</span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">yield</span>* plusGen(value);  </span><br><span class="line"> <span class="keyword">yield</span> value + <span class="number">20</span>;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">let</span> genObj = gen(<span class="number">10</span>);  </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(<span class="string">"1:"</span>, genObj.next());  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="string">"2:"</span>, genObj.next());  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(<span class="string">"3:"</span>, genObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: 15, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 20, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 30, done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>console.log로 genObj.next()를 호출하면 실행되는 순서가 다음과 같습니다.</p><ol><li><p>gen() 함수의 yield* plusGen(value)을 실행합니다.</p></li><li><p>yield*를 작성했으므로 plusGen(value)을 호출하면서 파라미터 값으로 10을 넘겨줍니다.</p></li><li><p>plusGen()이 제너레이터 함수이므로 제너레이터 오브젝트를 생성하여 반환합니다.</p></li><li><p>next()로 호출헤야 plusGen() 함수의 yield를 수행하지만, 이때는 자동으로 plusGen()의 첫 번째 (yield value + 5)를 수행하며 {value: 15, done: false}를 반환합니다.</p></li><li><p>plusGen()을 호출한 곳에서 다시 yield를 수행하므로 plusGen()에서 반환된 값을 반환합니다.</p></li><li><p>콘솔에 Object {value: 15, done: false}를 출력합니다.</p></li></ol></li></ol><ol start="2"><li><p>next()를 호출하면 plusGen()에서 수행하지 않은 (yield value + 10;)을 실행하며 Object {value: 20, done: false}를 반환합니다.</p></li><li><p>next()를 호출하면 plusGen()에 더 이상 실행할 yield가 없으므로<br>plusGen()을 호출한 gen() 함수 내의 코드 아래의 코드를 수행합니다.<br>(yield value + 20;) 을 실행하게 되며 Object {value: 30, done: false}를 반환합니다.</p></li></ol><figure class="highlight js"><figcaption><span>yield* 표현식 재귀 호출 형태</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gen = <span class="function"><span class="keyword">function</span>*(<span class="params">value</span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">yield</span> value;  </span><br><span class="line"> <span class="keyword">yield</span>* gen(value + <span class="number">10</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">let</span> genObj = gen(<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(genObj.next());  </span><br><span class="line"><span class="comment">// Object &#123;value: 1, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 11, done: false&#125;  </span></span><br><span class="line"><span class="comment">// Object &#123;value: 21, done: false&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>처음 next()를 호출하면 제너레이터 함수 첫째 줄의 (yield value;)를 실행하며<br>{value: 1, done: false}를 반환합니다.</p></li><li><p>두 번째로 next()를 호출하면 (yield* gen(value + 10);)을 실행합니다.<br>그런데 yield* 표현식에서 자신 함수(gen)를 호출합니다. 파라미터 값으로 11을 넘겨주며 next()가 없지만 엔진에서 반환받은 오브젝트의 제너레이터 함수를 호출합니다. (yield value;)가 실행되며 {value: 11, done: false}를 반환합니다.<br><mark>이때, yield value;가 없다면 계속해서 자신을 호출하게 되므로 무한 루프를 돌게됩니다.</mark></p></li><li><p>세 번째로 next()를 호출하면 (yield* gen(value + 10);)을 실행하고<br>자신을 호출합니다. 위와 같이 진행되어 {value: 21, done: false}를 반환합니다.</p></li></ol>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/03/31/Generator%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Array 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/03/30/Array%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/03/30/Array%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</guid>
      <pubDate>Sun, 29 Mar 2020 22:55:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;ES6에서 Array오브젝트에 9개의 메서드가 추가되었습니다.&lt;br&gt;추가된 메서드를 살펴봅니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Array 오브젝트&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_from&quot;&gt;from(): Array 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_of&quot;&gt;of(): 배열 엘리먼트 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_copyWithin&quot;&gt;copyWithin(): 범위 값 복사, 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_fill&quot;&gt;fill(): 범위 값 변경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_enteries&quot;&gt;entries(): 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_keys&quot;&gt;keys(): key 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_values&quot;&gt;values(): value 이터레이터 오브젝트 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_find&quot;&gt;find(): 엘리먼트 값 비교, 반환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_findeIndex&quot;&gt;findIndex(): 배열 인덱스 반환&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>ES6에서 Array오브젝트에 9개의 메서드가 추가되었습니다.<br>추가된 메서드를 살펴봅니다.</p><ul><li>Array 오브젝트<ul><li><a href="/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_from">from(): Array 오브젝트 생성</a></li><li><a href="/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_of">of(): 배열 엘리먼트 설정</a></li><li><a href="/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_copyWithin">copyWithin(): 범위 값 복사, 설정</a></li><li><a href="/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_fill">fill(): 범위 값 변경</a></li><li><a href="/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_enteries">entries(): 이터레이터 오브젝트 생성</a></li><li><a href="/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_keys">keys(): key 이터레이터 오브젝트 생성</a></li><li><a href="/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_values">values(): value 이터레이터 오브젝트 생성</a></li><li><a href="/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_find">find(): 엘리먼트 값 비교, 반환</a></li><li><a href="/2020/03/30/Array%20오브젝트%20-ECMAScript/#Array_findeIndex">findIndex(): 배열 인덱스 반환</a></li></ul></li></ul><a id="more"></a><hr><h2 id="Array_from">from(): Array 오브젝트 생성</h2><p>새로운 Array 오브젝트를 생성하고 콜백 함수에서 반환된 값을 엘리먼트 값으로 설정하여 새로운 Array 객체를 반환합니다.</p><blockquote><p>Array.from(arrayLike[, mapFn[, thisArg]])</p></blockquote><ul><li><p>arrayLike<br>배열로 변환하고자 하는 유사 배열 객체(Array-like)나 반복 가능한 객체(이터러블 오브젝트).</p></li><li><p>mapFn (선택적 파라미터)<br>배열의 모든 엘리먼트 마다 호출할 함수.</p></li><li><p>thisArg (선택적 파라미터)<br>두 번째 파라미터 함수 실행 시에 this로 참조할 값.</p></li><li><p>반환 값<br>새로운 Array 인스턴스.</p></li></ul><h3 id="중요-포인트"><a href="#중요-포인트" class="headerlink" title="중요 포인트"></a>중요 포인트</h3><p>다음과 같은 경우에 Array.from()으로새Array를 만들 수 있습니다.</p><ul><li>유사 배열 객체 (length 속성과 인덱싱된 요소를 가진 객체)</li><li>순회 가능한 객체 (Map, Set 등객체의 요소를 얻을 수 있는 객체)</li></ul><p>Array.from()은 선택 매개변수인 mapFn를 가지는데,배열(혹은 배열 서브클래스)의 각 요소를 맵핑할 때 사용할 수 있습니다. 즉,Array.from(obj, mapFn, thisArg)는 중간에 다른 배열을 생성하지 않는다는 점을 제외하면Array.from(obj).map(mapFn, thisArg)와 같습니다. 이 특징은 typed arrays와 같은 특정 배열 서브클래스에서 중간 배열 값이 적절한 유형에 맞게 생략되기 때문에 특히 중요합니다.</p><p>from() 메서드의 length 속성은 1입니다.</p><p>ES2015 이후, 클래스 구문은 내장 및 새 클래스의 상속을 가능케 했습니다. 그 결과로 Array.from과 같은 정적 메서드는 Array의 서브클래스에 의해 상속되며, Array 대신 자신의 인스턴스를 만듭니다.</p><figure class="highlight js"><figcaption><span>예제1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> arrayObj = <span class="built_in">Array</span>.from(&#123;<span class="number">0</span>: <span class="string">"zero"</span>, <span class="number">1</span>: <span class="string">"one"</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arrayObj));  </span><br><span class="line"><span class="built_in">console</span>.log(arrayObj);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> stringObj = <span class="built_in">Array</span>.from(<span class="string">"ABC"</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(stringObj);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// true  </span></span><br><span class="line"><span class="comment">// ["zero","one"]  </span></span><br><span class="line"><span class="comment">// ["A", "B", "C"]</span></span><br></pre></td></tr></table></figure><ol><li><p>Array.from() 첫 번째 파라미터에 Array-like 오브젝트를 작성했습니다.<br>새로운 Array 오브젝트를 생성하고 Array-like 오브젝트의 프로퍼티 값을 배열에 추가하여 반환합니다. {0:”zero”, 1:”one”, length: 2}에서 프로퍼티 키와 length 프로퍼티를 제외한 “zero” 와 “one”이 생성된 Array 오브젝트에 추가됩니다.</p></li><li><p>Array.from() 파라미터 “ABC” 를 생성한 Array 오브젝트 배열의 엘리먼트에 하나씩 설정하여 반환합니다. 즉[“A”, “B”, “C”] 형태로 반환합니다.</p></li></ol><figure class="highlight js"><figcaption><span>예제2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;<span class="number">0</span>: <span class="number">10</span>, <span class="number">1</span>: <span class="number">30</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;;  </span><br><span class="line"><span class="keyword">let</span> values = <span class="built_in">Array</span>.from(arrayLike, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> value + <span class="keyword">this</span>.bonus;  </span><br><span class="line">&#125;, &#123;<span class="attr">bonus</span>: <span class="number">100</span>&#125;);  </span><br><span class="line"><span class="built_in">console</span>.log(values);  </span><br><span class="line"><span class="comment">// [110, 130]</span></span><br></pre></td></tr></table></figure><p>Array-like 오브젝트의 프로퍼티를 하나씩 읽어 갑니다.<br>프로퍼티를 읽을 때 마다 콜백 함수를 호출 합니다.<br>읽은 프로퍼티 값이 콜백 함수의 value 파라미터에 설정됩니다.<br>콜백 함수에서 this로 from()의 세 번째 파라미터에 지정한 오브젝트를 참조할 수 있습니다. Array-like 오브젝트의 length 프로퍼티는 참조되지 않습니다.</p><ol><li><p>첫 번째 파라미터의 첫 번째 프로퍼티 값은 10 이며<br>두 번째 파라미터 콜백 함수의 value 파라미터에 설정됩니다.<br>this.bonus는 bonus 값을 참조합니다.</p></li><li><p>value + this.bonus는 110이 반환되고 생성된 Array 배열에 추가됩니다.</p></li><li><p>두 번째 프로퍼티 값인 30도 같은 방법으로 처리되고 최종적으로 생성된 배열을 반환합니다.</p></li></ol><h3 id="그외-예제"><a href="#그외-예제" class="headerlink" title="그외 예제"></a>그외 예제</h3><ul><li><p>Set에서 배열 만들기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([‘foo’, <span class="built_in">window</span>]);  </span><br><span class="line"><span class="built_in">Array</span>.from(s);  </span><br><span class="line"><span class="comment">// [“foo”, window]</span></span><br></pre></td></tr></table></figure></li><li><p>Map에서 배열 만들기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">8</span>]]);  </span><br><span class="line"><span class="built_in">Array</span>.from(m);  </span><br><span class="line"><span class="comment">// [[1, 2], [2, 4], [4, 8]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapper = <span class="keyword">new</span> <span class="built_in">Map</span>([[‘<span class="number">1</span>’, ‘a’], [‘<span class="number">2</span>’, ‘b’]]);  </span><br><span class="line"><span class="built_in">Array</span>.from(mapper.values());  </span><br><span class="line"><span class="comment">// [‘a’, ‘b’];</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(mapper.keys());  </span><br><span class="line"><span class="comment">// [‘1’, ‘2’];</span></span><br></pre></td></tr></table></figure></li><li><p>배열 형태를 가진 객체(arguments)에서 배열 만들기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);  </span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>Array.from과 화살표 함수 사용하기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], x =&gt; x + x);  </span><br><span class="line"><span class="comment">// [2, 4, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 숫자생성  </span></span><br><span class="line"><span class="comment">// Array는 초기화 될때 각 위치마다 ‘undefined’값으로 초기화 됩니다.  </span></span><br><span class="line"><span class="comment">// 아래의 v 의 value 값은 undefined 가 될 것입니다.  </span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="number">5</span>&#125;, (v, i) =&gt; i);  </span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* * *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;h2 id="Array_of"&gt;of(): 배열 엘리먼트 설정&lt;/h2&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">파라미터 값을 새로운 배열의 엘리먼트로 설정하여 반환합니다.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; Array.of(element0[, element1[, …[, elementN]]])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*   매개변수  </span></span><br><span class="line"><span class="string">    elementN  </span></span><br><span class="line"><span class="string">    배열을 생성할 때 사용할 엘리먼트.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">*   반환 값  </span></span><br><span class="line"><span class="string">    새로운 Array 객체.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">let</span> arrayObj = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(arrayObj);  </span><br><span class="line"><span class="comment">/// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><p>Array.of() 파라미터에 새로운 배열의 엘리먼트에 설정할 값을 작성합니다.<br>콤마로 구분하여 다수를 작성할 수 있습니다.<br>Array.of()가 호출되면 우선 Array 오브젝트를 생성합니다. 이어서 파라미터에 작성한 순서대로 Array 오브젝트에 추가한 후, 반환합니다.</p><ul><li><p>Array.from()은 파라미터에 Array-like 또는 이터러블 오브젝트를 지정하지만,<br>Array.of()는 파라미터에 값을 지정합니다.</p></li><li><p>Array.of()와 Array 생성자의 차이는 정수형 인자의 처리 방법에 있습니다.<br>Array.of(7)은 하나의 요소 7을 가진 배열을 생성하지만<br>Array(7)은 length 속성이 7인 빈 배열을 생성합니다.</p></li></ul><figure class="highlight js"><figcaption><span>Array.of</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">7</span>);       <span class="comment">// [7]   </span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]  </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">Array</span>(<span class="number">7</span>);          <span class="comment">// [ , , , , , , ]  </span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><hr><h2 id="copyWithin">copyWithin(): 범위 값 복사, 설정</h2><p>copyWithin() 메서드는 배열의 일부를 인덱스 범위의 값을 복사하여, 동일한 배열의 지정한 위치에 덮어쓰고 그 배열을 반환합니다. 이 때, 배열의 길이를 수정하지 않고 반환합니다.</p><blockquote><p>Array.copyWithin(target[, start[, end]])</p></blockquote><ul><li><p>target<br>복사한 값을 설정할 시작 인덱스. 음수를 지정하면 인덱스를 배열의 끝에서부터 계산합니다.<br>target이 arr.length보다 크거나 같으면 아무것도 복사하지 않습니다.<br>target이 start 이후라면 복사한 시퀀스를 arr.length에 맞춰 자릅니다.</p></li><li><p>start (선택적 파라미터)<br>복사를 시작할 위치를 가리키는 0 기반 인덱스.<br>음수를 지정하면 인덱스를 배열의 끝에서부터 계산합니다.<br>기본값은 0으로, start를 지정하지 않으면 배열의 처음부터 복사합니다.</p></li><li><p>end (선택적 파라미터)<br>복사를 끝낼 위치를 가리키는 0 기반 인덱스.<br>copyWithin은 end 인덱스 이전까지 복사하므로<br>end 인덱스가 가리키는 요소는 제외합니다. 음수를 지정하면 인덱스를 배열의 끝에서부터 계산합니다.<br>기본값은 arr.length로, end를 지정하지 않으면 배열의 끝까지 복사합니다.</p></li><li><p>반환 값<br>수정한 배열.</p></li></ul><h3 id="중요-포인트-1"><a href="#중요-포인트-1" class="headerlink" title="중요 포인트"></a>중요 포인트</h3><p>copyWithin은 C와 C++의 memmove처럼 작동하고, 복사와 대입이 하나의 연산에서 이루어지므로 Array의 데이터를 이동할 때 사용할 수 있는 고성능 메서드입니다. TypedArray의 동명 메서드에서 이 특징이 두드러집니다. 붙여넣은 시퀀스의 위치가 복사한 범위와 겹치더라도 최종 결과는 원본 배열에서 복사한 것과 같습니다.</p><p>copyWithin 함수는 <a href="https://heecheolman.tistory.com/67">제네릭 함수</a>로, this 값이 Array 객체일 필요는 없습니다.</p><p>copyWithin 메서드는 변경자 메서드로, this의 길이는 바꾸지 않지만 내용을 바꾸며 필요하다면 새로운 속성을 생성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> one = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];  </span><br><span class="line"><span class="built_in">console</span>.log(one.copyWithin(<span class="number">0</span>, <span class="number">3</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">let</span> two = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];  </span><br><span class="line"><span class="built_in">console</span>.log(two.copyWithin(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="keyword">let</span> three = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];  </span><br><span class="line"><span class="built_in">console</span>.log(three.copyWithin(<span class="number">3</span>));  </span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]  </span></span><br><span class="line"><span class="comment">// [3, 4, 3, 4, 5]  </span></span><br><span class="line"><span class="comment">// [1, 2, 3, 1, 2]</span></span><br></pre></td></tr></table></figure><ol><li><p>copyWithin() 두 번째 파라미터에 지정한 인덱스 3부터 배열의 끝까지 엘리먼트 값을 복사하여 첫 번째 파라미터 값인 인덱스 0부터 차례대로 설정합니다. 4와 5를 인덱스 0 부터 설정하므로 [1, 2]가 [4, 5]로 대체되어 [4, 5, 3, 4, 5]가 됩니다.</p></li><li><p>두 번째 파라미터 값인 인덱스 2부터 세 번째 파라미터 값인 인덱스 4 직전까지 엘리먼트 값을 복사항 첫 번째 파라미터 값인 인덱스 0부터 차례대로 설정합니다.<br>3과 4를 인덱스 0부터 설정하므로 [1, 2]가 [3, 4]로 대체되어 [3, 4, 3, 4, 5]가 됩니다.</p></li><li><p>두 번째와 세 번째 파라미터를 작성하지 않았으므로 배열 전체를 복사하여<br>인덱스 3부터 설정합니다. 복사할 엘리먼트 수는 5이지만, 설정 할수 있는 엘리먼트의 수는 두 개 입니다. [4, 5]에 [1, 2]가 설정되고 나머지 [3, 4, 5]는 설정되지 않습니다. 즉 [1, 2, 3, 1, 2]가 출력됩니다.</p></li></ol><figure class="highlight js"><figcaption><span>Array-like</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;<span class="number">0</span>: <span class="string">"ABC"</span>, <span class="number">1</span>: <span class="string">"DEF"</span>, <span class="number">2</span>: <span class="string">"가나다"</span>, <span class="attr">length</span>: <span class="number">3</span>&#125;;  </span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> one = <span class="built_in">Array</span>.prototype.copyWithin.call(arrayLike, <span class="number">0</span>, <span class="number">1</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(one);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.copyWithin.call(<span class="built_in">arguments</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="built_in">console</span>.log(two(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">Object  </span></span><br><span class="line"><span class="comment">0: "DEF"  </span></span><br><span class="line"><span class="comment">1: "가나다"  </span></span><br><span class="line"><span class="comment">2: "가나다"  </span></span><br><span class="line"><span class="comment">length: 3  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">Arguments(5)  </span></span><br><span class="line"><span class="comment">callee: (...)  </span></span><br><span class="line"><span class="comment">0: 1  </span></span><br><span class="line"><span class="comment">1: 2  </span></span><br><span class="line"><span class="comment">2: 3  </span></span><br><span class="line"><span class="comment">3: 1  </span></span><br><span class="line"><span class="comment">4: 2  </span></span><br><span class="line"><span class="comment">length: 5  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Array-like 는 배열이 아닌 오브젝트이므로 Array.copyWithin()형태로 호출할 수 없습니다. 하지만 위와 같이 call()을 호출하면서 첫 번째 파라미터에 Array-like를 지정하면 copyWithin()이 호출됩니다.</p><ol><li><p>arrayLike 오브젝트의 프로퍼티 키인 0,1,2를 배열의 인덱스로 사용합니다.<br>세 번째 파라미터인 인덱스 1 부터 끝까지 복사하여 [“DEF”,”가나다”] 가<br>인덱스 0,1 값과 대체됩니다. {0: “DEF”, 1: “가나다”, 2: “가나다”, length: 3}</p></li><li><p>호출한 함수에서 넘겨준 파라미터 값이 arguments에 설정됩니다. arguments가 Array-ike 오브젝트 이므로 call()의 첫 번째 파라미터에 지정하면 copyWithin()을 호출할 수 있습니다. 인덱스 0 부터 인덱스 2 이전까지 복사합니다 [1, 2]<br>이를 인덱스 3부터 설정하여 인덱스 3,4의 값이 대체됩니다. [1, 2, 3, 1, 2]</p></li></ol><hr><h2 id="Array_fill">fill(): 범위 값 변경</h2><p>같은 배열에서 인덱스 범위의 값을 하나의 지정한 값으로 바꾸어 반환합니다.</p><blockquote><p>array.fill(value[, start[, end]])</p></blockquote><ul><li><p>value<br>배열을 채울 값.</p></li><li><p>start (선택적 파라미터)<br>시작 인덱스, 기본 값은 0.</p></li><li><p>end (선택적 파라미터)<br>범위 끝 인덱스, 기본 값은 this.length.</p></li><li><p>반환 값<br>변형한 배열.</p></li></ul><h3 id="중요-포인트-2"><a href="#중요-포인트-2" class="headerlink" title="중요 포인트"></a>중요 포인트</h3><ul><li><p>start가 음수이면 시작 인덱스는 [length + start]입니다. end가 음수이면 끝 인덱스는 [length + end]입니다.</p></li><li><p>fill은 일반 함수이며, this 값이 배열 객체일 필요는 없습니다.</p></li><li><p>fill 메서드는 변경자 메서드로, 복사본이 아니라 this 객체를 변형해 반환합니다.<br>value에 객체를 받을 경우 그 참조만 복사해서 배열을 채웁니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(one.fill(<span class="number">7</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> two = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(two.fill(<span class="number">7</span>, <span class="number">1</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> three = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(three.fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>));  </span><br><span class="line"><span class="comment">// [7, 7, 7]  </span></span><br><span class="line"><span class="comment">// [1, 7, 7, 7, 7]  </span></span><br><span class="line"><span class="comment">// [1, 7, 7, 4, 5]</span></span><br></pre></td></tr></table></figure><ol><li><p>범위를 지정해 주지 않았으므로 배열 전체가 변경 대상이 됩니다.<br>첫 번째 파라미터 7이 변경할 값이 되어 [7, 7, 7]로 변경됩니다.</p></li><li><p>두 번째 파라미터 인덱스 값1 부터 배열 끝까지가 변경 대상이 됩니다.<br>[1, 7, 7, 7, 7]로 변경됩니다.</p></li><li><p>두 번째 파라미터 인덱스 값1 부터 세 번째 파라미터 인덱스 3이전 까지가 변경 대상입니다. [2, 3]이 7로 변경되어 [1, 7, 7, 4, 5]이 됩니다.</p></li></ol><hr><h2 id="Array_enteries">entries(): 이터레이터 오브젝트 생성</h2><p>Array오브젝트를 이터레이터 오브젝트로 생성하여 반환합니다.</p><blockquote><p>Array.entries()</p></blockquote><ul><li>반환값 iterator</li></ul><figure class="highlight js"><figcaption><span>entries</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];  </span><br><span class="line"><span class="comment">// Array 오브젝트로 이터레이터 오브젝트를 생성해 반환합니다.  </span></span><br><span class="line"><span class="number">1.</span> <span class="keyword">let</span> iterator = values.entries();  </span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> iterator)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(key, <span class="string">":"</span>, value);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">/* Object   </span></span><br><span class="line"><span class="comment">&#123;value: Array(2)  </span></span><br><span class="line"><span class="comment"> [ &#123;0: 0&#125;,  </span></span><br><span class="line"><span class="comment"> &#123;1: 10&#125; ],  </span></span><br><span class="line"><span class="comment"> done: false&#125;  </span></span><br><span class="line"><span class="comment">1: 20  </span></span><br><span class="line"><span class="comment">2: 30  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li><p>iterator 오브젝트의 next()를 호출 하면 {value: (2),done: false} 형태를 반환합니다. 배열의 인덱스와 엘리먼트가 프로퍼티 형태로 되기 때문입니다.<br>[{0: 0}, {1: 10}]</p></li><li><p>이터레이터 오브젝트는 for-of문에 [key: value]형태로 키와 값을 동시에 작성할 수 있습니다. 실행 결과에 “0: 10”이 출력되지 않는 것은 바로 앞의 next()에서 이터레이션 처리를 하였기 때문입니다. 따라서 for-of문은 두 번째 인덱스부터 처리되었습니다.</p></li></ol><hr><h2 id="Array_keys">keys(): key 이터레이터 오브젝트 생성</h2><p>key만 갖는 이터레이터 오브젝트를 생성하여 반환합니다.</p><p>배열의 인덱스를 key 값으로 사용하여 이터레이터 오브젝트를 생성합니다.<br>배열의 엘리먼트 값은 이터레이터 오브젝트에 포함되지 않습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>].keys();  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> iterator)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(key, <span class="string">":"</span>, iterator[key]);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">0 ":" undefined  </span></span><br><span class="line"><span class="comment">1 ":" undefined  </span></span><br><span class="line"><span class="comment">2 ":" undefined  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>[10, 20, 30].keys()로 이터레이터 오브젝트를 생성하면<br><strong>인덱스 0, 1, 2만 설정되고 엘리먼트 값 [10, 20, 30]은 설정되지 않습니다.</strong><br>value 값에 undefined가 출력됩니다.</p><p><code>for(var[key, value] of iterator){}와 같이 [key, value]를 작성하면 TypeError가 발생하므로 key만 작성해야 합니다.</code></p><hr><h2 id="Array_values">values(): value 이터레이터 오브젝트 생성</h2><p>value만 갖는 이터레이터 오브젝트를 생성하여 반환합니다.</p><p>배열 엘리먼트 값으로 이터레이터 오브젝트를 생성합니다.<br>배열 인덱스는 이터레이터 오브젝트에 포함되지 않습니다.<br>Symbol.iterator()와 같습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 크롬 52~54, 파이어폭스 47~49 지원하지 않음  </span></span><br><span class="line"><span class="keyword">let</span> iterator = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>].values();  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(iterator.next());  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(iterator.next());  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(iterator.next());  </span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(iterator.next());  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">1.Object  </span></span><br><span class="line"><span class="comment">value: 10  </span></span><br><span class="line"><span class="comment">done: false  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">2.Object  </span></span><br><span class="line"><span class="comment">value: 20  </span></span><br><span class="line"><span class="comment">done: false  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">3.Object  </span></span><br><span class="line"><span class="comment">value: 30  </span></span><br><span class="line"><span class="comment">done: false  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">4.Object  </span></span><br><span class="line"><span class="comment">value: undefined  </span></span><br><span class="line"><span class="comment">done: true  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>for-of 루프 반복을 사용 하려면.<br>브라우저가 for-of 루프와 for 루프안에 let 스코프 변수를 지원해야 합니다.</p><hr><h2 id="Array_find">find(): 엘리먼트 값 비교, 반환</h2><p>find() 메서드는 주어진 콜백 함수를 만족하는(true 값) 첫 번째 엘리먼트의 값을 반환합니다. 그런 요소가 없다면 undefined를 반환합니다.</p><blockquote><p>Array.find(callback[, thisArg])</p></blockquote><ul><li><p>callback<br>배열의 각 값에 대해 실행할 함수. 아래의 세 인자를 받습니다.</p><ul><li><p>element<br>콜백함수에서 처리할 현재 엘리먼트.</p></li><li><p>index<br>콜백함수에서 처리할 현재 엘리먼트의 인덱스.</p></li><li><p>array<br>find 함수를 호출한 배열.</p></li></ul></li></ul><ul><li><p>thisArg (선택적 파라미터)<br>콜백이 호출될 때 this로 사용할 객체.</p></li><li><p>반환 값<br>주어진 판별 함수를 만족하는 첫 번째 요소의 값. 그 외에는 undefined.</p></li></ul><h3 id="중요-포인트-3"><a href="#중요-포인트-3" class="headerlink" title="중요 포인트"></a>중요 포인트</h3><ul><li><p>find 메서드는 callback 함수가 참을 반환 할 때까지 해당 배열의 각 요소에 대해서 callback 함수를 실행합니다. 만약 어느 요소를 찾았다면 find 메서드는 해당 요소의 값을 즉시 반환하고, 그렇지 않았다면 undefined를 반환합니다.</p></li><li><p>callback은 0 부터 length - 1 까지 배열의 모든 인덱스에 대해 호출되며, <strong>값이 지정되지 않은 요소도 포함하여 모든 인덱스에 대해 호출됩니다. 따라서, 희소 배열 (sparse arrays)의 경우에는 값이 지정된 요소만 탐색하는 다른 메소드에 비해 더 비효율적입니다.</strong></p></li><li><p>thisArg 파라미터가 주어진 경우에는 제공되었다면 thisArg가 callback안에서 this로 사용되고, 그렇지 않은 경우 undefined 가 this로 사용됩니다.</p></li><li><p>find는 호출의 대상이 된 배열을 변경(mutate)하지 않습니다.</p></li><li><p>find가 처리할 배열 요소의 범위는 첫 callback이 호출되기 전에 먼저 결정됩니다. find메서드가 실행 된 이후에 배열에 추가된 요소들에 대해서는 callback이 호출되지 않습니다. 아직 callback이 호출되지 않았던 배열 요소가 callback에 의해서 변경된 경우, find가 해당 요소의 인덱스를 방문할 때의 값으로 callback함수에 전달될 것입니다. 즉, 삭제된 요소에도 callback이 호출됩니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].find(<span class="function">(<span class="params">value, index, allData</span>) =&gt;</span> value === <span class="number">2</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(result);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, allData</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> value === <span class="number">1</span> &amp;&amp; value === <span class="keyword">this</span>.key;  </span><br><span class="line">&#125;, &#123;<span class="attr">key</span>: <span class="number">1</span>&#125;);  </span><br><span class="line"><span class="built_in">console</span>.log(result);  </span><br><span class="line"><span class="comment">//2  </span></span><br><span class="line"><span class="comment">//1</span></span><br></pre></td></tr></table></figure><ol><li><p>[1, 2, 3]에서 1을 읽으면 콜백 함수가 호출됩니다. 콜백 함수의 value 파라미터에 1이 설정되고 index에 0이 설정되며, allData에 배열 전체가 설정됩니다.<br>value === 2에서 false를 반환하므로 배열의 다음 엘리먼트로 넘어가 콜백 함수를 호출합니다. 엘리먼트 값이 2이므로 true가 반환됩니다.<br><code>이때 find()를 종료하면서 처리 중인 엘리먼트 값 2가 반환됩니다.</code></p></li><li><p>find()의 두 번째 파라미터에 {key: 1}을 작성했으며 콜백 함수에서 this로 참조할 수 있습니다. 배열의 첫 번째 엘리먼트 값이 1이므로 콜백 함수가 true를 반환하고 find()가 종료됩니다. 엘리먼트 값 1을 반환합니다.<br>남은 엘리먼트 값 [2, 1]은 처리되지 않습니다.</p></li></ol><hr><h2 id="Array_findeIndex">findIndex(): 배열 인덱스 반환</h2><p>콜백 함수에서 true를 반환하는 첫 번째 엘리먼트의 배열 인덱스를 반환합니다.<br>만족하는 요소가 없으면 -1을 반환합니다.</p><blockquote><p>Array.findIndex(callback(element[, index[, array]])[, thisArg])</p></blockquote><ul><li><p>callback<br>3개의 인수를 취하여 배열의 각 값에 대해 실행할 함수입니다.</p><ul><li><p>element<br>배열에서 처리중인 현재 요소입니다.</p></li><li><p>index<br>배열에서 처리중인 현재 요소의 인덱스입니다.</p></li><li><p>array<br>findIndex 함수가 호출된 배열입니다.</p></li><li><p>thisArg (선택적 파라미터)<br>콜백을 실행할 때 this로 사용할 객체입니다.</p></li></ul></li></ul><ul><li>반환 값<br>엘리먼트가 함수에 true값을 반환하면 그 배열의 인덱스 반환.<br>그렇지 않으면 -1을 반환합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">let</span> result = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>].findIndex(  </span><br><span class="line"> (value, index, allData) =&gt; value === <span class="number">20</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(result);  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> result = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>].findIndex(<span class="function">(<span class="params">value, index, allData</span>) =&gt;</span> value === <span class="number">77</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(result);  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> result = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, allData</span>)</span>&#123;  </span><br><span class="line"> <span class="keyword">return</span> value === <span class="number">30</span> &amp;&amp; value === <span class="keyword">this</span>.check;  </span><br><span class="line">&#125;, &#123;<span class="attr">check</span>: <span class="number">30</span>&#125;);  </span><br><span class="line"><span class="built_in">console</span>.log(result);  </span><br><span class="line"><span class="comment">// 1  </span></span><br><span class="line"><span class="comment">// -1  </span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ol><li><p>[10, 20, 30]에서 처음의 10을 읽으면 콜백 함수가 호출됩니다.<br>콜백 함수의 value 파라미터에 10이 설정되고 index에 0이 설정되며,<br>allData에 배열 전체가 설정됩니다. value === 20 에서 false를 반환하므로<br>배열의 다음 엘리먼트로 넘어가 콜백 함수를 호출 합니다.<br>엘리먼트 값이 20이므로 true를 반환하며 findIndex()를 종료하며 처리 중인 인덱스 1을 반환합니다.</p></li><li><p>배열에 true값 77이 없으므로 배열의 엘리먼트 마지막까지 콜백 함수에서 false를 반환하게 되면 findIndex()를 종료하면서 -1을 반환합니다.</p></li><li><p>findIndex()의 두 번째 파라미터에 {check: 30}을 작성했으며<br>콜백 함수에서 this로 참조할 수 있습니다.<br>배열 엘리먼트 값이 30일 때 콜백 함수에서 true를 반환하며 인덱스 값이 2이므로<br>최종적으로 2를 반환합니다.</p></li></ol>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/03/30/Array%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Template 리터널 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/03/29/Template%20%EB%A6%AC%ED%84%B0%EB%84%90%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/03/29/Template%20%EB%A6%AC%ED%84%B0%EB%84%90%20-ECMAScript/</guid>
      <pubDate>Sat, 28 Mar 2020 22:27:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;템플릿 리터럴(Template Literal)은 문자열 처리를 위한 템플릿을 제공합니다.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;figcaption&gt;&lt;span&gt;구문&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`string`&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`string text line 1  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt; string text line 2`&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`string &lt;span class=&quot;subst&quot;&gt;$&amp;#123;expression&amp;#125;&lt;/span&gt; string`&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tag &lt;span class=&quot;string&quot;&gt;`string &lt;span class=&quot;subst&quot;&gt;$&amp;#123;expression&amp;#125;&lt;/span&gt; text`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>템플릿 리터럴(Template Literal)은 문자열 처리를 위한 템플릿을 제공합니다.</p><figure class="highlight js"><figcaption><span>구문</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`string`</span>  </span><br><span class="line"><span class="string">`string text line 1  </span></span><br><span class="line"><span class="string"> string text line 2`</span>  </span><br><span class="line"><span class="string">`string <span class="subst">$&#123;expression&#125;</span> string`</span>  </span><br><span class="line">tag <span class="string">`string <span class="subst">$&#123;expression&#125;</span> text`</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>역따옴표(``) 안에 <code>AB${표현식}</code>과 같이 문자열과 표현식을 작성할 수있습니다.<br>AB는 문자열 그대로 출력되고 ${표현식}은 표현식을 평가하고 결과를 문자열로출력합니다.</p><p>문자열과 표현식의 결과를 연결하여 문자열로 표현하는 것이 템플릿 리터널입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"1:"</span>, <span class="string">`123ABC가나다`</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2:"</span>, <span class="string">'라인 1\n라인 2'</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"3:"</span>, <span class="string">`첫 번째 줄  </span></span><br><span class="line"><span class="string">두 번째 줄`</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> one = <span class="number">1</span>, two = <span class="number">2</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"4:"</span>, <span class="string">`1 + 2는 <span class="subst">$&#123;one + two&#125;</span>이다`</span>);  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">1: 123ABC가나다  </span></span><br><span class="line"><span class="comment">2: 라인 1  </span></span><br><span class="line"><span class="comment">라인 2  </span></span><br><span class="line"><span class="comment">3: 첫 번째 줄  </span></span><br><span class="line"><span class="comment">두 번째 줄  </span></span><br><span class="line"><span class="comment">4: 1 + 2는 3이다  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>\n이 작성된 위치에서 줄을 바꿉니다.</p></li><li><p>\n을 사용하지 않고 에디터에서 줄을 바꾸면 됩니다.<br>줄 바꿈을 한 다음 앞에 공백을 작성하면 공백이 삽입됩니다.</p></li><li><p>“1 + 2는” 그대로 출력되고 ${one + two} 표현식을 평가합니다.<br>one 변수 값 1이 one 에 할당되고 변수 값 2가 two에 할당되고<br>one + two 의 값을 계산합니다.<br>{1 + 2 는 3이다} 가 반환됩니다.</p></li></ol><hr><h2 id="tagged-Template"><a href="#tagged-Template" class="headerlink" title="tagged Template"></a>tagged Template</h2><p>템플릿 앞에 tag를 작성한 형태를 태그드(tagged)템플릿 이라고 합니다.</p><blockquote><p>tag <code>string ${expression} text</code></p></blockquote><p>tag 위치에 호출할 함수 이름을 작성합니다.</p><p>함수를 호출하기 전에 템플릿에서 문자열과 표현식을 분리하고 이를 파라미터 값으로 넘겨줍니다. 함수 이름이 작성된 템플릿을 테그드 템플릿이라고 하고 호출되는 함수를 태그 함수라고 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one = <span class="number">1</span>, two = <span class="number">2</span>;  </span><br><span class="line"><span class="number">2.</span> <span class="function"><span class="keyword">function</span> <span class="title">tagFunction</span>(<span class="params">text, value</span>) </span>&#123;  </span><br><span class="line"> <span class="number">3.</span> <span class="built_in">console</span>.log(<span class="string">"1:"</span>, text[<span class="number">0</span>]);  </span><br><span class="line"> <span class="number">4.</span> <span class="built_in">console</span>.log(<span class="string">"2:"</span>, value);  </span><br><span class="line"> <span class="number">5.</span> <span class="built_in">console</span>.log(<span class="string">"3:"</span>, text[<span class="number">1</span>]);  </span><br><span class="line"> <span class="number">6.</span> <span class="built_in">console</span>.log(<span class="string">"4:"</span>, <span class="keyword">typeof</span> text[<span class="number">1</span>]);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="number">1.</span> tagFunction <span class="string">`1+2=<span class="subst">$&#123;one + two&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><ol><li><p>템플릿에서 문자열과 표현식을 분리합니다. 1+2는 문자열이고 ${one + two}는 표현식입니다. tagFunction()을 호출하면서 분리된 문자열을 배열로 넘겨줍니다.<br>표현식은 평가 결과인 3을 넘겨줍니다. 표현식 다음에 문자열이 없으면 빈 문자열을 배열에 추가합니다.</p></li><li><p>호출받는 함수 파라미터에 문자열과 표현식 값을 분리하여 작성합니다.<br>배열로 넘겨 받은 문자열 [“1+2=”,””]가 text에 설정되고 표현식 값인 3이 value에 설정됩니다.</p></li><li><p>text의 첫 번째 엘리먼트 값 1+2= 이 출력됩니다.</p></li><li><p>value는 표현식 값 3이 출력됩니다.</p></li><li><p>text[1]은 빈 문자열(“”)이며 표현식 다음에 문자열이 없을때 엔진이 빈 문자열을 추가 시킨 값입니다.</p></li><li><p>text[1]의 type인 string이 출력됩니다.</p></li></ol><hr><p>호출하는 함수에서 문자열을 배열로 넘겨주므로 태그 함수의 파라미터 이름은 하나만 작성하면 됩니다.<br>표현식 평과 결과 값은 배열이 아닌 개별로 넘겨주므로 이에 맞춰 파라미터 이름을 작성해야 합니다.</p><figure class="highlight js"><figcaption><span>다수의 파라미터 형태</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one = <span class="number">1</span>, two = <span class="number">2</span>;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tagFunction</span>(<span class="params">text, plus, minus</span>) </span>&#123;  </span><br><span class="line"> <span class="number">1.</span> <span class="built_in">console</span>.log(text[<span class="number">0</span>], plus, text[<span class="number">1</span>]);  </span><br><span class="line"> <span class="number">2.</span> <span class="built_in">console</span>.log(minus, text[<span class="number">2</span>], text[<span class="number">3</span>]);  </span><br><span class="line">&#125;  </span><br><span class="line">tagFunction <span class="string">`1+2=<span class="subst">$&#123;one + two&#125;</span>이고 1-2=<span class="subst">$&#123;one - two&#125;</span>이다`</span>;</span><br></pre></td></tr></table></figure><p>표현식을 분리하여 평가하면 <code>${one + two}</code>는 3이고,<code>${one - two}</code>는 -1 입니다.<br>따라서 호출 받는 함수의 파라미터 형태가 ([“1+2=”,”이고 1-2=”,이다],3,-1)<br>형태가 됩니다.</p><ul><li>text에 호출한 함수에서 문자열을 배열로 넘겨준 값이 설정됩니다.</li><li>plus에 표현식 값 3이 설정됩니다.</li><li>minus에 표현식 값 -1이 설정됩니다.</li></ul><ol><li><p>text에 배열로 넘겨준 값 인덱스0번과 plus에 넘겨준 표현식 값 3<br>그리고 text에 배열로 넘겨준 값 인덱스1 번이 연결되어 출력됩니다.<br>1+2= 3 이고 1-2=</p></li><li><p>minus에 넘겨준 표현식값 -1 과 text에 배열로 넘겨준 인덱스 2 번과 3번이 연결되어 출력됩니다. text[3]인덱스는 없으므로. undefined값이 출력됩니다.//-1 “이다” undefined</p></li></ol><hr><h2 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw"></a>String.raw</h2><p>템플릿의 표현식은 변환하지만 특수 문자와 유니코드는 문자열로 인식합니다.</p><p>String.raw를 작성하고 이어서 템플릿 리터럴을 작성합니다.<br>가급적 템플릿을 적용하지 않고 문자열로 표현하려는 경향이 강합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one = <span class="number">1</span>, two = <span class="number">2</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1:"</span>, <span class="built_in">String</span>.raw<span class="string">`1+2=<span class="subst">$&#123;one + two&#125;</span>`</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2:"</span>, <span class="string">`줄 바꿈-1\n줄 바꿈-2`</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"3:"</span>, <span class="built_in">String</span>.raw<span class="string">`줄 바꿈-1\n줄 바꿈-2`</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"4:"</span>, <span class="string">`Unicode \u0031\u0032`</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"5:"</span>, <span class="built_in">String</span>.raw<span class="string">`Unicode \u0031\u0032`</span>);  </span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">1: 1+2=3  </span></span><br><span class="line"><span class="comment">2: 줄 바꿈-1  </span></span><br><span class="line"><span class="comment">줄 바꿈-2  </span></span><br><span class="line"><span class="comment">3: 줄 바꿈-1\n줄 바꿈-2  </span></span><br><span class="line"><span class="comment">4: Unicode 12  </span></span><br><span class="line"><span class="comment">5: Unicode u0031\u0032  </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li><p>템플릿 앞에 String.raw를 작성하면 문자열과 표현식 평가 결과를 연결하여 반환합니다.</p></li><li><p>템플릿에 \n을 작성하면 줄 바꿈을 하는 것과 달리<br>String.raw 템플릿에 \n을 작성하면 \n을 문자열로 출력합니다.</p></li><li><p>\u0031과 같이 템플릿에 유니코드를 작성하면 코드 포인트 값으로 변환하여 사용합니다. 변환값인 12가 출력됩니다.</p></li><li><p>String.raw 템플릿에 유니코드를 작성하면 코드 포인트로 변환하지 않고 문자열로 사용합니다. \u0031\u0032 가 출력됩니다.</p></li></ol><hr><h2 id="String-raw-문자열-전개-조합"><a href="#String-raw-문자열-전개-조합" class="headerlink" title="String.raw(): 문자열 전개, 조합"></a>String.raw(): 문자열 전개, 조합</h2><p>첫 번째 파라미터의 raw 프로퍼티 값인 문자열을 문자 하나씩 전개하면서 두 번째 이후의 파라미터를 조합하며 반환합니다.</p><p>첫 번째 파라미터에 {raw: “문자열”}형태로 작성합니다.<br>raw가 아닌 다른 이름을 사용할 수 없습니다.<br>두 번째 파라미터에 {raw: “문자열”}에 “문자열”과 조합할 값을 작성합니다.<br>String.raw()를 템플릿의 태그 함수로 사용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> one = <span class="number">1</span>, two = <span class="number">2</span>;  </span><br><span class="line"><span class="keyword">let</span> result = <span class="built_in">String</span>.raw(&#123;<span class="attr">raw</span>: <span class="string">"ABCDE"</span>&#125;, one, two, <span class="number">3</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(result);  </span><br><span class="line"><span class="comment">// A1B2C3DE</span></span><br></pre></td></tr></table></figure><ol><li><p>String.raw() 의 두 번째 파라미터인 one 변수에 1이 할당됩니다.</p></li><li><p>String.raw() 의 세 번째 파라미터인 two 변수에 2가 할당됩니다.</p></li><li><p>{raw: “ABCDE”}에서 A를 반환할 버퍼에 추가합니다. //A</p></li><li><p>String.raw() 의 두 번째 파라미터 one 변수 값 1을 반환 버퍼 끝에 추가합니다. //A1</p></li><li><p>{raw: “ABCDE”}에서 B를 반환 버퍼 끝에 추가합니다. //A1B</p></li><li><p>String.raw() 의 세 번째 파라미터 two 변수 값 2을 반환 버퍼 끝에 추가합니다. // A1B2</p></li><li><p>{raw: “ABCDE”}에서 C를 반환 버퍼 끝에 추가합니다. //A1B2C</p></li><li><p>String.raw() 의 네 번째 파라미터 값 3을 반환 버퍼 끝에 추가합니다. //A1B2C3</p></li><li><p>{raw: “ABCDE”}에서 D를 반환 버퍼 끝에 추가합니다. //A1B2C3D</p></li><li><p>String.raw() 의 다섯 번째 파라미터가 없으므로 추가하지 않습니다.</p></li><li><p>{raw: “ABCDE”}에서 E를 반환 버퍼 끝에 추가합니다. // A1B2C3DE</p></li><li><p>String.raw() 의 여섯 번째 파라미터가 없으므로 추가하지 않습니다.</p></li><li><p>반환 버퍼를 반환합니다. // A1B2C3DE</p></li></ol>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/03/29/Template%20%EB%A6%AC%ED%84%B0%EB%84%90%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>String 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/03/29/String%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/03/29/String%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</guid>
      <pubDate>Sat, 28 Mar 2020 20:33:24 GMT</pubDate>
      <description>
      
        &lt;ul&gt;
&lt;li&gt;String 오브젝트&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/29/String%20오브젝트%20-ECMAScript/#Unicode&quot;&gt;Unicode&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;fromCodePoint(): 코드 포인트 문자 반환&lt;/li&gt;
&lt;li&gt;codePointAt(): 코드 포인트 값 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/29/String%20오브젝트%20-ECMAScript/#includes&quot;&gt;includes(): 문자열 포함 여부&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/29/String%20오브젝트%20-ECMAScript/#starsWith&quot;&gt;startsWith(): 문자열 시작 여부&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/29/String%20오브젝트%20-ECMAScript/#endsWith&quot;&gt;endsWith(): 문자열 종료 여부&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/29/String%20오브젝트%20-ECMAScript/#repeat&quot;&gt;repeat(): 문자열 복제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2020/03/29/String%20오브젝트%20-ECMAScript/#normalize&quot;&gt;normalize(): 유니코드 정규화 형식 변환&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<ul><li>String 오브젝트<ul><li><a href="/2020/03/29/String%20오브젝트%20-ECMAScript/#Unicode">Unicode</a><ul><li>fromCodePoint(): 코드 포인트 문자 반환</li><li>codePointAt(): 코드 포인트 값 반환</li></ul></li><li><a href="/2020/03/29/String%20오브젝트%20-ECMAScript/#includes">includes(): 문자열 포함 여부</a></li><li><a href="/2020/03/29/String%20오브젝트%20-ECMAScript/#starsWith">startsWith(): 문자열 시작 여부</a></li><li><a href="/2020/03/29/String%20오브젝트%20-ECMAScript/#endsWith">endsWith(): 문자열 종료 여부</a></li><li><a href="/2020/03/29/String%20오브젝트%20-ECMAScript/#repeat">repeat(): 문자열 복제</a></li><li><a href="/2020/03/29/String%20오브젝트%20-ECMAScript/#normalize">normalize(): 유니코드 정규화 형식 변환</a></li></ul></li></ul><a id="more"></a><hr><h2 id="Unicode">Unicode</h2> <p>유니코드는 “U+”를 작성하고 이어서 코드 포인트(codepoint)를 작성합니다.</p><p>코드 포인트는 4자리 이상의 UTF-16 진수 형태로 U+0000 에서 U+10FFFF까지 약 110만 개 정도를 사용할 수 있습니다.</p><p>코드 포인트 전체는 17개 평면(plane)으로 나누어져 있으며, 하나의 평면은<br>65535(U+FFFF)개 입니다. 첫 번째 평면을 BMP(Basic Multilingual Plane)라고 부르며 일반적인 문자가 이 평면에 속합니다. (ex 한글)</p><p>BPM를 제외한 코드 포인트가 속한 평면을 Supplementary plane 또는 Astral plane이라고 부릅니다. 5자리 이상의 코드 포인트가 여기에 속합니다.</p><figure class="highlight js"><figcaption><span>Unicode</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 16진수 이스케이프 시퀀스  </span></span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(<span class="string">"1:"</span>, <span class="string">"\x31\x32\x33"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 유니코드 이스케이프 시퀀스  </span></span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="string">"2:"</span>, <span class="string">"\u0031\u0032\u0033"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 유니코드 코드포인트 이스케이프  </span></span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(<span class="string">"3:"</span>, <span class="string">"\u&#123;34&#125;\u&#123;35&#125;\u&#123;36&#125;"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// U+FFFF보다 큰 코드 포인트: 코끼리  </span></span><br><span class="line"><span class="comment">//http://unicode-table.com/en/1F418/  </span></span><br><span class="line"><span class="number">4.</span> <span class="built_in">console</span>.log(<span class="string">"4:"</span>, <span class="string">"\u&#123;1f418&#125;"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//서로게이트 페어(Surrogate pair)  </span></span><br><span class="line"><span class="number">5.</span> <span class="built_in">console</span>.log(<span class="string">"5:"</span>, <span class="string">"\uD83D\uDC18"</span>);</span><br></pre></td></tr></table></figure><ol><li><p>“\x31\x32\x33”를 변환하면 123이 반환됩니다. \에 이어서 16진수로 값을 작성합니다. 이 형태를 16진수 이스케이프 시퀀스(Escape Sequence)라고 합니다.</p></li><li><p>“\x31\x32\x33” 를 유니코드로 작성하면 “\u0031\u0032\u0033” 형태가 됩니다.<br>이를 유니코드 이스케이프 시퀀스라고 합니다. UTF-16 진수 형태로 U+0000에서 U+FFFF까지 사용할 수 있습니다.</p></li><li><p>U+FFFF 보다 큰 코드 포인트 (유니코드 이스케이프 시퀀스 범위를 넘어가는)는<br>ES6에서 “\u{34}”와 같이 중괄호 안에 코드 포인트를 작성합니다.<br>이를 유니코드 코드 포인트 이스케이프라고 합니다.<br>\u{1f418}과 같이 5자리로도 작성할 수 있습니다.</p></li><li><p>코끼리 이모지를 출력하는 유니코드 코드 포인트 이스케이프 값 입니다.<br>브라우저 마다 이모지 모습이 조금씩 차이가 있을 수 있습니다.</p></li><li><p>\u{1F418} 형태는 ES5에서 사용할 수 없습니다.<br>ES5에서 사용할 수 있는 형태를 Surrogate pair 라고 하며 “\uD83D\uDC18”와 같이 두 개의 유니코드 이스케이프 시퀀스를 사용 합니다.</p></li></ol><hr><h3 id="fromCodePoint-코드-포인트-문자-반환"><a href="#fromCodePoint-코드-포인트-문자-반환" class="headerlink" title="fromCodePoint(): 코드 포인트 문자 반환"></a>fromCodePoint(): 코드 포인트 문자 반환</h3><p>유니코드의 코드 포인트에 해당하는 문자를 반환합니다.</p><blockquote><p>String.fromCodePoint(param);</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #$%&amp;  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1:"</span>, <span class="built_in">String</span>.fromCodePoint(<span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 16진수로 지정, 49, 50, 51로 지정한 것과 같음  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2:"</span>, <span class="built_in">String</span>.fromCodePoint(<span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 44032 = 가, 44033 = 각 = 가각  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"3:"</span>, <span class="built_in">String</span>.fromCodePoint(<span class="number">44032</span>, <span class="number">44033</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 코끼리 이모지  </span></span><br><span class="line"><span class="comment">//http://unicode-table.com/en/1F418/  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"4:"</span>, <span class="built_in">String</span>.fromCodePoint(<span class="number">0x1F418</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* fromCharCode는 ES5 함수이며,   </span></span><br><span class="line"><span class="comment">4자리 까지만 작성할 수 있으므로 코끼리 이모지가 표시되지 않음 */</span>  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"5:"</span>, <span class="built_in">String</span>.fromCharCode(<span class="number">0x1f418</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* fromCharCode를 사용하려면   </span></span><br><span class="line"><span class="comment">Surrogate pair 형태로 값을 두 개 작성해야됨. */</span>  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"6:"</span>, <span class="built_in">String</span>.fromCharCode(<span class="number">0xD83D</span>, <span class="number">0xDC18</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="codePointAt-코드-포인트-값-반환"><a href="#codePointAt-코드-포인트-값-반환" class="headerlink" title="codePointAt(): 코드 포인트 값 반환"></a>codePointAt(): 코드 포인트 값 반환</h2><p>문자열에서 파라미터에 지정한 인덱스 번째 문자의 코드 포인트 값을 반환합니다.<br>파라미터의 디폴트 값은 0 입니다.<br>해당 인덱스에 문자가 없으면 undefined를 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"가"</span>.codePointAt(<span class="number">0</span>));  </span><br><span class="line"><span class="comment">// "가"의 코드 포인트 값 44032 반환  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> values = <span class="string">"ABC"</span>;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> values)&#123;  </span><br><span class="line"> <span class="built_in">console</span>.log(value, value.codePointAt(<span class="number">0</span>));  </span><br><span class="line"><span class="comment">// A 65   </span></span><br><span class="line"><span class="comment">// B 66   </span></span><br><span class="line"><span class="comment">// C 67  </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="includes">includes(): 문자열 포함 여부</h2><blockquote><p>str.includes(searchString[, position])</p></blockquote><p><strong>매개변수</strong></p><ul><li><p>searchString:<br>이 문자열에서 찾을 다른 문자열.</p></li><li><p>position (선택적 파라미터)<br>searchString을 찾기 시작할 위치. 기본값 0.</p></li></ul><p><strong>반환값</strong><br>문자열을 찾아내면 true. 실패하면 false.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = <span class="string">"123가나다라456"</span>;  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(<span class="string">"1: "</span>, target.includes(<span class="number">2</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="string">"2: "</span>, target.includes(<span class="string">"가나"</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(<span class="string">"3: "</span>, target.includes(<span class="string">"12"</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><ol><li><p>target.includes(2)가 숫자 값이지만 문자열로 변환하여 비교합니다. true</p></li><li><p>유니코드의 코드 포인트 값으로 체크하기 때문에 한글을 체크할 수 있습니다. true</p></li><li><p>target 안에 12가 있지만 6번째 이후 부터 체크 하므로 false</p></li></ol><hr><h2 id="starsWith">starsWith(): 문자열 시작 여부</h2><p>startsWith() 메소드는 어떤 문자열이 특정 문자로 시작하는지 확인하여 결과를 true 혹은 false로 반환합니다. 대소문자를 구분합니다.</p><blockquote><p>str.starsWith(searchString[, position])</p></blockquote><p><strong>매개변수</strong></p><ul><li><p>searchString:<br>이 문자열에서 찾을 다른 문자열.</p></li><li><p>position (선택적 파라미터)<br>searchString을 찾기 시작할 위치. 기본값 0.</p></li></ul><p><strong>반환값</strong><br>문자열이 검색 문자열로 시작하면 true. 아니면 false.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = <span class="string">"123가나다"</span>;  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(<span class="string">"1:"</span>, target.startsWith(<span class="number">123</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="string">"2:"</span>, target.startsWith(<span class="string">"23"</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(<span class="string">"3:"</span>, target.startsWith(<span class="string">"가나"</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><ol><li><p>123으로 대상 문자열이 시작하므로 true 반환.<br>두 번째 파라미터를 작성하지 않았으므로 비교 시작 인덱스는 0</p></li><li><p>23으로 시작하지 않으므로 false</p></li><li><p>두 번째 파라미터에 인덱스 값 3을 작성하여 4 번째 부터 비교합니다.<br>대상 문자열 4번째에 “가나”로 시작하므로 true</p></li></ol><hr><h2 id="endsWith">endsWith(): 문자열 종료 여부</h2><p>ndsWith() 메서드를 사용하여 어떤 문자열에서 특정 문자열로 끝나는지를 확인할 수 있으며, 그 결과를 true 혹은 false로 반환합니다.</p><blockquote><p>str.endsWith(searchString[, position])</p></blockquote><ul><li><p>searchString<br>대상 문자열의 끝이 특정 문자열로 끝나는지를 찾기 원하는 문자열입니다.</p></li><li><p>position (선택적 파라미터)<br>찾고자 하는 문자열의 길이값이며, 기본값은 문자열 전체 길이입니다.<br>문자열의 길이값은 문자열 전체 길이 보다 길 수 없습니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = <span class="string">"123가나다"</span>;  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(target.endsWith(<span class="string">"가나다"</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(target.endsWith(<span class="string">"가나"</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(target.endsWith(<span class="string">"가나"</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><ol><li>대상 문자열이 “가나다”로 끝나므로 true</li></ol><ol start="2"><li>“가나”로 끝나지 않으므로 false</li></ol><ol start="3"><li>두 번째 파라미터에 길이 값 5를 지정했으므로 대상 문자열의 5번째 까지만 비교합니다. “가나”로 끝나게 되므로 true 반환</li></ol><hr><h2 id="repeat">repeat(): 문자열 복제</h2><p>repeat() 메서드는 문자열을 주어진 횟수만큼 반복해 붙인 새로운 문자열을 반환합니다.</p><blockquote><p>str.repeat(count);</p></blockquote><ul><li><p>count<br>문자열을 반복할 횟수. 0과 양의 무한대 사이의 정수([0, +∞)).</p></li><li><p>반환값<br>현재 문자열을 주어진 횟수만큼 반복해 붙인 새로운 문자열.</p></li><li><p>예외<br>RangeError: 반복 횟수는 양의 정수여야 함.<br>RangeError: 반복 횟수는 무한대보다 작아야 하며, 최대 문자열 크기를 넘어선 안됨.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = <span class="string">"123"</span>;  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(<span class="string">"1:"</span>, target.repeat(<span class="number">3</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="string">"2:"</span>, target.repeat(<span class="number">0</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(<span class="string">"3:"</span>, target.repeat(<span class="number">2.7</span>));</span><br></pre></td></tr></table></figure><ol><li><p>“123” 문자열을 3번 반복하여 123123123 반환</p></li><li><p>파라미터에 0을 작성하면 빈 문자열을 반환합니다. “”</p></li><li><p>2.7과 같이 소수를 작성하면 소수를 버리고 정수만 사용하여 복제합니다.<br>123123 이 반환됩니다.</p></li></ol><hr><h2 id="normalize">normalize(): 유니코드 정규화 형식 변환</h2><p>대상 문자열을 파라미터에 작성한 유니코드 정규화 형식으로 변환하여 반환합니다.<br>만약 주어진 값이 문자열이 아닐 경우에는 우선 문자열로 변환 후 정규화합니다.</p><blockquote><p>str.normalize([form])</p></blockquote><ul><li><p>form<br>유니코드 정규화 방식을 지정합니다. “NFC”, “NFD”, “NFKC”, “NFKD” 중 하나이며, 생략되거나 undefined 일 경우 “NFC”가 디폴트 값 입니다.</p><ul><li>NFC — 정규형 정준 결합(Normalization Form Canonical Composition).</li><li>NFD — 정규형 정준 분해(Normalization Form Canonical Decomposition).</li><li>NFKC — 정규형 호환성 결합(Normalization Form Compatibility Composition).</li><li>NFKD — 정규형 호환성 분해(Normalization Form Compatibility Decomposition).</li></ul></li><li><p>반환 값<br>주어진 문자열을 유니코드 정규화 방식에 따라 정규화된 문자열로 반환합니다.</p></li></ul><p>form이 위에서 명시된 값 중 하나가 아닐 경우 RangeError 에러가 발생합니다.</p><p>normalize() 메서드는 문자열을 유니코드 정규화 방식에 따라 정규화된 형태로 반환합니다. 문자열의 값 자체에는 영향을 주지 않습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"1:"</span>, <span class="string">"ㄱ"</span>.charCodeAt(<span class="number">0</span>));  </span><br><span class="line"><span class="comment">// 12593 = (0x3131)  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2:"</span>, <span class="string">"ㅏ"</span>.charCodeAt(<span class="number">0</span>));  </span><br><span class="line"><span class="comment">// 12623 = (0x314F)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// "ㄱ" 과 "ㅏ"의 코드 포인트값을 연결 하여 작성  </span></span><br><span class="line"><span class="keyword">let</span> jamo = <span class="string">"\u3131\u314F"</span>;  </span><br><span class="line"><span class="number">1.</span> <span class="built_in">console</span>.log(<span class="string">"3:"</span>, jamo.normalize(<span class="string">"NFC"</span>));  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"4:"</span>, jamo.normalize());  </span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="built_in">console</span>.log(<span class="string">"5:"</span>, jamo.normalize(<span class="string">"NFD"</span>));  </span><br><span class="line"><span class="number">3.</span> <span class="built_in">console</span>.log(<span class="string">"6:"</span>, jamo.normalize(<span class="string">"NFKD"</span>));  </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"7:"</span>, jamo.normalize(<span class="string">"NFKC"</span>));</span><br></pre></td></tr></table></figure><ol><li>“ㄱ” 과 “ㅏ” 가 연결된 “가” 모습이 아닌 “ㄱㅏ” 형태가 됩니다.<br>파라미터에 형식 값을 작성하지 않아도 디폴트 값 NFC 변환 형식이 적용됩니다.</li></ol><ol start="2"><li>NFC와 같이 NFD도 “ㄱㅏ” 형태로 출력됩니다.</li></ol><ol start="3"><li>NFKD 와 NFKC는 “가” 와 같이 글자 하나로 출력됩니다.</li></ol>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/03/29/String%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Math 오브젝트 -ECMAScript</title>
      <link>https://hdw0903.github.io/2020/03/29/Math%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</link>
      <guid>https://hdw0903.github.io/2020/03/29/Math%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/</guid>
      <pubDate>Sat, 28 Mar 2020 20:11:55 GMT</pubDate>
      <description>
      
        &lt;hr&gt;
&lt;p&gt;Math는 수학적인 상수와 함수를 위한 속성과 메서드를 가진 내장 객체입니다. 함수 객체가 아닙니다.&lt;/p&gt;
&lt;p&gt;Math는 Number 자료형만 지원하며 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt&quot;&gt;BigInt&lt;/a&gt;와는 사용할 수 없습니다.&lt;/p&gt;
&lt;p&gt;BigInt는 Number 원시 값이 안정적으로 나타낼 수 있는 최대치인 253 - 1보다 큰 정수를 표현할 수 있는 내장 객체입니다.&lt;/p&gt;
&lt;p&gt;다른 전역 객체와 달리 Math는 생성자가 아닙니다. Math의 모든 속성과 메서드는 정적입니다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><p>Math는 수학적인 상수와 함수를 위한 속성과 메서드를 가진 내장 객체입니다. 함수 객체가 아닙니다.</p><p>Math는 Number 자료형만 지원하며 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt">BigInt</a>와는 사용할 수 없습니다.</p><p>BigInt는 Number 원시 값이 안정적으로 나타낼 수 있는 최대치인 253 - 1보다 큰 정수를 표현할 수 있는 내장 객체입니다.</p><p>다른 전역 객체와 달리 Math는 생성자가 아닙니다. Math의 모든 속성과 메서드는 정적입니다.</p><a id="more"></a><hr><h2 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h2><ul><li><p>math.E<br>오일러의 상수이며 자연로그의 밑. 약 2.718.</p></li><li><p>math.LN2<br>2의 자연로그. 약 0.693.</p></li><li><p>math.LN10<br>10의 자연로그. 약 2.303.</p></li><li><p>math.LOG2E<br>밑이 2인 로그 E. 약 1.443.</p></li><li><p>math.LOG10E<br>밑이 10인 로그 E. 약 0.434.</p></li><li><p>math.PI<br>원의 둘레와 지름의 비율. 약 3.14159.</p></li><li><p>math.SQRT1_2<br>½의 제곱근. 약 0.707.</p></li><li><p>math.SQRT2<br>2의 제곱근. 약 1.414.</p></li></ul><hr><h2 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h2><ul><li><p>참고: 삼각 함수(sin(), cos(), tan(), asin(), *acos(), atan(), atan2())는 매개변수와 반환값 모두 호도법(라디안)을 사용합니다.<br>라디안 값을 각도 값으로 변환하려면 (Math.PI / 180)으로 나누세요. 반대로 각도 값에 곱하면 라디안 값이 됩니다.</p></li><li><p>참고: 많은 수의 Math 함수 정확도는 구현에 따라 다를 수 있습니다. 즉, 각 브라우저의 결과가 다를 수 있으며, 서로 같은 JS 엔진이라도 운영체제나 아키텍쳐에 따라서 불일치하는 값을 반환할 수 있습니다.</p></li><li><p>math.abs(x)<br>숫자의 절댓값을 반환합니다.</p></li></ul><ul><li><p>math.acos(x)<br>숫자의 아크코사인 값을 반환합니다.</p></li><li><p>math.acosh(x)<br>숫자의 쌍곡아크코사인 값을 반환합니다.</p></li><li><p>math.asin(x)<br>숫자의 아크사인 값을 반환합니다.</p></li><li><p>math.asinh(x)<br>숫자의 쌍곡아크사인 값을 반환합니다.</p></li><li><p>math.atan(x)<br>숫자의 아크탄젠트 값을 반환합니다.</p></li><li><p>math.atanh(x)<br>숫자의 쌍곡아크탄젠트 값을 반환합니다.</p></li><li><p>math.atan2(y, x)<br>인수 몫의 아크탄젠트 값을 반환합니다.</p></li><li><p>math.cbrt(x)<br>숫자의 세제곱근을 반환합니다.</p></li><li><p>math.ceil(x)<br>인수보다 크거나 같은 수 중에서 가장 작은 정수를 반환합니다.</p></li><li><p>math.clz32(x)<br>주어진 32비트 정수의 선행 0 개수를 반환합니다.</p></li><li><p>math.cos(x)<br>숫자의 코사인 값을 반환합니다.</p></li><li><p>math.cosh(x)<br>숫자의 쌍곡코사인 값을 반환합니다.</p></li><li><p>math.exp(x)<br>Ex 를 반환합니다. x는 인수이며 E 는 오일러 상수(2.718…) 또는 자연로그의 밑입니다.</p></li><li><p>math.expm1(x)<br>exp(x)에서 1을 뺀 값을 반환합니다.</p></li><li><p>math.floor(x)<br>인수보다 작거나 같은 수 중에서 가장 큰 정수를 반환합니다.</p></li><li><p>math.fround(x)<br>인수의 가장 가까운 단일 정밀도 표현을 반환합니다. 32비트 유동 소수 값</p></li><li><p>math.hypot([x[, y[, …]]])<br>인수의 제곱합의 제곱근을 반환합니다.</p></li><li><p>math.imul(x, y)<br>두 32비트 정수의 곱을 반환합니다.</p></li><li><p>math.log(x)<br>숫자의 자연로그(loge 또는 ln) 값을 반환합니다.</p></li><li><p>math.log1p(x)<br>숫자 x에 대해 1 + x의 자연로그(loge 또는 ln) 값을 반환합니다.</p></li><li><p>math.log10(x)<br>숫자의 밑이 10인 로그를 반환합니다.</p></li><li><p>math.log2(x)<br>숫자의 밑이 2인 로그를 반환합니다.</p></li><li><p>math.max([x[, y[, …]]])<br>0개 이상의 인수에서 제일 큰 수를 반환합니다.</p></li><li><p>math.min([x[, y[, …]]])<br>0개 이상의 인수에서 제일 작은 수를 반환합니다.</p></li><li><p>math.pow(x, y)<br>x의 y 제곱을 반환합니다.</p></li><li><p>math.random()<br>0과 1 사이의 난수를 반환합니다.</p></li><li><p>math.round(x)<br>숫자에서 가장 가까운 정수를 반환합니다.</p></li><li><p>math.sign(x)<br>x의 양의 수인지 음의 수인지 나타내는 부호를 반환합니다.</p></li><li><p>math.sin(x)<br>숫자의 사인 값을 반환합니다.</p></li><li><p>math.sinh(x)<br>숫자의 쌍곡사인 값을 반환합니다.</p></li><li><p>math.sqrt(x)<br>숫자의 제곱근을 반환합니다.</p></li><li><p>math.tan(x)<br>숫자의 탄젠트 값을 반환합니다.</p></li><li><p>math.tanh(x)<br>숫자의 쌍곡탄젠트 값을 반환합니다.</p></li><li><p>math.toSource()<br>문자열 “Math”를 반환합니다.</p></li><li><p>math.trunc(x)<br>숫자의 정수 부분을 반환합니다.</p></li></ul>]]></content:encoded>
      
      <comments>https://hdw0903.github.io/2020/03/29/Math%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
