{"pages":[],"posts":[{"title":"Array(배열) 객체 -JavaScript","text":"여러 개의 데이터를 하나의 저장소에 저장하는 Array(배열) 객체 사용법 3가지 1. var a =new Array(); a[0]=30; a[1]=&quot;홍길동&quot;; a[2]=true; 2. var b =new Array(30, &quot;홍길동&quot;, true); 3. var c =[30, &quot;홍길동&quot;, true]; 배열 객체의 메서드 및 속성 종류 설명 join(연결문자) 배열 객체에 데이터를 연결 문자 기준으로 1개의 문자형 데이터로 반환 reverse() 배열 객체에 데이터의 순서를 거꾸로 바꾼 후 반환 sort() 배열 객체에 데이터를 오름차순으로 정렬 slice(index1, index2) 배열 객체에 데이터 중 원하는 인덱스 구간만큼 잘라서 배열 객체로 가져옴 splice() 배열 객체에 지정 데이터를 삭제하고 그 구간에 새 데이터를 삽입 concat() 2개의 배열 객체를 하나로 결합 pop() 배열에 저장된 데이터 중 마지막 인덱스에 저장된 데이터를 삭제 push(new data) 배열 객체 마지막 인덱스에 새 데이터 삽입 shift() 배열 객체에 저장된 데이터 중 첫 번째 인덱스에 저장된 데이터를 삭제 unshift(new date) 배열 객체의 가장 앞의 인덱스에 새 데이터를 삽입 length 배열에 저장된 총 데이터의 개수를 반환 join() 과 reverse() 사용 예제123456789101112131415161718var num=[\"사당\",\"교대\",\"방배\",\"강남\"]; // 배열 객체를 출력합니다. document.write(num,\"&lt;br /&gt;\"); //사당,교대,방배,강남 // 배열 객체의 형(type) 출력합니다. document.write(typeof num,\"&lt;br/&gt;\"); //object // \"-\" 문자를 기준으로 하나의 문자형 데이터로 결합합니다. document.write(num.join(\"-\"),\"&lt;br/&gt;\"); // 사당-교대-방배-강남 // join으로 결합된 데이터의 형이 문자형 데이터인걸 확인할 수 있습니다. document.write(typeof num.join(\"-\"),\"&lt;br/&gt;\"); //string // 배열 객체 값 순서가 역으로 출력됩니다. document.write(num.reverse(),\"&lt;br/&gt;\"); // 강남,방배,교대,사당 // 배열 객체 값들을 오름차순으로 정렬 후 출력합니다. document.write(num.sort(),\"&lt;br/&gt;\"); // 강남,교대,방배,사당 splice() 와 slice() 사용 예제123456789var greenLine=[\"사당\",\"교대\",\"방배\",\"강남\"]; /* greenline 배열 객체 인덱스 2에 저장된 데이터 1개를 삭제하고 \"서초\",\"역삼\" 데이터 삽입 */ greenLine.splice(2,1,\"서초\",\"역삼\"); //사당,교대,서초,역삼,강남 document.write(greenLine,\"&lt;br/&gt;\"); // greenline 객체의 인덱스1 부터 3이전 까지 일부 데이터만 반환합니다. document.write(greenLine.slice(1,3),\"&lt;br/&gt;\"); //교대,서초 concat(), pop(), push(), shift(), unshift() 사용 예제1234567891011121314151617var greenLine=[\"사당\",\"교대\",\"방배\",\"강남\"]; var yellowLine=[\"미금\",\"정자\",\"모란\",\"수서\"]; var twoLine=greenLine.concat(yellowLine); document.write(twoLine,\"&lt;br/&gt;\"); // 2개의 배열 객체가 하나가 되어 twoLine에 저장됩니다. greenLine.pop(); document.write(greenLine,\"&lt;br/&gt;\"); // 마지막 인덱스 값인 \"강남\" 삭제됩니다. greenLine.push(\"삼성\"); document.write(greenLine,\"&lt;br/&gt;\"); // 마지막 인덱스에 \"삼성\" 값을 삽입합니다. greenLine.shift(); document.write(greenLine,\"&lt;br/&gt;\"); // 첫 번째 인덱스 값인 \"사당\" 삭제됩니다. greenLine.unshift(\"신도림\"); document.write(greenLine,\"&lt;br/&gt;\"); // 인덱스 가장 앞에 \"신도림\" 값을 삽입합니다.","link":"/2020/03/02/Array%20%EB%B0%B0%EC%97%B4%20%EA%B0%9D%EC%B2%B4%20-JavaScript/"},{"title":"Arrow -ECMAScript","text":"arrow(화살표) 함수는function(param) {코드} 형태를 축약한 것으로 (param) =&gt; {코드} 형태로 작성합니다. 화살표 함수 표현(arrow function expression)은 function 표현에 비해 구문이 짧고 자신의 this, arguments, super 또는 new.target을 바인딩 하지 않습니다.화살표 함수는 항상 익명입니다. 이 함수 표현은 메소드 함수가 아닌 곳에 가장 적합합니다. 그래서 생성자로서 사용할 수 없습니다. 기본 구문 (param1, param2, …, paramN) =&gt; { statements }(param1, param2, …, paramN) =&gt; expression// 다음과 동일함: =&gt; { return expression; } // 매개변수가 하나뿐인 경우 괄호는 선택사항:(singleParam) =&gt; { statements }singleParam =&gt; { statements } // 매개변수가 없는 함수는 괄호가 필요:() =&gt; { statements } 고급 구문 12// 객체 리터럴 표현을 반환하기 위해서는 함수 본문(body)을 괄호 속에 넣음: params =&gt; ({foo: bar}) 123// 나머지 매개변수 및 기본 매개변수를 지원함 (param1, param2, …rest) =&gt; { statements } (param1 = defaultValue1, param2, …, paramN = defaultValueN) =&gt; { statements } 123// 매개변수 목록 내 비구조화도 지원됨 var f = ([a, b] = [1, 2], {x: c} = {x: a + b}) =&gt; a + b + c; f(); // 6 예시1234567891011121314151617var materials = [ 'Hydrogen', 'Helium', 'Lithium', 'Beryllium' ]; materials.map(function(material) { return material.length; }); // [8, 6, 7, 9] // 위에 있는 함수를 arrow 함수를 이용해 아래와 같이 표현할 수 있다 materials.map((material) =&gt; { return material.length; }); // [8, 6, 7, 9] materials.map(({length}) =&gt; length); // [8, 6, 7, 9] 줄바꿈화살표 함수는 파라미터와 화살표 사이에 개행 문자를 포함 할 수 없습니다. var func = (a, b, c)=&gt; 1;// SyntaxError: expected expression, got ‘=&gt;’ 하지만, 보기 좋은 코드를 유지하고 싶다면, 아래에 보는 것처럼 괄호나 개행을 둠으로써 이를 수정할 수 있습니다. 12345678var func = ( a, b, c ) =&gt; ( 1 ); // SyntaxError가 발생하지 않습니다. new 연산자 사용화살표 함수는 생성자로서 사용될 수 없으며 new와 함께 사용하면 오류가 발생합니다. var Foo = () =&gt; {};var foo = new Foo(); // TypeError: Foo is not a constructor prototype 속성 사용화살표 함수는 prototype 속성이 없습니다. var Foo = () =&gt; {};console.log(Foo.prototype); // undefined 함수 호출arrow 함수는 함수 이름이 없는 무명(혹은 익명) 함수 입니다.따라서 함수를 호출 하려면 함수 표현식과 같이 변수에 할당해야 합니다. let fn = (param) =&gt; {코드} 위 처럼 arrow 함수로 생성한 function 오브젝트를 할당할 변수를 작성해야합니다. 123456789\"use strict\"; debugger; //arrow 함수로 생성된 function 오브젝트를 할당할 변수 es6 작성 let es6 = (one, two) =&gt; { //파라미터 (one,two) 작성 return one + two; }; let result = es6(1, 2); console.log(result); // 3 블록,파라미터arrow 함수에서 함수 블록{}을 사용하지 않고 한 줄에 작성할 수 있습니다. {}없이 한줄 작성123456\"use strict\"; debugger; let total = (one, two) =&gt; one + two; let result = total(1, 2); console.log(result); // 3 블록{}을 사용하지 않은 형태입니다.()안의 one,two가 total 함수의 파라미터가 됩니다.one + two; 는 return을 생략한 것입니다.return one + two; 와 동일합니다. 호출 받는 파라미터가 하나인경우 소괄호()을 제외하고 작성할 수도 있습니다. ()제외123let get = value =&gt; value + 10; // = (value) + 10; let result = get(20); console.log(result); // 30 파라미터 없이 함수 호출만 이루어 진다면 ()만 작성합니다. 123let noParam = () =&gt; 3 + 4; let result = noParam(); console.log(result); // 7 {key: value} 형태의 Objedt 오브젝트 반환{key: value} 형태의 Objedt 오브젝트 반환하려면 ()안에 {key: value}를 작성합니다. (o)123let get = param =&gt; ({sports: \"축구\"}); let result = get(); console.log(result); // Object {sports: \"축구\"} JavaScript는 소괄호() 안의 코드를 표현식으로 인식합니다.그래서 소괄호()안에 작성된 {sports: “축구”}를 반환할 수 있습니다. (x)123let sports = () =&gt; {}; let result = sports(); console.log(result); // undefined 위 코드는 sports() 함수를 호출하면 {key: value} 형태의빈 Object 오브젝트를 반환하는 것이 목적입니다. 하지만, arrow (=&gt;) 다음의 블록{}을 함수 블록으로 인식하고함수 블록{}안에 return문을 작성하지 않은 것으로 인식되어함수 안에 return문을 작성하지 않았을 때의 디폴트 값 undefined가 반환됩니다. arrow 함수이기 때문에 undefined값이 반환 되는것이 아니라ES5 기준으로 함수블록으로 인식되었기 때문입니다. arguments자바스크립트에서는 함수를 호출할 때 인수들과 함께 암묵적으로 arguments 객체가 함수 내부로 전달된다. arguments 객체는 함수를 호출할 때 넘긴 인자들이 배열 형태로 저장된 객체를 의미한다. 특이한 점은 실재 배열이 아닌 마치 배열 형태처럼 숫자로 인덱싱된 프로퍼티가 있는 객체다. 이러한 객체를 배열과 유사하다 하여 유사 배열 객체라고 부른다. arguments 객체는 세 부분으로 구성되어 있다. 함수를 호출할 때 넘겨진 인자(배열 형태): 첫 번째 인자는 0, … n-1번 인덱스 length 프로퍼티: 호출할 때 넘겨진 인자의 개수 callee 프로퍼티: 현재 실행 중인 함수의 참조값 arguments은 유사 배열 객체로써 배열과 유사하게 동작하지만, 배열은 아니므로 배열 메서드를 사용하면 에러가 발생한다. 바인딩 되지 않은 arguments 화살표 함수는 arguments 객체를 바인드 하지 않습니다.때문에 arguments 프로퍼티를 사용할 수 없습니다. 12345678let sports = () =&gt; { try { let args = arguments; //ReferenceError } catch (error) { console.log(\"사용 불가\"); } } sports(1, 2); ES6에서는 arguments 대신에 rest 파라미터를 사용합니다. let sports = (…rest) =&gt; {코드} ()안에 …을 작성하고 이어서 파라미터를 작성합니다. 123456function foo(n) { var f = (...args) =&gt; args[0] + n; return f(2); } foo(1); // 3 this와 setTimeout()arrow함수가 간단한 코드작성을 할 수 있어 편리하지만this의 참조 경우를 고려해야 합니다. 예시123456789101112131415161718192021let Sports = function(){ this.count = 20; }; Sports.prototype = { plus: function(){ this.count += 1; }, get: function(){ setTimeout(function(){ console.log(this === window); console.log(this.plus); }, 1000); } }; // newSports 변수에 new 연산자로 생성된 Sports 인스턴스를 생성하여 할당합니다. let newSports = new Sports(); //get() 함수에 작성된 setTimeout() 함수가 실행되어 //1초 후에 콜백 함수가 실행됩니다. newSports.get(); // true // undefined setTimeout()이 window 오브젝트 함수 이므로this가 window 오브젝트를 참조하게 되어 true가 출력됩니다. 중요한 점은 newSports.get()형태로 호출 하였기 때문에this가 newSports 인스턴스를 참조 하지 않고window 오브젝트를 참조 한다는 것 입니다. this가 newSports 인스턴스를 참조하지 못하므로setTimeout()을 실행하기 전에 newSports 인스턴스를 변수에 할당하고,setTimeout() 콜백 함수에서 변수의 인스턴스를 사용하는 형태를 취했습니다. console.log(this.plus)코드의 목적은this로 newSports 인스턴스를 참조하여 plus 메서드를 반환받는 것입니다.그런데 this가 window 오브젝트를 참조하므로 undefined값이 출력됩니다. 해결방법12345678910111213141516let Sports = function(){ this.count = 20; }; Sports.prototype = { plus: function(){ this.count += 1; }, get: function() { setTimeout(() =&gt; { // 콜백 함수를 arrow함수로 작성합니다. this.plus(); console.log(this.count); }, 1000); } }; let newSports = new Sports(); newSports.get(); // 21 setTimeout() 함수의 콜백 함수를 arrow함수로 작성하면this가 newSports.get()형태에서 newSports 인스턴스를 참조 할수 있게 됩니다.","link":"/2020/03/17/Arrow%20-ECMAScript/"},{"title":"Array 오브젝트 -ECMAScript","text":"ES6에서 Array오브젝트에 9개의 메서드가 추가되었습니다.추가된 메서드를 살펴봅니다. Array 오브젝트 from(): Array 오브젝트 생성 of(): 배열 엘리먼트 설정 copyWithin(): 범위 값 복사, 설정 fill(): 범위 값 변경 entries(): 이터레이터 오브젝트 생성 keys(): key 이터레이터 오브젝트 생성 values(): value 이터레이터 오브젝트 생성 find(): 엘리먼트 값 비교, 반환 findIndex(): 배열 인덱스 반환 from(): Array 오브젝트 생성 새로운 Array 오브젝트를 생성하고 콜백 함수에서 반환된 값을 엘리먼트 값으로 설정하여 새로운 Array 객체를 반환합니다. Array.from(arrayLike[, mapFn[, thisArg]]) arrayLike배열로 변환하고자 하는 유사 배열 객체(Array-like)나 반복 가능한 객체(이터러블 오브젝트). mapFn (선택적 파라미터)배열의 모든 엘리먼트 마다 호출할 함수. thisArg (선택적 파라미터)두 번째 파라미터 함수 실행 시에 this로 참조할 값. 반환 값새로운 Array 인스턴스. 중요 포인트다음과 같은 경우에 Array.from()으로새Array를 만들 수 있습니다. 유사 배열 객체 (length 속성과 인덱싱된 요소를 가진 객체) 순회 가능한 객체 (Map, Set 등객체의 요소를 얻을 수 있는 객체) Array.from()은 선택 매개변수인 mapFn를 가지는데,배열(혹은 배열 서브클래스)의 각 요소를 맵핑할 때 사용할 수 있습니다. 즉,Array.from(obj, mapFn, thisArg)는 중간에 다른 배열을 생성하지 않는다는 점을 제외하면Array.from(obj).map(mapFn, thisArg)와 같습니다. 이 특징은 typed arrays와 같은 특정 배열 서브클래스에서 중간 배열 값이 적절한 유형에 맞게 생략되기 때문에 특히 중요합니다. from() 메서드의 length 속성은 1입니다. ES2015 이후, 클래스 구문은 내장 및 새 클래스의 상속을 가능케 했습니다. 그 결과로 Array.from과 같은 정적 메서드는 Array의 서브클래스에 의해 상속되며, Array 대신 자신의 인스턴스를 만듭니다. 예제1123456789101. let arrayObj = Array.from({0: \"zero\", 1: \"one\", length: 2}); console.log(Array.isArray(arrayObj)); console.log(arrayObj); 2. let stringObj = Array.from(\"ABC\"); console.log(stringObj); // true // [\"zero\",\"one\"] // [\"A\", \"B\", \"C\"] Array.from() 첫 번째 파라미터에 Array-like 오브젝트를 작성했습니다.새로운 Array 오브젝트를 생성하고 Array-like 오브젝트의 프로퍼티 값을 배열에 추가하여 반환합니다. {0:”zero”, 1:”one”, length: 2}에서 프로퍼티 키와 length 프로퍼티를 제외한 “zero” 와 “one”이 생성된 Array 오브젝트에 추가됩니다. Array.from() 파라미터 “ABC” 를 생성한 Array 오브젝트 배열의 엘리먼트에 하나씩 설정하여 반환합니다. 즉[“A”, “B”, “C”] 형태로 반환합니다. 예제2123456let arrayLike = {0: 10, 1: 30, length: 2}; let values = Array.from(arrayLike, function(value) { return value + this.bonus; }, {bonus: 100}); console.log(values); // [110, 130] Array-like 오브젝트의 프로퍼티를 하나씩 읽어 갑니다.프로퍼티를 읽을 때 마다 콜백 함수를 호출 합니다.읽은 프로퍼티 값이 콜백 함수의 value 파라미터에 설정됩니다.콜백 함수에서 this로 from()의 세 번째 파라미터에 지정한 오브젝트를 참조할 수 있습니다. Array-like 오브젝트의 length 프로퍼티는 참조되지 않습니다. 첫 번째 파라미터의 첫 번째 프로퍼티 값은 10 이며두 번째 파라미터 콜백 함수의 value 파라미터에 설정됩니다.this.bonus는 bonus 값을 참조합니다. value + this.bonus는 110이 반환되고 생성된 Array 배열에 추가됩니다. 두 번째 프로퍼티 값인 30도 같은 방법으로 처리되고 최종적으로 생성된 배열을 반환합니다. 그외 예제 Set에서 배열 만들기 123const s = new Set([‘foo’, window]); Array.from(s); // [“foo”, window] Map에서 배열 만들기 12345678910const m = new Map([[1, 2], [2, 4], [4, 8]]); Array.from(m); // [[1, 2], [2, 4], [4, 8]]const mapper = new Map([[‘1’, ‘a’], [‘2’, ‘b’]]); Array.from(mapper.values()); // [‘a’, ‘b’];Array.from(mapper.keys()); // [‘1’, ‘2’]; 배열 형태를 가진 객체(arguments)에서 배열 만들기 12345function f() { return Array.from(arguments); } f(1, 2, 3); // [1, 2, 3] Array.from과 화살표 함수 사용하기 1234567891011121314151617181920212223242526272829Array.from([1, 2, 3], x =&gt; x + x); // [2, 4, 6]// 숫자생성 // Array는 초기화 될때 각 위치마다 ‘undefined’값으로 초기화 됩니다. // 아래의 v 의 value 값은 undefined 가 될 것입니다. Array.from({length: 5}, (v, i) =&gt; i); // [0, 1, 2, 3, 4]``` * * *&lt;h2 id=\"Array_of\"&gt;of(): 배열 엘리먼트 설정&lt;/h2&gt;파라미터 값을 새로운 배열의 엘리먼트로 설정하여 반환합니다.&gt; Array.of(element0[, element1[, …[, elementN]]])* 매개변수 elementN 배열을 생성할 때 사용할 엘리먼트. * 반환 값 새로운 Array 객체. ```jslet arrayObj = Array.of(1, 2, 3); console.log(arrayObj); /// [1, 2, 3] Array.of() 파라미터에 새로운 배열의 엘리먼트에 설정할 값을 작성합니다.콤마로 구분하여 다수를 작성할 수 있습니다.Array.of()가 호출되면 우선 Array 오브젝트를 생성합니다. 이어서 파라미터에 작성한 순서대로 Array 오브젝트에 추가한 후, 반환합니다. Array.from()은 파라미터에 Array-like 또는 이터러블 오브젝트를 지정하지만,Array.of()는 파라미터에 값을 지정합니다. Array.of()와 Array 생성자의 차이는 정수형 인자의 처리 방법에 있습니다.Array.of(7)은 하나의 요소 7을 가진 배열을 생성하지만Array(7)은 length 속성이 7인 빈 배열을 생성합니다. Array.of12345Array.of(7); // [7] Array.of(1, 2, 3); // [1, 2, 3] Array(7); // [ , , , , , , ] Array(1, 2, 3); // [1, 2, 3] copyWithin(): 범위 값 복사, 설정 copyWithin() 메서드는 배열의 일부를 인덱스 범위의 값을 복사하여, 동일한 배열의 지정한 위치에 덮어쓰고 그 배열을 반환합니다. 이 때, 배열의 길이를 수정하지 않고 반환합니다. Array.copyWithin(target[, start[, end]]) target복사한 값을 설정할 시작 인덱스. 음수를 지정하면 인덱스를 배열의 끝에서부터 계산합니다.target이 arr.length보다 크거나 같으면 아무것도 복사하지 않습니다.target이 start 이후라면 복사한 시퀀스를 arr.length에 맞춰 자릅니다. start (선택적 파라미터)복사를 시작할 위치를 가리키는 0 기반 인덱스.음수를 지정하면 인덱스를 배열의 끝에서부터 계산합니다.기본값은 0으로, start를 지정하지 않으면 배열의 처음부터 복사합니다. end (선택적 파라미터)복사를 끝낼 위치를 가리키는 0 기반 인덱스.copyWithin은 end 인덱스 이전까지 복사하므로end 인덱스가 가리키는 요소는 제외합니다. 음수를 지정하면 인덱스를 배열의 끝에서부터 계산합니다.기본값은 arr.length로, end를 지정하지 않으면 배열의 끝까지 복사합니다. 반환 값수정한 배열. 중요 포인트copyWithin은 C와 C++의 memmove처럼 작동하고, 복사와 대입이 하나의 연산에서 이루어지므로 Array의 데이터를 이동할 때 사용할 수 있는 고성능 메서드입니다. TypedArray의 동명 메서드에서 이 특징이 두드러집니다. 붙여넣은 시퀀스의 위치가 복사한 범위와 겹치더라도 최종 결과는 원본 배열에서 복사한 것과 같습니다. copyWithin 함수는 제네릭 함수로, this 값이 Array 객체일 필요는 없습니다. copyWithin 메서드는 변경자 메서드로, this의 길이는 바꾸지 않지만 내용을 바꾸며 필요하다면 새로운 속성을 생성합니다. 12345678910111. let one = [1, 2, 3, 4, 5]; console.log(one.copyWithin(0, 3)); 2. let two = [1, 2, 3, 4, 5]; console.log(two.copyWithin(0, 2, 4)); 3. let three = [1, 2, 3, 4, 5]; console.log(three.copyWithin(3)); // [4, 5, 3, 4, 5] // [3, 4, 3, 4, 5] // [1, 2, 3, 1, 2] copyWithin() 두 번째 파라미터에 지정한 인덱스 3부터 배열의 끝까지 엘리먼트 값을 복사하여 첫 번째 파라미터 값인 인덱스 0부터 차례대로 설정합니다. 4와 5를 인덱스 0 부터 설정하므로 [1, 2]가 [4, 5]로 대체되어 [4, 5, 3, 4, 5]가 됩니다. 두 번째 파라미터 값인 인덱스 2부터 세 번째 파라미터 값인 인덱스 4 직전까지 엘리먼트 값을 복사항 첫 번째 파라미터 값인 인덱스 0부터 차례대로 설정합니다.3과 4를 인덱스 0부터 설정하므로 [1, 2]가 [3, 4]로 대체되어 [3, 4, 3, 4, 5]가 됩니다. 두 번째와 세 번째 파라미터를 작성하지 않았으므로 배열 전체를 복사하여인덱스 3부터 설정합니다. 복사할 엘리먼트 수는 5이지만, 설정 할수 있는 엘리먼트의 수는 두 개 입니다. [4, 5]에 [1, 2]가 설정되고 나머지 [3, 4, 5]는 설정되지 않습니다. 즉 [1, 2, 3, 1, 2]가 출력됩니다. Array-like123456789101112131415161718192021222324let arrayLike = {0: \"ABC\", 1: \"DEF\", 2: \"가나다\", length: 3}; 1. let one = Array.prototype.copyWithin.call(arrayLike, 0, 1); console.log(one); 2. function two() { return Array.prototype.copyWithin.call(arguments, 3, 0, 2); }; console.log(two(1, 2, 3, 4, 5)); /* Object 0: \"DEF\" 1: \"가나다\" 2: \"가나다\" length: 3 Arguments(5) callee: (...) 0: 1 1: 2 2: 3 3: 1 4: 2 length: 5 */ Array-like 는 배열이 아닌 오브젝트이므로 Array.copyWithin()형태로 호출할 수 없습니다. 하지만 위와 같이 call()을 호출하면서 첫 번째 파라미터에 Array-like를 지정하면 copyWithin()이 호출됩니다. arrayLike 오브젝트의 프로퍼티 키인 0,1,2를 배열의 인덱스로 사용합니다.세 번째 파라미터인 인덱스 1 부터 끝까지 복사하여 [“DEF”,”가나다”] 가인덱스 0,1 값과 대체됩니다. {0: “DEF”, 1: “가나다”, 2: “가나다”, length: 3} 호출한 함수에서 넘겨준 파라미터 값이 arguments에 설정됩니다. arguments가 Array-ike 오브젝트 이므로 call()의 첫 번째 파라미터에 지정하면 copyWithin()을 호출할 수 있습니다. 인덱스 0 부터 인덱스 2 이전까지 복사합니다 [1, 2]이를 인덱스 3부터 설정하여 인덱스 3,4의 값이 대체됩니다. [1, 2, 3, 1, 2] fill(): 범위 값 변경 같은 배열에서 인덱스 범위의 값을 하나의 지정한 값으로 바꾸어 반환합니다. array.fill(value[, start[, end]]) value배열을 채울 값. start (선택적 파라미터)시작 인덱스, 기본 값은 0. end (선택적 파라미터)범위 끝 인덱스, 기본 값은 this.length. 반환 값변형한 배열. 중요 포인트 start가 음수이면 시작 인덱스는 [length + start]입니다. end가 음수이면 끝 인덱스는 [length + end]입니다. fill은 일반 함수이며, this 값이 배열 객체일 필요는 없습니다. fill 메서드는 변경자 메서드로, 복사본이 아니라 this 객체를 변형해 반환합니다.value에 객체를 받을 경우 그 참조만 복사해서 배열을 채웁니다. 1234567891011let one = [1, 2, 3]; 1. console.log(one.fill(7)); let two = [1, 2, 3, 4, 5]; 2. console.log(two.fill(7, 1)); let three = [1, 2, 3, 4, 5]; 3. console.log(three.fill(7, 1, 3)); // [7, 7, 7] // [1, 7, 7, 7, 7] // [1, 7, 7, 4, 5] 범위를 지정해 주지 않았으므로 배열 전체가 변경 대상이 됩니다.첫 번째 파라미터 7이 변경할 값이 되어 [7, 7, 7]로 변경됩니다. 두 번째 파라미터 인덱스 값1 부터 배열 끝까지가 변경 대상이 됩니다.[1, 7, 7, 7, 7]로 변경됩니다. 두 번째 파라미터 인덱스 값1 부터 세 번째 파라미터 인덱스 3이전 까지가 변경 대상입니다. [2, 3]이 7로 변경되어 [1, 7, 7, 4, 5]이 됩니다. entries(): 이터레이터 오브젝트 생성 Array오브젝트를 이터레이터 오브젝트로 생성하여 반환합니다. Array.entries() 반환값 iterator entries12345678910111213141516let values = [10, 20, 30]; // Array 오브젝트로 이터레이터 오브젝트를 생성해 반환합니다. 1. let iterator = values.entries(); console.log(iterator.next()); 2. for (var [key, value] of iterator){ console.log(key, \":\", value); }; /* Object {value: Array(2) [ {0: 0}, {1: 10} ], done: false} 1: 20 2: 30 */ iterator 오브젝트의 next()를 호출 하면 {value: (2),done: false} 형태를 반환합니다. 배열의 인덱스와 엘리먼트가 프로퍼티 형태로 되기 때문입니다.[{0: 0}, {1: 10}] 이터레이터 오브젝트는 for-of문에 [key: value]형태로 키와 값을 동시에 작성할 수 있습니다. 실행 결과에 “0: 10”이 출력되지 않는 것은 바로 앞의 next()에서 이터레이션 처리를 하였기 때문입니다. 따라서 for-of문은 두 번째 인덱스부터 처리되었습니다. keys(): key 이터레이터 오브젝트 생성 key만 갖는 이터레이터 오브젝트를 생성하여 반환합니다. 배열의 인덱스를 key 값으로 사용하여 이터레이터 오브젝트를 생성합니다.배열의 엘리먼트 값은 이터레이터 오브젝트에 포함되지 않습니다. 123456789let iterator = [10, 20, 30].keys(); for (var key of iterator){ console.log(key, \":\", iterator[key]); }; /* 0 \":\" undefined 1 \":\" undefined 2 \":\" undefined */ [10, 20, 30].keys()로 이터레이터 오브젝트를 생성하면인덱스 0, 1, 2만 설정되고 엘리먼트 값 [10, 20, 30]은 설정되지 않습니다.value 값에 undefined가 출력됩니다. for(var[key, value] of iterator){}와 같이 [key, value]를 작성하면 TypeError가 발생하므로 key만 작성해야 합니다. values(): value 이터레이터 오브젝트 생성 value만 갖는 이터레이터 오브젝트를 생성하여 반환합니다. 배열 엘리먼트 값으로 이터레이터 오브젝트를 생성합니다.배열 인덱스는 이터레이터 오브젝트에 포함되지 않습니다.Symbol.iterator()와 같습니다. 1234567891011121314151617181920212223// 크롬 52~54, 파이어폭스 47~49 지원하지 않음 let iterator = [10, 20, 30].values(); 1. console.log(iterator.next()); 2. console.log(iterator.next()); 3. console.log(iterator.next()); 4. console.log(iterator.next()); /* 1.Object value: 10 done: false 2.Object value: 20 done: false 3.Object value: 30 done: false 4.Object value: undefined done: true */ for-of 루프 반복을 사용 하려면.브라우저가 for-of 루프와 for 루프안에 let 스코프 변수를 지원해야 합니다. find(): 엘리먼트 값 비교, 반환 find() 메서드는 주어진 콜백 함수를 만족하는(true 값) 첫 번째 엘리먼트의 값을 반환합니다. 그런 요소가 없다면 undefined를 반환합니다. Array.find(callback[, thisArg]) callback배열의 각 값에 대해 실행할 함수. 아래의 세 인자를 받습니다. element콜백함수에서 처리할 현재 엘리먼트. index콜백함수에서 처리할 현재 엘리먼트의 인덱스. arrayfind 함수를 호출한 배열. thisArg (선택적 파라미터)콜백이 호출될 때 this로 사용할 객체. 반환 값주어진 판별 함수를 만족하는 첫 번째 요소의 값. 그 외에는 undefined. 중요 포인트 find 메서드는 callback 함수가 참을 반환 할 때까지 해당 배열의 각 요소에 대해서 callback 함수를 실행합니다. 만약 어느 요소를 찾았다면 find 메서드는 해당 요소의 값을 즉시 반환하고, 그렇지 않았다면 undefined를 반환합니다. callback은 0 부터 length - 1 까지 배열의 모든 인덱스에 대해 호출되며, 값이 지정되지 않은 요소도 포함하여 모든 인덱스에 대해 호출됩니다. 따라서, 희소 배열 (sparse arrays)의 경우에는 값이 지정된 요소만 탐색하는 다른 메소드에 비해 더 비효율적입니다. thisArg 파라미터가 주어진 경우에는 제공되었다면 thisArg가 callback안에서 this로 사용되고, 그렇지 않은 경우 undefined 가 this로 사용됩니다. find는 호출의 대상이 된 배열을 변경(mutate)하지 않습니다. find가 처리할 배열 요소의 범위는 첫 callback이 호출되기 전에 먼저 결정됩니다. find메서드가 실행 된 이후에 배열에 추가된 요소들에 대해서는 callback이 호출되지 않습니다. 아직 callback이 호출되지 않았던 배열 요소가 callback에 의해서 변경된 경우, find가 해당 요소의 인덱스를 방문할 때의 값으로 callback함수에 전달될 것입니다. 즉, 삭제된 요소에도 callback이 호출됩니다. 1234567891. let result = [1, 2, 3].find((value, index, allData) =&gt; value === 2); console.log(result); 2. result = [1, 2, 1].find(function(value, index, allData){ return value === 1 &amp;&amp; value === this.key; }, {key: 1}); console.log(result); //2 //1 [1, 2, 3]에서 1을 읽으면 콜백 함수가 호출됩니다. 콜백 함수의 value 파라미터에 1이 설정되고 index에 0이 설정되며, allData에 배열 전체가 설정됩니다.value === 2에서 false를 반환하므로 배열의 다음 엘리먼트로 넘어가 콜백 함수를 호출합니다. 엘리먼트 값이 2이므로 true가 반환됩니다.이때 find()를 종료하면서 처리 중인 엘리먼트 값 2가 반환됩니다. find()의 두 번째 파라미터에 {key: 1}을 작성했으며 콜백 함수에서 this로 참조할 수 있습니다. 배열의 첫 번째 엘리먼트 값이 1이므로 콜백 함수가 true를 반환하고 find()가 종료됩니다. 엘리먼트 값 1을 반환합니다.남은 엘리먼트 값 [2, 1]은 처리되지 않습니다. findIndex(): 배열 인덱스 반환 콜백 함수에서 true를 반환하는 첫 번째 엘리먼트의 배열 인덱스를 반환합니다.만족하는 요소가 없으면 -1을 반환합니다. Array.findIndex(callback(element[, index[, array]])[, thisArg]) callback3개의 인수를 취하여 배열의 각 값에 대해 실행할 함수입니다. element배열에서 처리중인 현재 요소입니다. index배열에서 처리중인 현재 요소의 인덱스입니다. arrayfindIndex 함수가 호출된 배열입니다. thisArg (선택적 파라미터)콜백을 실행할 때 this로 사용할 객체입니다. 반환 값엘리먼트가 함수에 true값을 반환하면 그 배열의 인덱스 반환.그렇지 않으면 -1을 반환합니다. 12345678910111213141. let result = [10, 20, 30].findIndex( (value, index, allData) =&gt; value === 20); console.log(result); 2. result = [10, 20, 30].findIndex((value, index, allData) =&gt; value === 77); console.log(result); 3. result = [10, 20, 30].findIndex(function(value, index, allData){ return value === 30 &amp;&amp; value === this.check; }, {check: 30}); console.log(result); // 1 // -1 // 2 [10, 20, 30]에서 처음의 10을 읽으면 콜백 함수가 호출됩니다.콜백 함수의 value 파라미터에 10이 설정되고 index에 0이 설정되며,allData에 배열 전체가 설정됩니다. value === 20 에서 false를 반환하므로배열의 다음 엘리먼트로 넘어가 콜백 함수를 호출 합니다.엘리먼트 값이 20이므로 true를 반환하며 findIndex()를 종료하며 처리 중인 인덱스 1을 반환합니다. 배열에 true값 77이 없으므로 배열의 엘리먼트 마지막까지 콜백 함수에서 false를 반환하게 되면 findIndex()를 종료하면서 -1을 반환합니다. findIndex()의 두 번째 파라미터에 {check: 30}을 작성했으며콜백 함수에서 this로 참조할 수 있습니다.배열 엘리먼트 값이 30일 때 콜백 함수에서 true를 반환하며 인덱스 값이 2이므로최종적으로 2를 반환합니다.","link":"/2020/03/30/Array%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"BOM (브라우저 객체 모델)","text":"브라우저에 내장된 객체를 브라우저 객체(BOM: Browser Object Model)라고 합니다. window는 브라우저 객체의 최상위 객체 입니다. window 객체는 여러가지 하위 객체를 포함하고 있습니다. window 객체 메서드 종류 종류 설명 open() 새 창(popup)을 열 때 사용 alert() 경고 창을 띄울때 사용 (window객체 없이 작성가능) prompt() 질의응답 창을 띄움 (window객체 없이 작성가능) confirm() 확인/취소 창을 띄움 (window객체 없이 작성가능) scrollBy(x, y) 윈도우 스크롤의 위치를 상대적으로 이동 scrollTo(x, y) 윈도우 스크롤의 위치를 절대적으로 이동 setInterval() 일정 간격으로 지속적으로 실행문을 실행시킴 setTimeout() 일정 간격으로 한번만 실행문을 실행시킴 focus() 윈도우에 초점 맞춤 blur() 윈도우에 맞춘 초점 제거 close() 윈도우 닫음 window.onload 윈도우 객체 로드 완료시 실행되는 객체 moveTo(x, y) 윈도우의 위치를 절대적으로 이동 moveBy(x, y) 윈도우의 위치를 상대적으로 이동 resizeTo(x, y) 윈도우의 크기를 절대적으로 지정 resizeBy(x, y) 윈도우의 크기를 상대적으로 지정 open()open()는 새 브라우저 창을 띄울 때 사용합니다.사이트에서 팝업 창을 띄울 때 자주 사용되는 메서드 입니다. 기본형 window.open(&quot;url&quot;,&quot;name&quot;,&quot;specs,replace&quot;);사용예시 12window.open(\"https://www.google.com\",\"google\", \"width=400, height=500, left=50, top=10,scrollbars=no,toolbars=no,location=no\"); 1.1. 반환값(ret)새로 만들어진 창 객체가 반환됩니다. 창의 생성에 실패하면 null을 반환합니다. 이 객체를 통해서 새창을 제어할 수 있습니다. 예로 ret.close(); 로 창을 닫을 수 있습니다. 1.2. url새창에 보여질 주소 입니다. 선택적인 값으로 비워두면 빈창(about:blank)이 보입니다. 빈 창을 열고 내용을 동적으로 적을 수 도 있습니다. var win = window.open(&quot;&quot;, &quot;PopupWin&quot;, &quot;width=500,height=600&quot;); win.document.write(&quot;&lt;p&gt;새창에 표시될 내용 입니다.&lt;/p&gt;&quot;);1.3. name새로 열릴 참의 속성 또는 창의 이름을 지정합니다. 선택적인 값으로 기본값은 “_blank” 입니다. 사용 가능한 값을 다음과 같습니다. _blank : 새 창에 열립니다. 이것이 기본값입니다. _parent : 부모 프레임에 열립니다. _self : 현재 페이지를 대체합니다. _top : 로드된 프레임셋을 대체합니다. name(임의의 이름) : 새 창이 열리고 창의 이름을 지정합니다.동일한 이름에 다시 open() 을 하면 기존의 열린창의 내용이 바뀝니다.다른 이름을 사용하면 또다른 새창이 열립니다. 1.4 specs 속성 설명 width 새 윈도우의 너비 height 새 윈도우의 높이 left 왼쪽 기준 팝업 위치 지정 음수는 사용할 수 없습니다 top 상단 기준 팝업 위치 지정 음수는 사용할 수 없습니다 status 상태 표시줄 유무 menubar 메뉴바 유무 resizable 화면 크기 조절 가능 여부 location 주소 표시줄 유무 Opera에서만 작동 scrollbars 스크롤바 유무 IE,Firefox,Opera에서 작동 toolbar 툴바 유무 IE,Firefox에서 작동 resizable 창의 리사이즈 가능 유무 IE에서만 작동 fullscreen 전체화면모드. IE에서만 작동 channelmode 전체화면으로 창이 열립니다. IE에서만 작동 1.5 replace히스토리 목록에 새 항목을 만들지 현재 항목을 대체할지 지정합니다. true : 현재 히스토리를 대체합니다. false : 히스토리에 새 항목을 만듭니다. 출처: https://www.w3schools.com/jsref/met_win_open.asp moveTo(), moveBy(), resizeTo(), resizeBy() moveTo() 메서드는 브라우저 창의 위치를 이동시킬때 사용합니다. moveTo(100,200); //브라우저 창을 x100,y200 위치에서 뜨게 합니다. moveBy() 메서드는 현재 브라우저 창의 위치를 기준으로 이동 시킵니다. moveBy(100,200); //실행될 때 마다 x100,y200만큼 이동합니다. resizeTo() 메서드는 브라우저 창의 너비와 높이를 바꿀때 사용합니다. resizeTo(200,300); //width 200px, height 300px로 바꿉니다. resizeBy() 메서드는 현재 창을 기준으로 지정된 픽셀 수만큼창의 오른쪽 아래 모서리를 이동합니다. 왼쪽 상단 모서리는 이동하지 않습니다 (원래 좌표로 유지됨).* resizeBy(200,300); //오른쪽 아래 모서리를 width 200px, height 300px 만큼 늘립니다. senInterval(), clearInterval() setInterval() setInterval() 메소드는 function을 호출하거나 일정한 간격 (밀리 초)으로 실행문을 반복하여 실행시킬 때 사용합니다. setInterval() 메소드는 clearInterval()이 호출되거나 window창이 닫힐 때까지 계속됩니다. setInterval()에 의해 리턴 된 ID 값은 clearInterval() 메소드의 매개 변수로 사용됩니다. 지정된 밀리 초 후에 함수를 한 번만 실행하려면 setTimeout() 메소드를 사용합니다. 1000ms = 1 초 4.0버젼 이전의 IE,Opera에서 실행되지 않을 수 있습니다. 기본형 var 참조변수=setInterval(function, milliseconds, param1, param2, ...)1.1 function필수 항목입니다. 실행될 기능(스크립트 실행문)항목 입니다. 1.2 milliseconds필수 할목입니다. 코드 실행 빈도에 대한 간격 (밀리 초)입니다. 값이 10보다 작은 경우 값 10이 사용됩니다. 1.3 param선택 옵션입니다. 함수에 전달할 추가 매개 변수가 있는 경우 사용합니다.IE9 및 이전 버전에서는 지원되지 않음 clearInterval() clearInterval() 메소드는 setInterval()로 설정된 타이머를 지웁니다. clearInterval() 메소드를 사용하려면 setInterval() 메소드를 작성할 때변수를 선언 해줘야 합니다. 1234myVar = setInterval(\"javascript function\", milliseconds); // clearInterval에 setInterval 변수를 선언해 줌으로써 // setInterval을 중지 할 수 있습니다. clearInterval(myVar); setTimeout(), clearTimeout() setTimeout() 메서드는 일정한 간격 후 스크립트 실행문을 단 한번만 실행시킵니다. 반복되길 원하면 setInterval()을 사용합니다. setTimeout()변수가 실행되지 않길 원하면 clearTimeout()을 사용합니다. 기본형 var(참조변수)=setTimeout(function, milliseconds, param1, param2, ...) setTimeout()의 milliseconds는코드를 실행하기전에 대기할 밀리 초를 뜻합니다.setInterval()의 mliiiseconds과 다르게 생략 할 수 있습니다.생략하게 되면 0값을 갖게되어 바로 실행됩니다. clearTimeout() 메서드는 아직 실행 되지않은 setTimeout()을 취소합니다. clearTimeout(id_of_settimeout); screenscreen객체는 사용자의 모니터 정보(속성)을 제공하는 객체입니다. screen.속성; 으로 사용합니다. 속성 설명 availHeight 윈도우 작업표시줄을 제외한 스크린 높이 값을 반환. availWidth 윈도우 작업표시줄을 제외한 스크린 너비 값을 반환. height 화면의 총 높이값을 반환. width 화면의 총 너비값을 반환. colorDepth 사용자 모니터가 표현 가능한 컬러 bit를 반환. pixelDepth 화면의 색상 해상도 (픽셀 당 비트 수)를 반환. locationlocation 객체는 사용자 브라우저 주소창에 url정보(속성)와 새로고침 기능(메서드)를 제공하는 객체 입니다. location.속성; 또는 location.메서드() 으로 사용합니다.location 객체 속성 속성 설명 hash URL의 앵커 부분 (#)을 설정하거나 반환합니다. host URL의 호스트 이름과 포트 번호를 설정하거나 반환합니다. hostname URL의 호스트 이름을 설정하거나 반환합니다. href 주소 영역에 참조 주소를 설정하거나 URL을 반환합니다. origin URL의 프로토콜, 호스트 이름 및 포트 번호를 반환합니다. pathname URL의 경로 이름(pathname)을 설정하거나 반환합니다. port URL의 포트 번호를 설정하거나 반환합니다. protocol URL의 프로토콜을 설정하거나 반환합니다. search URL의 쿼리 값을 설정하거나 반환합니다. location 객체 메서드 종류 설명 assign() 새 문서(페이지)를 로드 합니다. reload() 현재 문서(페이지)를 새로고침 합니다. replace() 현재 문서(페이지)를 새 문서(페이지)로 교체합니다. historyhistory 객체에는 브라우저 창 내에서 사용자가 방문한 URL이 포함됩니다. 속성 설명 History.length 현재 페이지를 포함해, 방문 기록에 저장된 목록의 개수를 나타내는 정수를 반환합니다. History.scrollRestoration 기록 탐색 시 스크롤 위치 복원 여부를 명시할 수 있습니다. 가능한 값은 auto와 manual입니다. History.state 기록 스택 최상단의 상태를 나타내는 값을 반환합니다.popstate 이벤트를 기다리지 않고 현재 기록의 상태를 볼 수 있는 방법입니다. 메서드 종류 설명 History.back() 세션 기록의 바로 뒤 페이지로 이동하는 비동기 메서드입니다. 브라우저의 뒤로 가기 버튼을 눌렀을 때, 그리고 history.go(-1)을 사용했을 때와 같습니다.참고: 세션 기록의 제일 첫 번째 페이지에서 호출해도 오류는 발생하지 않습니다. History.forward() 세션 기록의 바로 앞 페이지로 이동하는 비동기 메서드입니다. 브라우저의 앞으로 가기 버튼을 눌렀을 때, 그리고 history.go(1)을 사용했을 때와 같습니다.참고: 세션 기록의 제일 마지막 페이지에서 호출해도 오류는 발생하지 않습니다. History.go() 현재 페이지를 기준으로, 상대적인 위치에 존재하는 세션 기록 내 페이지로 이동하는 비동기 메서드입니다. 예를 들어, 매개변수로 -1을 제공하면 바로 뒤로, 1을 제공하면 바로 앞으로 이동합니다.세션 기록의 범위를 벗어나는 값을 제공하면 아무 일도 일어나지 않습니다. 매개변수를 제공하지 않거나, 0을 제공하면 현재 페이지를 다시 불러옵니다. History.pushState() 주어진 데이터를 지정한 제목(제공한 경우 URL도)으로 방문 기록 스택에 넣습니다. 데이터는 DOM이 불투명(opaque)하게 취급하므로, 직렬화 가능한 모든 JavaScript 객체를 사용할 수 있습니다. 참고로, Safari를 제외한 모든 브라우저는 title 매개변수를 무시합니다. History.replaceState() 세션 기록 스택의 제일 최근 항목을 주어진 데이터, 지정한 제목 및 URL로 대체합니다. 데이터는 DOM이 불투명(opaque)하게 취급하므로, 직렬화 가능한 모든 JavaScript 객체를 사용할 수 있습니다. 참고로, Safari를 제외한 모든 브라우저는 title 매개변수를 무시합니다. 123456789101112131415&lt;button id=\"prevBtn\" onclick=\"history.back();\"&gt; 이전 페이지 &lt;/button&gt; &lt;button id=\"nextBtn\" onclick=\"history.forward();\"&gt; 다음 페이지 &lt;/button&gt; &lt;button onclick=\"history.go(-1);\"&gt; 1단계 이전 페이지 &lt;/button&gt; &lt;button onclick=\"history.go(-2);\"&gt; 2단계 이전 페이지 &lt;/button&gt; navigatornavigator 객체는 현재 방문자가 사용하는 브라우저 정보와운영체제의 정보를 제공하는 객체 입니다. 기본형navigator.속성; 속성 설명 appCodeName 유저 브라우저의 내부 코드명을 반환합니다. appName 유저 브라우저의 이름을 반환합니다. appVersion 브라우저의 버젼 정보를 반환합니다. cookieEnabled 브라우저에서 쿠키가 활성화되어 있는지 확인합니다.쿠키가 무시되면false값 무시되지 않으면 true값을 반환합니다. geolocation 사용자의 위치를 ​​찾는 데 사용할 수있는 Geolocation 객체를 반환합니다. language 유저 브라우저의 언어를 반환합니다. onLine 브라우저가 온라인 상태인지 확인합니다. platform 브라우저 플랫폼을 나타내는 문자열을 반환합니다. product 유저 브라우저의 엔진 이름은 반환합니다. userAgent 유저의 브라우저와 운영체제 종합 정보를 반환합니다. 예시1234567document.write(\"appCodeName: \"+navigator.appCodeName,\"&lt;br/&gt;\"); document.write(\"appName: \"+navigator.appName,\"&lt;br/&gt;\"); document.write(\"appVersion: \"+navigator.appVersion,\"&lt;br/&gt;\"); document.write(\"language: \"+navigator.language,\"&lt;br/&gt;\"); document.write(\"product: \"+navigator.product,\"&lt;br/&gt;\"); document.write(\"platform: \"+navigator.platform,\"&lt;br/&gt;\"); document.write(\"userAgent: \"+navigator.userAgent,\"&lt;br/&gt;\"); 총정리 실습1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;h1&gt;운영체제 및 스크린 정보&lt;/h1&gt; &lt;p id=\"info_wrap\"&gt;&lt;/p&gt; &lt;!-- 아래 버튼을 누를 때 마다 info1 함수의 중괄호 사이의 자바스크립트 실행문 코드가 실행됩니다. --&gt; &lt;button onclick=\"info1();\"&gt;운영체제 정보&lt;/button&gt; &lt;br /&gt; &lt;!-- 아래 버튼을 누를 때 마다 info2 함수의 중괄호 사이의 자바스크립트 실행문 코드가 실행됩니다. --&gt; &lt;button onclick=\"info2();\"&gt;스크린 정보&lt;/button&gt; &lt;br /&gt; &lt;script type=\"text/javascript\"&gt; /*① [운영 체제 정보]버튼을 누를 때마다 실행되는 함수입니다*/ function info1(){ /* 사용자 브라우저 운영체제 및 종합 정보를 반환하고, 모두 소문자로 바꿉니다.*/ const os=navigator.userAgent.toLowerCase(); // 요소값 중 id값이 \"info_wrap\"인 요소를 가져옵니다. const info_wrap=document.getElementById(\"info_wrap\"); /* navigator 객체를 이용해 반환받은 정보에 다음과 같은 정보가 포함되어 있으면 운영체제 명을 지정한 요소 사이에 텍스트로 출력합니다*/ if(os.indexOf(\"windows\")&gt;=0){ info_wrap.innerHTML=\"윈도우\"; }else if(os.indexOf(\"macintosh\")&gt;=0){ info_wrap.innerHTML=\"맥킨토시\"; }else if(os.indexOf(\"iphone\")&gt;=0){ info_wrap.innerHTML=\"아이폰\"; }else if(os.indexOf(\"android\")&gt;=0){ info_wrap.innerHTML=\"안드로이드\"; } //3초 후에 운영체제 정보를 지웁니다. setTimeout(\"info_wrap.innerHTML=''\",3000); } /*② [스크린 정보]버튼을 누를 때마다 실행되는 함수입니다*/ function info2(){ //사용자 스크린 너비와 높이값을 가져와 저장합니다. const sc_w=screen.width; const sc_h=screen.height; // 요소 중 id가 \"info_wrap\"인 요소 객체를 가져옵니다. const info_wrap=document.getElementById(\"info_wrap\"); // 스크린 너비와 높이값을 텍스트로 출력합니다. info_wrap.innerHTML=sc_w+\"X\"+sc_h; //3초 후에 스크린 정보를 지웁니다. setTimeout(\"info_wrap.innerHTml=''\",3000); } &lt;/script&gt;","link":"/2020/03/04/BOM%20%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%20%EA%B0%9D%EC%B2%B4%20%EB%AA%A8%EB%8D%B8/"},{"title":"DOM (문서 객체 모델)","text":"HTML 문서의 구조를 가리켜 문서 객체 모델 (DOM:Document Object Model)이라고 합니다. DOM을 배우는 주된 목적은 자바스크립트를 사용하여 문서 객체를 선택하고속성 또는 스타일(css)을 적용하기 위해서 입니다. 선택자 구분 종류 설명 직접 선택자 document.getElementByid 아이디를 이용해 요소를 선택해 옵니다. document.getElementsByTagName 요소의 이름을 이용해 요소를 선택해 옵니다. document.formName.inputName 폼 요소의 name속성을 이용해 요소를 선택합니다. 인접 관계선택자 parentNode 선택한 요소의 부모 요소를 선택해 옵니다. childNodes 선택한 요소의 모든 자식요소를 선택해 옵니다배열 객체로 저장됩니다. children 선택한 요소의 자식요소인 태그만 선택해 옵니다.배열 객체로 저장됩니다. firstChild 선택한 요소의 첫 번째 자식 요소만 선택해 옵니다. previousSibling 선택한 요소의 이전에 오는 형제 요소만 선택해 옵니다. nextSibling 선택한 요소의 다음에 오는 형제 요소만 선택해 옵니다. 123456789101112131415//h1 태그를 불러와 style속성 color \"green\" 줍니다. document.getElementsByTagName(\"h1\")[0].style.color=\"green\"; // title id속성을 가지고 있는 요소를 불러와 red로 적용합니다. document.getElementById(\"title\").style.color=\"red\"; //id 값이 food_1인 요소의 하위 li 요소중 2번째 요소를 불러와 red로 적용합니다. var myList=document.getElementById(\"food_1\").getElementsByTagName(\"li\")[1]; myList.style.backgroundColor=\"red\"; /*id 값이 wrap인 요소의 첫번째 요소가 선택 되야하지만 ie를 제외한 브라우저에서는 요소가 아닌 공백 문자가 선택되어 표시되지 않습니다. */ document.getElementById(\"wrap\").firstChild.style.color=\"red\"; var p=document.getElementsByTagName(\"p\")[1]; // 공백 선택 p.nextSibling.style.backgroundColor=\"yellow\"; // 공백 선택 파이어폭스,크롬,사파리 등의 브라우저들은 HTML코드에 공백이 있거나줄바꿈이 있으면 그것을 한칸의 공백문자로 인식합니다.하지만 IE 8 이하에서는 정상적으로 공백이나 줄바꿈이 있어도 문자로 인식하지 않습니다. CSS 적용법자바스크립트에서 css 속성을 작성할 때 주의해야 할 점은자바스크립트가 -(하이픈) 문자를 산술 연산자로 인식한다는 것입니다. 따라서 HTML 에서 CSS사용 시 자바스크립트에서 CSS 사용시 background-color backgroundColor font-size fontSize Node 타입노드타입(nodeType)을 이용하면 인접 관계 선택자의 호환성 문제를 해결할 수 있습니다.HTML 노드에는 HTML태그를 연결하는 요소(Element)노드와텍스트를 연결하는 텍스트(Text)노드,HTML태그의 속성을 연결해 주는 속성(Attribute)노드가 있습니다. 선택자로 선택한 요소가 어떤 노드인가에 따라 노드 타입 값이 다음과 같이 표기 됩니다. 종류 타입 값 요소(Element) 노드 1 속성(Attribute) 노드 2 텍스트(Text) 노드 3 예시12345&lt;a href=\"http://w3.org\" id=\"m\"&gt;W3C&lt;/a&gt;; document.getElementByid(\"m\").nodeType; // 1 \"&lt;a&gt;\" document.getElementByid(\"m\").firstChild.nodeType; // 3 \"W3C\" document.getElementByid(\"m\").getAttributNode(\"href\").nodeType; // 2 \"href\" 비표준 인접 관계 선택자 해결법123456789document.getElementById(\"wrap\").children[0].style.color=\"red\"; var p=document.getElementsByTagName(\"p\")[1]; var nextObj=p.nextSibling; while(nextObj.nodeType !=1){ //다음 요소 태그를 찾을때까지 반복합니다. nextObj=nextObj.nextSibling; } nextObj.style.backgroundColor=\"yellow\"; getAttributegetAttribute () 메소드는 지정된 이름을 가진 속성 값을 요소의 값으로 반한합니다. 기본형 element.getAttribute(attributename) 1.1 .getAttribute.getAttribute(“속성”);요소의 지정한 속성값을 불러옵니다. var x = document.getElementsByTagName(“H1”)[0].getAttribute(“class”); 1.2 .setAttribute.setAttribute(“속성”,”새 값”);setAttribute () 메소드는 지정된 속성을 요소에 추가하고 지정된 값을 제공합니다.추가하려는 속성이 이미 존재한다면, 지정된 값만 추가/변경 됩니다.IE 8.0 이전 버젼에서 작동하지 않을 수 있습니다. 이 메소드를 사용하여 값에 스타일 속성을 요소에 추가 할 수 있지만 인라인 스타일링 대신 스타일 오브젝트의 속성을 사용하는 것이 좋습니다. 이는 스타일에 지정된 다른 CSS 속성을 덮어 쓰지 않기 때문입니다. Bad: element.setAttribute(“style”, “background-color: red;”); Good: element.style.backgroundColor = “red”; 1.3 .removeAttributeremoveAttribute () 메소드는 요소에서 지정된 속성을 제거합니다. removeAttributNode() 메소드와 다른점은removeAttributeNode() 메소드는 지정된 Attr 오브젝트를 제거하고 이 메소드는 지정된 이름의 속성을 제거합니다.둘의 결과는 다르지 않지만,removeAttribute() 메소드는 반환 값을 갖지 않는 반면removeAttributeNode() 메소드는 제거 된 속성을 Attr 오브젝트로 반환합니다. document.getElementById(“myAnchor”).removeAttribute(“href”); 1.4 .hasAtrributehasAttribute () 메소드는 지정된 속성이 존재하면 true를, 그렇지 않으면 false를 리턴합니다.IE 9.0 이전 버젼에서 작동하지 않을 수 있습니다. var x = document.getElementById(“myBtn”).hasAttribute(“onclick”); innerHTMLinnerHTML은 요소(element)내에 포함 된 HTML 또는 XML 마크업을 가져오거나 설정합니다. 주의: &lt; div&gt;, &lt; span&gt; 노드가 (&amp;), (&lt;), (&gt;) 문자를 포함하는 텍스트 노드를 자식으로 가지고 있다면,innerHTML은 이러한 문자들을 각각 “&amp;amp ;”, “&amp;lt ;” ,”&amp;gt ;”로 반환합니다.Node.textContent를 사용하여 이러한 텍스트 노드 내용의 원본을 복사할 수 있습니다. 종류 설명 element.innerHTML 선택한 요소의 모든 하위 요소를 문자 데이터로 반환합니다. element.innerHTML= text; 선택한 요소의 전체 하위 요소를 새 요소로 변경 또는 생성합니다. 경고: 프로젝트가 보안 점검을 거치게 되는 프로젝트인 경우,innerHTML 을 사용하면 코드가 거부 될 가능성이 높습니다.예를 들어, 브라우저 확장에서 innerHTML을 사용하고addons.mozilla.org에 확장을 제출하면 자동 검토 프로세스를 통과하지 못합니다. 이벤트여기서는 이벤트를 적용시키는 방법과 몇 가지 종류만 다루고자세한 내용은 뒤에서 다룹니다. 이벤트 설명 onclick 요소를 마우스 클릭했을 때 이벤트가 발생 onmouseover 요소를 마우스 오버 했을 때 이벤트 발생. onmounout 요소에 마우스가 벗어났을 때 이벤트 발생. submit 폼에 전송이 일어났을 때 이벤트 발생. 기본형 요소선택.이벤트종류=function(){ }예시123document.getElementByid(\"btn1\").onclick=function(){ alert(\"welcome\") } form 요소 선택자유저가 입력한 값이 유효한 값인지 검사하기 위해서는폼에 입력 요소를 선택하고 속성을 제어할 수 있어야 합니다.아래는 폼 요소를 선택할 때 사용하는 몇 가지 방식입니다. 구분 종류 설명 입력 요소 선택자 document.getElementByid(“아이디 명) 폼 요소를 아이디로 선택합니다. document.폼이름.입력 요소 이름 폼 요소를 이름으로 선택합니다. select option 선택자 document.폼이름.입력 요소 이름.option[ index] &lt; select&gt;에&lt; option&gt;을 선택합니다. var i= document.폼이름.입력요소 이름.selectedIndex; document.폼 이름.입력요소 이름.option[ i]; &lt; select&gt;에 선택된 &lt; option&gt;을 선택합니다. 폼 요소 속성 종류 구분 속성 설명 전체 value 입력 요소의 value 속성을 변경하거나, 값을 가져옵니다. disabled 입력 요소의 disabled 속성을 변경하거나, 현재 상태의 값을 가져옵니다. defaultValue 입력 요소 초기에 입력된 value 값을 가져옵니다. 선택박스 selected &lt; select&gt;태그에 &lt; option&gt; 선택된 상태 값을 가져옵니다. 선택되있다면true 아니라면 false 체크 박스 라디오 버튼 checked 체크박스 또는 라디오 버튼태그 체크 상태 값을 반환하거나 체크 여부를 제어 합니다. 체크 되있으면 true 해제되 있다면 false","link":"/2020/03/08/DOM%20%EB%AC%B8%EC%84%9C%20%EA%B0%9D%EC%B2%B4%20%EB%AA%A8%EB%8D%B8/"},{"title":"Class 오브젝트 -ECMAScript","text":"Class(클래스)를 완전하게 이해하려면 객체지항 프로그래밍(OOP:Object Oriented Programming)에 대한 이해가 필요합니다. OOP만 다루는 책이 있을 정도로 범위가 넓고 깊으므로OOP는 나중에 자세히 다루고 ES6기준으로 살펴봅니다. Class 오브젝트 Class 선언문 Class 표현식 Class 특징 strict 모드에서 실행 클래스에 메서드 작성 방법 prototype에 프로퍼티 연결 prototype에 프로퍼티 추가 constructor constructor 반환 값 변경 getter, setter 상속 extends 키워드 super 키워드 메서드 오버라이딩 빌트인 오브젝트 상속 Object에서 super 사용 static 키워드 Class 호이스팅 computed name this 제너레이터 new.target name 프로퍼티 오브젝트 상속 Class 선언문 Class name {}Class name extends super_name {} 엔진이 function 키워드를 만나면 Function 오브젝트를 생성하듯이class 키워드를 만나면 Class 오브젝트를 생성합니다.Class 오브젝트는 Function 오브젝트, String 오브젝트와 같이 하나의 오트젝트 타입입니다. name에 클래스 이름을 작성합니다.name 다음의 extends는 키워드로 super_name(슈퍼 클래스)를 상속받을 때 사용합니다. 이 형태를 클래스 선언문 이라고 합니다. class는 클래스를 선언하는 키워드이고엔진이 class 키워드로 생성한 오브젝트는 Class 오브젝트 입니다.문맥에 따라 Class 오브젝트를 class라고 말하기도 합니다. 123456789class Member { getName() { return \"이름\"; } }; 1. let obj = new Member(); 2. console.log(obj.getName()); // 이름 class 키워드를 작성하고 이어서 클래스 이름을 작성합니다. 그리고 블록{}을 작성하고 블록에 클래스 코드를 작성합니다.엔진이 class 키워드를 만나면 클래스(Class) 오브젝트를 생성합니다. new 연산자로 Member()를 호출하면 인스턴스를 생성하여 반환합니다. function name(){}는 new 연산자로 인스턴스를 생성하지 않고name()형태로 호출할 수 있지만,클래스는 new 연산자로 인스턴스 생성없이 name()형태로 호출할 수 없으며TypeError가 발생합니다. obj는 인스턴스이고 getName()은 class Member{}안에 작성한 메서드 입니다.이와 같이 new 연산자로 생성한 인스턴스를 사용하여 클래스에 작성한 메서드를 호출할 수 있습니다. 실행 결과 “이름”이 출력됩니다. 참고 new 연산자로 인스턴스를 생성하는 함수는 함수 이름의 첫 문자를 대문자로 작성합니다. 클래스 또한 new 연산자로 인스턴스를 생성하므로 클래스 이름의 첫 문자를 대문자로 사용합니다. 이는 스펙에 정의된 것은 아니며 자바스크립트 개발자들 사이의 관례입니다. 개발자가 코드의 대문자를 보고 인스턴스를 생성한다는 것을 알 수 있으므로 지키는 것이 좋습니다. 빌트인 Number 오브젝트, String 오브젝트도 이와 같은 맥락입니다. 같은 클래스를 두 번 선언하려고 시도할 때클래스 선언문으로 같은 클래스를 두 번 선언하면 오류가 발생합니다. class Foo {};class Foo {}; // Uncaught SyntaxError: Identifier ‘Foo’ has already been declared 이전에 표현식으로 정의한 경우에도 오류가 발생합니다. var Foo = class {};class Foo {}; // Uncaught TypeError: Identifier ‘Foo’ has already been declared Class 표현식 클래스 표현식으로 클래스를 선언합니다. let name = class {}let name = class inner_name {}let name = class extends super_name {}let name = class inner_name extends super_name {} 할당 연산자 (=) 왼쪽에 클래스 이름을 작성하고 오른쪽에 class 키워드를 작성하고 블록{}안에 클래스 코드를 작성합니다. 이를 클래스 표현식이라고 합니다. Class 표현식은 이름을 가질 수도 있고, 갖지 않을 수도 있습니다. 이름을 가진 class 표현식의 이름은 클래스의 body에 대해 local scope에 한해 유효합니다. 4번째 구문 class 와 extends 키워드 사이의 inner_name은 클래스 안에서 자신을 호출할 때 사용합니다. function 키워드 함수에서도 inner_name을 작성할 수 있지만 사용하지 않듯 클래스도 사용하지 않습니다. 1234567let Member = class { getName() { return \"이름\"; } }; let obj = new Member(); console.log(obj.getName()); 엔진이 클래스 키워드를 만나면 클래스 오브젝트를 생성하여 Member 변수에 할당합니다. 클래스 특징 Class는 사실 함수입니다. 함수를 함수 표현식과 함수 선언으로 정의할 수 있듯이 class 문법도 class 표현식과 class 선언 두 가지 방법을 제공합니다. strict 모드에서 실행 “use static”을 선언하지 않아도 클래스의 코드는 static 모드에서 실행됩니다. 클래스에 메서드 작성 방법 1234567891011class Member{ 1. setName(name) { this.name = name; } 2. getName() { return this.name; } }; 4. Member.prototype.getTitle = function(){}; 3. console.log(typeof Member); // function setName(){ } 과 같이 function 키워드와 콜론(:)을 작성하지 않고 메서드 이름만 작성합니다. setName()과 getName() 메서드 사이에 콤마를 작성하지 않습니다. 클래스의 typeof는 function 입니다. 이는 class가 function 구조라는 것을 의미합니다. function name(){ }은 글로벌 오브젝트(window Object)에 설정되지만class name(){ }은 글로벌 오브젝트에 설정되지 않습니다.따라서 window.Member로 클래스에 접근하면 undefined가 반환됩니다.Class 오브젝트의 프로퍼티는 for()문 등으로 열거할 수 없습니다. prototype에 프로퍼티 연결 12345class Member{ setName(name) { this.name = name; } }; prototype에 메서드를 연결하여 prototype.setName과 같이 작성하지 않고setName을 작성합니다. 자바스크립트는 기본적으로 prototype에 메서드를 연결하는 구조이므로 클래스 안에 작성된 메서드를 엔진이 자동으로 prototype에 연결합니다.즉. 엔진이 Member.prototype.setName 형태로 연결해줍니다. 이는 중요한 의미를 갖습니다. 자바스크립트의 기본 아키텍처(구성 방식 혹은 컴퓨터 소프트웨어의 호환성)를 유지하면서 객체지향 언어의 특징을 반영하려는 접근입니다. prototype에 프로퍼티 추가 Member.prototype.getTitle = function( ){ }; 클래스 밖에서 Member 클래스에 메서드를 추가하려면 위와 같이Member.prototype에 메서드를 연결하여 작성합니다.Member 클래스를 선언할 때는 클래스 블록{}안에 작성하겠지만,인스턴스를 생성한 후 상황에 따라 추가할 때 이 형태로 작성합니다. 참고이렇게 메서드를 추가하면 이미 생성된 인스턴스에서 추가한 메서드를 공유할 수 있도록 엔진이 처리하게 되므로 부하 혹은 자원낭비가 됩니다.좋은 사용 예시로는 사용자의 행동이나 서버 데이터에 따라 메서드를 따로 추가할 수 있는 점이 있습니다.(역동성이 높다.) constructor constructor 메소드는 class 인스턴스를 생성하고 생성된 인스턴스를 초기화하는 역활을 합니다. “constructor” 라는 이름을 가진 메소드는 클래스 안에 한 개만 존재할 수 있습니다. 만약 클래스에 여러 개의 constructor 메소드가 존재하면 SyntaxError 가 발생할 것입니다. constructor는 부모 클래스의 constructor 를 호출하기 위해 super 키워드를 사용할 수 있습니다. 참고클래스에 constructor를 작성하지 않으면 prototype의 constructor가 호출됩니다.이를 디폴트 constructor라고 하고 constructor가 없으면 인스턴스를 생성할 수 없습니다.ES5 에서 클래스 오브젝트를 실행하면 엔진이 디폴트 constructor를 호출해서 이를 활용할 수 없었습니다.ES6 에서는 개발자가 constructor를 정의할 수 있어서 Class 오브젝트 뿐 아니라Proxy 오브젝트, Reflect 오브젝트에서 활용할 수 있습니다. 12345678910111. class Member { constructor(name){ this.name = name; } getName() { return this.name; } } 2. let memberObj = new Member(\"스포츠\"); 3. console.log(memberObj.getName()); // 스포츠 클래스 안에 constructor를 작성했으며 constructor 안에 생성한 인스턴스에 초기값을 설정하는 코드를 작성했습니다.constructor 안의 this는 생성하는 인스턴스를 참조합니다. new Member(“스포츠”)를 실행하면 Member 클래스에 작성한 constructor가 자동으로 호출되며 파라미터 값으로 “스포츠”를 넘겨 줍니다. new 연산자는 constructor를 호출하면서 파라미터를 넘겨주는 역활 호출된 constructor가 인스턴스를 생성하여 반환하면 new 연산자가 받아 new를 실행한 곳으로 반환합니다. 클래스 와 인스턴스 생성 과정 이해를 위한 개념적인 순서1. new Member(&quot;스포츠&quot;)를 실행합니다. 2. new 연산자가 constructor를 호출하면서 파라미터 값을 넘겨줍니다. 3. constructor의 블록 코드를 실행하기 전에 빈 Object 오브젝트를생성합니다. 4. 이 것이 인스턴스입니다. 인스턴스가 생성되면 빈 오브젝트를 채웁니다. 5. 인스턴스 구성에 필요한 프로퍼티를 Object 오브젝트에 설정합니다. 6. constructor 블록에 있는 코드를 실행합니다. 7. 인스턴스를 먼저 생성하므로 constructor에서 this로 인스턴스를 참조할수 있습니다. 8. 생성된 인스턴스를 반환합니다. console.log(memberObj.getName());를 호출하면 다음 코드가 실행됩니다. getName() { return this.name;} constructor에서 this에 “스포츠”를 설정했으므로 “스포츠”가 반환됩니다. 아래는 생성된 memberObj 인스턴스 구조입니다. constructor에서 파라미터로 받은 “스포츠”를 this.name에 할당했으며,이때 this가 생성하는 인스턴스를 참조하므로 인스턴스 프로퍼티로 설정됩니다. __proto__는 인스턴스를 생성하면 엔진이 자동으로 첨부합니다. __proto__에 Member.prototype에 연결된 프로퍼티를 첨부하므로 getName도 첨부됩니다. __proto__에 Object 오브젝트의 prototype에 연결된 프로퍼티가 첨부됩니다. constructor constructor는 일반적으로 return 문을 작성하지 않으며, 생성한 인스턴스를 반환합니다.return을 사용하면 인스턴스 이외의 값을 반환할 수 있습니다. 12345678910class Member { constructor(){ return 1; } getName(){ return \"이름\"; } }; let memberObj = new Member(); console.log(memberObj.getName()); constructor(){ }안에 return 1;을 작성하였습니다.일반적으로 숫자 값을 반환하지 않습니다, 엔진 처리 방법 예시를 위해 작성되었습니다.constructor에서 Number 또는 String 값을 반환하면 이를 무시하고 생성한 인스턴스를 반환합니다. console.log(memberObj.getName();)을 호출하면 constructor에서 1을 반환하여memberObj에 1이 설정됩니다. 이후에 getName()을 호출하면 인스턴스 1에 getName()이 존재하지 않으므로 에러가 발생합니다. 하지만 Member 인스턴스를 반환하므로 getName()이 호출됩니다. 1234567891011121314class Member { constructor(){ return {name: \"홍길동\"}; } getName(){ return \"이름\"; } } let memberObj = new Member(); 1. console.log(memberObj.name); 2. console.log(memberObj.getName); // 홍길동 // undefined constructor에서 Object오브젝트를 return하면 이를 반환합니다.즉, {name: “홍길동”}이 반환됩니다. memberObj에 반환된 {name: “홍길동”}이 설정되어 있으므로 memberObj.name 값이 홍길동 으로 출력됩니다. 클래스에 getName 메서드를 작성했지만, 인스턴스를 반환하지 않고 {name: “홍길동”}을 반환하므로MemberObj에 getName이 존재하지 않습니다. undefined가 출력됩니다. getter, setter 클래스에도 getter와 setter를 선언할 수 있습니다.메서드 이름 앞에 “get”을 작성하면 getter, “set”을 작성하면 setter가 됩니다. getter12345678class Member { get getName() { return \"이름\"; } }; let memberObj = new Member(); console.log(memberObj.getName); // 이름 get getName()과 같이 메서드 이름 앞에 get을 작성하여 getter로 선언합니다. getName이 getter이므로 메서드로 호출됩니다. setter12345678910111213class Member { set setName(name) { this.name = name; } get getName() { return this.name; } }; let memberObj = new Member(); memberObj.setName = \"이름\"; console.log(memberObj.getName); // 이름 memberObj.setName = “이름”과 같이 setter로 선언된 메서드 이름에 값을 할당하면setName이 메서드로 호출됩니다. 이때 할당하는 값인 “이름”을 파라미터 값으로 넘겨줍니다. 상속 객체지향 프로그래밍에서 상속은 주요한 기능 중 하나입니다.클래스를 상속받으면 상속받은 클래스의 메서드와 프로퍼티를 사용할 수 있습니다. 참고상속해 주는 클래스를 일반적으로 부모 클래스라고 부릅니다만앞으로는 “슈퍼 클래스”라고 표기해줍시다.슈퍼 클래스라고 표기하는 이유는 ES6에서 super키워드가 있으며슈퍼 클래스를 지칭하므로 직관적이기 때문입니다.상속받는 클래스도 일반적으로 자식 클래스라고 부릅니다만,슈퍼 클래스와 운을 맞추기 위해 “서브 클레스”로 표기해줍시다. 자바스크립트 (객채지향 프로그래밍)의 상속 형태는 상속이 아니다? 일반적으로 상속이라고 하면 부모의 재산을 자식에게 물려주면자식이 부모의 능력을 고스란히 물려받습니다.자바스크립트에서는 객체도 생성자도 모두 프로토타입에 접근할 수 있고심지어 변경까지할 수 있습니다.이는 상속받을 것들을 자기 마음대로 선택,변경할 수 있게 되고다른 언어의 상속과는 다른 형태를 갖습니다.상속이라고 부르지만, 프로토타입의 (자원)공유로 이해하는 것이 적절해 보입니다. ES5에서의 상속 구현 형태 ES5 상속 형태12345678910111213141516171819202122232425261. function Sports(member){ 2. this.member = member; }; 3. Sports.prototype.setItem = function(item){ this.item = item; }; 4. function Soccer(member){ Sports.call(this, member); }; 5. Soccer.prototype = Object.create(Sports.prototype, { setGround: { value: function(ground){ this.ground = ground; } } }); 6. Soccer.prototype.constructor = Soccer; 7. var obj = new Soccer(11); 8. obj.setItem(\"축구\"); obj.setGround(\"상암\"); 9. console.log(obj.member); // 11 console.log(obj.item); // 축구 console.log(obj.ground); // 상암 Sports 첫 문자를 대문자로 작성한 것은 new 연산자로 인스턴스를 생성하려는 의도입니다. new Sports()를 실행하면 Sports()가 호출되고, 다시 디폴트 constructor를 호출합니다. 그래서 Sports()를 생성자(constructor)함수라고 부릅니다. this.member에서 this가 생성하는 인스턴스를 참조하므로 member는 인스턴스 프로퍼티가 됩니다. Sports(생성자 함수)함수에서 this.member = member 형태가 인스턴스에 초기값으로 설정됩니다. 이렇게 설정된 값은 생성된 모든 인스턴스에서 공유하지 않고 인스턴스마다 값을 각각 유지합니다. 이것이 인스턴스를 만드는 목적 중의 하나입니다. 생성자 함수가 있으면 Sports.prototype.setItem과 같이 prototype에 메서드를 연결한 코드가 작성되어 있습니다. 이를 작성하지 않으면 생성자 함수가 아닌 일반 함수 입니다. 이 형태가 ES5에서 인스턴스를 구현하는 기본 형태입니다. Soccer()가 호출되면 Sports()를 호출합니다. Soccer의 첫 문자가 대문자이므로 인스턴스를 사용한다는 것을 알 수 있습니다. 그런데 new Sports()가 아닌 Sports.call()형태로 함수를 호출한 것은, 바로 다음 코드에서 Sports.prototype을 사용하여 인스턴스를 생성하므로 인스턴스에 초기값만 성정하면 되기 때문입니다. Object.create()의 두 번째 파라미터 setGround를 첫 번째 파라미터인 Soccer.prototype에 첨부합니다. 그리고 Sports.prototype에 연결된 메서드를 Soccer.prototype.__proto__에 첨부합니다.이렇게 연결된 후에 new Soccer()로 인스턴스를 생성하면 Soccer.prototype과 Sports.prototype에 연결된 메서드를 인스턴스 메서드로 호출할 수 있습니다.ES5에서는 이와 같은 방법으로 상속을 구현합니다. Soccer.prototype에 constructor가 연결되어 있는데, 앞 코드에서Soccer.prototype에 프로퍼티를 연결하므로 constructor가 지워집니다.Soccer를 설정하지 않아도 인스턴스가 생성되지만, constructor에서 Soccer전체를 참조하는 것이 정상입니다. new 연산자로 Soccer() 생성자 함수를 호출하여 인스턴스를 생성합니다.Sports.prototype에 연결된 메서드는 인스턴스에 포함되지만, Sports() 생성자 함수는 포함되지 않으므로 Sports.call(this.member); 코드를 수행하여 인스턴스에 초기값을 설정합니다. this는 생성한 인스턴스를 참조하게 됩니다. setItem()은 상속받은 Sports.prototype에 연결된 메서드 입니다.상속을 받으면 인스턴스에서 직접 상속받은 메서드를 호출할 수 있습니다. 생성자 함수를 모두 호출하여 인스턴스에 초기값을 설정했으므로 인스턴스 프로퍼티로 프로퍼티 값을 구할 수 있습니다.ES5에서는 이와 같이 prototype에 연결해야 하며 직관적이지 않은 점도 있습니다. extends 키워드 ES6에서는 extends 키워드로 상속을 구현합니다. class subClass extends superClass { } subClass상속 받는 자식 클래스(서브 클래스). superClass상속 해주는 부모 클래스(슈퍼 클래스). new subClass()로 인스턴스를 생성하면 인스턴스에서 subClass 클래스와 super 클래스의 메서드를 호출할 수 있습니다. extends ES6123456789101112131415161. class Sports { constructor(member){ this.member = member; } getMember(){ return this.member; } }; 2. class Soccer extends Sports { setGround(ground){ this.ground = ground; } }; 3. let obj = new Soccer(11); 4. console.log(obj.getMember()); // 11 Sports 클래스를 상속받으므로 Sports 클래스는 슈퍼 클래스입니다.new Soccer()로 인스턴스를 생성하면 constructor가 호출되며,this가 생성하는 인스턴스를 참조하므로 파라미터로 받은 값을 인스턴스의 member 프로퍼티에 설정할 수 있습니다. extends 키워드 기준으로 왼쪽의 Soccer 클래스가 서브클래스오른쪽 Sports 클래스가 슈퍼클래스입니다. 즉, Soccer 클래스에서 Sports 클래스를 상속받습니다. this.ground에서 this는 생성한 인스턴스를 참조합니다. 이 시점의 Soccer 클래스 구조입니다. Soccer.prototype에 setGround가 연결되어 있으며 Soccer.prototype.__proto__에 Sports.prototype에 연결되어 있는 getMember가 첨부되어 있습니다. Soccer.__proto__에 Sports.prototype에 연결된 프로퍼티도 첨부되어 있습니다. 이와 같이 extends 키워드는 서브클래스의 prototype에 __proto__를 만들고 여기에 슈퍼클래스의 prototype에 연결된 프로퍼티를 연결합니다.슈퍼클래스의 prototype에 연결된 메서드를 복사하는 것이 아니라 공유합니다.new Soccer()로 인스턴스를 생성할 때 Soccer.prototype에 연결된 프로퍼티를 사용하므로 서브클래스와 슈퍼클래스의 메서드가 인스턴스에 포함됩니다. new Soccer(11)을 실행하면 다음의 순서와 방법으로 실행합니다. Soccer 클래스의 constructor가 호출됩니다. Soccer 클래스에는 constructor를 작성하지 않았습니다. 슈퍼 클래스의 constructor가 호출되면서 11을 파라미터 값으로 넘겨줍니다. 슈퍼 클래스의 constructor에서 this는 현재의 인스턴스를 참조하므로 인스턴스의 member 프로퍼티에 파라미터로 받은 11을 설정한 후 돌아오게 되며, 생성한 인스턴스를 obj에 할당합니다. 다음은 obj의 인스턴스 구조입니다. 인스턴스를 생성하는 주체는 서브 클래스입니다. new Sports()가 아닌 new Soccer()로 인스턴스를 생성합니다. 슈퍼 클래스의 constructor에서 this.member에 설정한 값이 인스턴스 프로퍼티로 설정됩니다. __proto__에 서브 클래스의 prototype에 연결된 메서드가 첨부되었으며 __proto__에 슈퍼 클래스의 prototype에 연결된 메서드가 첨부됩니다. 메서드를 호출할 때 __proto__를 작성하지 않아도 되므로setGround()와 getMember()를 인스턴스에서 직접 호출할 수 있습니다. obj.getMember()를 호출하면 우선 obj.__proto__에서 메서드를 찾습니다. 존재하지 않으면 obj.__proto__.__proto__에서 찾습니다. 메서드가 존재하면 호출됩니다.이것이 자바스크립트의 상속 메커니즘 입니다. super 키워드 서브 클래스와 슈퍼 클래스에 같은 이름의 메서드가 존재하면 슈퍼 클래스의 메서드는 호출되지 않습니다.이때 super 키워드를 사용하여 슈퍼 클래스의 메서드(혹은 함수)를 호출할 수 있습니다. 서브 클래스 constructor에 super()를 작성하면 슈퍼 클래스의 constructor가 호출됩니다.super.name()과 같이 super 키워드에 이어서 호출하려는 메서드 이름을 작성합니다. 메서드 오버라이딩서브 클래스와 슈퍼 클래스에 같은 이름의 메서드가 있을 때 서브 클래스의 메서드가 호출 되는 것을메서드 오버라이딩(Overriding)이라고 합니다. 메서드 오버라이딩은 의도적인 접근 방식입니다. 서브 클래스와 슈퍼 클래스의 같은 이름의 메서드가 같은 목적을 가진 것을 나타내면서서브 클래스의 목적에 맞도록 보완할 때 사용합니다.(슈퍼 클래스의 메서드 기능을 사용하면서 서브 클래스에서 기능을 추가,변경할 때 사용합니다.) 슈퍼 클래스와 서브 클래스의 메서드 기능/목적이 다른 경우에는 같은 이름을 사용하지 않습니다. super-1123456789101112131415class Sports { setGround(ground){ this.ground = ground; } }; 1. class Soccer extends Sports { setGround(ground){ 2. super.setGround(); this.ground = ground; } }; 3. let obj = new Soccer(); obj.setGround(\"상암구장\"); console.log(obj.ground); // 상암구장 Sports 클래스는 슈퍼 클래스 입니다. 상속을 해주지만 단독으로 인스턴스를 생성할 수도 있습니다. Class Sports{}에는 그라운드(setground)가 필요합니다.Sports의 종목이 여러개라면 종목마다 그라운드(setGround)형태도 달라져야 할 수 있습니다.그런 의미에서 setGround()메서드는 의미 없어 보일 수 있습니다. 하지만 Sports 클래스를 상속받는 서브 클래스에서 setGround를 오버라이딩 하면 일관성 있게그라운드를 정의할 수 있습니다. 메서드 이름을 유지하면서 서브클래스 마다적합한 그라운드(setGround)를 설정해 주는 것입니다.이를 객체 지향에서 추상화(Abstraction)라고 합니다. Soccer 클래스에서 Sports 클래스를 상속받습니다. Sports 클래스에 setGround()가 있으며Soccer 클래스에도 있으므로 메서드가 오버라이딩 됩니다.new Soccer()로 인스턴스를 생성한 후 setGround()를 호출하게 되면 서브클래스(Soccer)의메서드가 호출됩니다. 이때 super.setGround()는 슈퍼클래스(Sports)의 setGround()를 호출합니다. super.setGround()를 호출하면서 파라미터 값은 정해주지 않았습니다.슈퍼클래스(Soccer)의 setGround()에서 this.ground에 undefined가 설정됩니다.super.setGround()를 실행한 후 돌아오면 바로 다음 줄의 this.ground에서 파라미터로 받은 값을 설정합니다. new Soccer()로 인스턴스를 생성하고 setGround()를 호출하면 인스턴스의 ground 프로퍼티에 파라미터 값이 설정됩니다. ground가 인스턴스 프로퍼티이므로 obj.ground로 값을 출력할 수 있습니다. super-212345678910111213141516class Sports { constructor(member){ this.member = member; console.log(this.member); } }; 2. class Soccer extends Sports { 3. constructor(member){ super(member); this.member = 456; console.log(this.member); } }; 1. let obj = new Soccer(123); // 123 // 456 new Soccer(123)을 실행하면 Soccer 클래스의 constructor가 호출됩니다. constructor 첫째 줄의 super(member)를 실행하면 슈퍼 클래스의 constructor를호출 하면서 파라미터로 받은 값을 넘겨줍니다. 슈퍼 클래스의 constructor를호출하려면 서브클래스 constructor의 첫째 줄에 super()를 작성해야 합니다. super() 앞에 변수를 선언하거나 변수에 값을 할당하는 코드는 작성해도 되지만,this 키워드는 super() 앞에 사용할 수 없습니다. super()로 인해 constructor가 호출되면 this로 인스턴스를 참조할 수 있습니다.따라서 파라미터로 받은 member 값을 인스턴스의 member 프로퍼티에 할당할 수 있습니다. 빌트인 오브젝트 상속 extends 키워드로 Array 오브젝트 등의 빌트인 오브젝트를 상속받을 수 있습니다.상속을 받지 않고 서브 클래스에서 빌트인 오브젝트의 메서드를 호출해도 되지만상속 받는 것과 차이가 있습니다. 서브 클래스에서 빌트인 오브젝트를 상속받으면빌트인 오브젝트의 메서드를 마치 서브 클래스에서 선언한 것처럼 사용할 수 있게 됩니다. builtin1234567891011121314151617182. class ExtendArray extends Array { constructor(){ super(); } getTotal(){ let total = 0; for (var value of this){ total += value; }; return total; } }; 1. let obj = new ExtendArray(); 3. obj.push(10, 20); 4. console.log(obj.getTotal()); // 30 클래스 ExtendArray 에 빌트인 오브젝트인 Array 오브젝트를 상속받았습니다.new 연산자로 인스턴스를 생성하면 인스턴스는 Array 오브젝트의 특징을 갖게됩니다.따라서 인스턴스에서 push()와 같은 Array 메서드를 직접 호출할 수 있습니다.“[].push()”형태가 아닌 “인스턴스.push()”형태로 호출할 수 있습니다.이 형태의 차이에 상속 받는 목적이 담겨있다고 할 수 있습니다. new ExtendArray()를 실행하면 아래에 작성한 constructor가 호출됩니다. constructor(){super();} super()가 슈퍼 클래스의 constructor를 호출하므로 Array 오브젝트 constructor가호출됩니다. obj 인스턴스에 push()메서드가 상속되어 있으므로 obj.push(10,20)형태로 호출할 수 있습니다.obj.push(10, 20) 과 [].push(10, 20)에서 obj 인스턴스가 Array 리터럴[]에 해당됩니다.따라서 obj 인스턴스에 10 과 20를 설정하는 것은 Array 인스턴스에 설정하는 것과 같습니다.이것이 빌트인 오브젝트를 상속받는 목적 중의 하나입니다. obj.getTotal()을 호출하면 for-of 문으로 [10, 20]을 합산하여 반환합니다.값을 합산해주는 빌트인 함수도 있지만 for(var value of this)문에서this를 다루기 위해 의도적으로 for-of 문을 사용했습니다.this가 obj 인스턴스를 참조합니다. obj 인스턴스는 [10, 20]값이 설정되어 있으며Array 오브젝트를 상속받은 상태 이므로 length 프로퍼티를 갖고있습니다.즉, 이터레이션을 수행할 수 있는 조건을 충족합니다. for(var value of [10, 20]){total += value;} return total 위 헝태가 되어 엘리먼트(10, 20)를 하나씩 읽어가면서 for-of 문을 반복합니다. Object에서 super 사용 두 개의 Object 오브젝트가 연결된 구조에서 super.name() 형태로 슈퍼 오브젝트의메서드를 호출할 수 있습니다. 123456789101112131415let Sports = { getTitle(){ console.log(\"Sports\"); } }; let Soccer = { getTitle(){ super.getTitle(); console.log(\"Soccer\"); } }; 1. Object.setPrototypeOf(Soccer, Sports); 2. Soccer.getTitle(); //Sports //Soccer Object.setPrototypeOf()을 실행하면 Soccer.__proto__에Sports 오브젝트의 프로퍼티가 첨부됩니다.Object 오브젝트가 대상이므로 생성자 함수가 없지만,__proto__에 프로퍼티가 첨부되는 것이 상속 구조(형태)입니다. Soccer.getTitle();이 호출되면, 첫째 줄에서 super.getTitle()을 호출합니다.상속을 하면 __proto__로 계층을 만들고,__proto__에 상속받을 오브젝트의 프로퍼티를 첨부하므로, super는 한 단계 아래의 __proto__를 참조하는 것과 같습니다. 현재 Soccer.__proto__에 Sports 오브젝트의 getTitle()이 첨부되어 있습니다.따라서 super.getTitle()을 호출하면, super가 Soccer.__proto__를 참조하므로Sports 오브젝트의 getTitle()이 호출됩니다. 이와 같이 Object.setPrototypeOf()으로 __proto__구조를 만들고 상속받을 오브젝트의 프로퍼티를 첨부하면, super키워드로 상속 계층 구조에 있는 메서드를 호출할 수 있습니다. static 키워드 클래스에 static(정적) 메서드를 정의합니다. static methodName() { … } prototype에 연결된 메서드는 인스턴스를 생성하여 호출 하지만,static 메서드는 인스턴스를 생성하지않고 클래스에 직접 연결하여 호출합니다. static 메서드는 prototype에 연결되지 않으므로 인스턴스에서 호출할 수 없습니다.클래스 이름을 지정하여 static 메서드를 호출해야 합니다. 중요 포인트엔진이 class 키워드를 만나면 클래스 안에 static 메서드 작성 여부를 체크합니다.static 메서드가 존재한다면 이를 Function 오브젝트로 생성합니다.(메서드를 호출하기 위해서는 메서드가 Function 오브젝트여야 하고,이렇게 생성함으로써 클래스 아래의 static메서드를 호출할 수 있게 합니다.) 자바스크립트 Function 오브젝트 생성 형태1234function(){ // Function 오브젝트입니다. function(){ // Function 오브젝트가 아닙니다. } } function 안에 function은 Function 오브젝트로 생성하지 않고,function이 호출되어 안에 있는 function으로 들어갔을 때Function 오브젝트를 생성합니다.따라서 function을 호출하지 않으면 안에 있는 function은아무것도 아닙니다. 그저 작성돼있는 함수 입니다.이 점이 static 키워드를 사용한 메서드와 차이점 입니다. 123456class Sports { static getGround() { return \"상암구장\"; } }; 1. console.log(Sports.getGround()); getGround(){} 앞에 static을 작성하여 static메서드로 선언했습니다. Sports는 클래스 이름이고 getGround()는 static메서드 입니다.이와 같이 앞에 클래스 이름을 작성하고 이어서 static메서드를 작성하여 호출합니다. Class 호이스팅 클래스는 호이스팅(Hoisting)이 되지 않습니다. 1234567891011121314151617// Class let result = Member; class Member { static getMember(){ return \"member\"; } }; console.log(Member.getMember()); // member console.log(result.getMember()); // TypeError // function과 비교 let result2 = Member2; function Member2() { return \"member2\"; }; console.log(Member2());// member2 console.log(result2());// member2 호이스팅 된다면 Member 클래스가 result 변수에 할당됩니다.호이스팅 되지않으면 Member를 인식하지 못합니다. Error 클래스는 호이스팅 되지않아 result에 할당할 Member를 인식하지 못합니다.result에 Member 값을 넣으려면 클래스 문이 완전히 끝난 뒤에 작성해야합니다. function은 호이스팅 되므로 result2에 Member2를 인식하여 할당할 수 있습니다. computed name 클래스의 메서드 이름을 조합(computed name)하여 작성할 수 있습니다. computed name12345678let type = \"Type\"; class Sports { static [\"get\" + type](kind){ return kind ? \"스포츠\" : \"음악\"; } } 1. console.log(Sports[\"get\" + type](1)); // 스포츠 console.log(Sports.getType(1)); // 스포츠 변수 type 에 문자열 값 “Type”을 할당해 줬습니다.static 메서드 []안에 문자열 “get” 과 클래스 밖에 작성된 type 변수 값을작성해줬습니다. static메서드의 이름이 getType이 됩니다.이와 같이 static 메서드 []안에 조합할 이름을 작성합니다. 문자열 “get”과 변수인 type을 조합하여 호출합니다.파라미터 값이 1 (true)이므로 호출된 getType()에서 “스포츠”를 반환합니다.물론 console.log(Sports.getType(1)); 형태로 호출할 수 도 있습니다. this static 메서드에서 this는 클래스 오브젝트를 참조합니다.constructor 안에서 this.constructor.name()형태로 static 메서드를 호출할 수 있습니다. this 예제1234567891011class Sports { static setGround(ground){ this.ground = ground; } static getGround(){ return this.ground; } }; Sports.setGround(\"상암구장\"); console.log(Sports.getGround()); // 상암구장 Sports.setGround(“상암구장”)를 실행하면 static메서드인 setGround()가 호출됩니다.this.ground에서 this가 Sports 클래스를 참조하므로 Sports 클래스에{ground: “상암구장”} 형태로 설정됩니다. Sports.getGround()를 실행하면 getGround() 정적 메서드가 호출됩니다.this.Ground에서 this가 Sports 클래스를 참조하므로 setGround()에서Sports 클래스에 설정한 ground 프로퍼티 값을 구할 수 있습니다. //상암구장 this 호출 예제12345678910class Sports{ constructor(){ 1. console.log(Sports.getGround()); 2. console.log(this.constructor.getGround()); } static getGround(){ return \"상암구장\"; } }; let obj = new Sports(); new Sports()를 실행하면 constructor가 호출됩니다.constructor 블록{}안에서 static메서드인 getGround를 호출하며,this.constructor 형태도 사용하고 있습니다. Sports 클래스에 static 메서드로 getGround()를 작성했으므로Sports.getGround() 형태로 호출할 수 있습니다.constructor 블록{} 아래에 getGround()가 작성되어 있습니다만이미 Function 오브젝트로 생성된 상태이므로 호출이 됩니다. constructor가 Sports 클래스를 참조하며 인스턴스의 __proto__에constructor가 첨부되어 있으므로 this.constructor.getGround() 형태로static메서드를 호출할 수 있습니다. 구조는 다음 사진과 같습니다. this.getGround()형태로는 호출할 수 없습니다. (//undefined)this가 new Sport()로 생성한 인스턴스를 참조하고,getGround는 static메서드 이므로 인스턴스에 존재하지 않기 때문입니다. 제너레이터 클래스 안에 제너레이터 함수를 작성할 수 있습니다.클래스 안에 작성한 제너레이터 함수는 prototype에 연결됩니다.따라서 static 메서드로 호출할 수 없고 인스턴스를 생성하여 호출해야 합니다. 1234567891011121314151617181920212223242526272829303132333435363738class Member{ *gen() { yield 10; yield 20; } }; let obj = new Member(); let genObj = obj.gen(); console.log(genObj.next()); console.log(genObj.next()); // Object {value: 10, done: false} // Object {value: 20, done: false}``` new Member()로 클래스 인스턴스를 생성 합니다. 변수 obj에 할당됩니다. genObj 변수에 obj.gen 메서드를 할당합니다. genObj.next()로 호출할 수 있게됩니다.* * *&lt;h2 id=\"new_target\"&gt;new.target&lt;/h2&gt;new.target은 메타(meta) 프로퍼티로 생성자 함수와 클래스에서 constructor를 참조합니다. new 연산자로 인스턴스를 생성하지 않으면 new.target 값은 undefined 입니다.```jslet sports = function(){ console.log(new.target); } sports(); new sports(); // undefined /* function() { console.log(new.target); } */ sports(); 와 같이 new 연산자를 사용하지 않고 호출하면 new.target값은 undefined 입니다. new sports();로 호출하면 new.target은 constructor를 참조합니다.sports 함수에 constructor를 작성하지 않았으므로 디폴트 constructor가 호출됩니다.디폴트 constructor = (function: Object() {native code})constructor가 sports 전체를 참조하므로 sports 함수의 코드가 출력됩니다. name 프로퍼티ES6는 클래스, 함수 오브젝트에 name 프로퍼티가 존재하며 이름이 설정됩니다. 12345678910111213141516class Sports { constructor(){ console.log(\"Sports:\", new.target.name); } }; class Soccer extends Sports { constructor(){ super(); console.log(\"Soccer:\", new.target.name); } }; let sportsObj = new Sports(); let soccerObj = new Soccer(); // Sports: Sports // Sports: Soccer // Soccer: Soccer new Sports()를 호출하면 Sports 클래스이므로 클래스 name 프로퍼티에 “Sports”가설정되어 있습니다. constructor에서 new.target은 constructor를 참조하므로Sports 클래스의 name 프로퍼티 값 “Sports”가 출력됩니다. new Soccer()를 호출하면 super()로 인해 Sports의 constructor가 호출됩니다.Sports의 constructor에서 new.target은 super()로 호출한 Soccer의constructor를 참조합니다. 따라서 new.target.name 값으로 Sports가 아닌 Soccer가 출력됩니다. Image 오브젝트 상속 DOM(Document Object Model)에서 제공하는 Image 인터페이스, Audio 인터페이스 등을 상속받을 수 있습니다.빌트인 Array 오브젝트를 상속받으면 Array 오브젝트 특징을 갖듯이상속받은 인터페이스 특징을 갖습니다. DOM의 Image 인터페이스는 웹 페이지에 png 파일과 같은 이미지 파일을 표현하기 위한 속성을 제공합니다.인터페이스는 객체지향 용어로 이 자체를 그대로 사용할 수 없고 오브젝트로 변환하여 사용해야 합니다.DOM은 오브젝트를 제공하지 않고 인터페이스를 제공하는데,이는 자바스크립트뿐만 아니라 Java등의 다른 언어에서도 사용하기 때문입니다. 각 언어에서 DOM인터페이스를 언어에 맞게 변환하여 사용합니다. 인터페이스를 오브젝트로 변환하려면 extends 키워드를 사용합니다. extends-image12345678910111213141516171819201. class ExtendsImage extends Image{ constructor() { super(); } 2. setProperty(image){ this.src = image.src; this.alt = image.alt; this.title = image.title; } }; let imageObj = new ExtendsImage(); let properties = { src: \"file/rainbow.png\", alt: \"나무와 집이 있고 그 위에 무지개가 있는 모습\", title: \"무지개\" }; imageObj.setProperty(properties); 3. document.querySelector(\"body\").appendChild(imageObj); Image 오브젝트를 extends 키워드로 상속받습니다.ExtendsImage 클래스는 Image 특성을 갖게됩니다.즉, &lt; img &gt; 엘리먼트의 속성을 직접 사용할 수 있습니다.또한 this로 엘리먼트 속성에 접근할 수 있습니다. 파라미터로 받은 &lt; img &gt; 속성 값을 this가 참조하는 imageObj 인스턴스에 설정합니다. &lt; body&gt; 엘리먼트에 자식 요소로 imageObj를 첨부합니다.body 엘리먼트에 imageObj 안에 있는 img 엘리먼트 속성도 첨부 횝니다. 웹페이지에 이미지가 표시되고 그 속성은 다음과 같습니다. &lt; img src = “file/rainbow.png”alt= “나무와 집이 있고 그 위에 무지개가 있는 모습”title= “무지개” &gt;","link":"/2020/04/01/Class%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"Destructuring -ECMAScript","text":"Destructuring 은 배열의 값 또는 객체의 속성을별개의 변수로 압축 해제 할 수있는 JavaScript 표현식입니다. 형태123456789101112131415161718192021let a, b, rest; [a, b] = [10, 20]; console.log(a); // 10 console.log(b); // 20 [a, b, ...rest] = [10, 20, 30, 40, 50]; console.log(a); // 10 console.log(b); // 20 console.log(rest); // [30, 40, 50] ({ a, b } = { a: 10, b: 20 }); console.log(a); // 10 console.log(b); // 20 // Stage 4(finished) proposal ({a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40}); console.log(a); // 10 console.log(b); // 20 console.log(rest); // {c: 30, d: 40} 변수에 배열의 엘리먼트를 할당한다는 표현보다배열의 엘리먼트를 변수에 할당한다는 표현이 더 정확합니다.배열의 엘리먼트 값을 변수에 할당하기 위해서는먼저, 배열의 엘리먼트를 분할하고 분할된 엘리먼트 값이 변수에 할당되기 때문입니다. Array 분할 할당123456789101112131415let one, two, three, four, five; const values = [1, 2, 3]; [one, two, three] = values; //== [1, 2, 3] console.log(\"A:\", one, two, three); // A: 1 2 3 [one, two] = values; //== [1, 2, 3] console.log(\"B:\", one, two);// B: 1 2 [one, two, three, four] = values; //== [1, 2, 3] console.log(\"C:\", one, two, three, four); // C: 1 2 3 undefined [one, two, [three, four]] = [1, 2, [73, 74]]; console.log(\"D:\", one, two, three, four); // D: 1 2 73 74 //배열차원이 같지 않으면 에러가 발생합니다. [0,1,[0,1]] = [0,1,[0,1]] 같은 차원 형태 spread 사용시1234567891011let one, two, three, four, other; [one, ...other] = [1, 2, 3, 4]; console.log(other); /* 0: 2 1: 3 2: 4 length: 3 */ // [2, 3, 4] 1 값은 one에 할당되고 할당되지 않은 [2, 3 ,4]는 other에 할당됩니다. Object 분할 할당123456781. let {one, two} = {one: 1, nine: 9}; console.log(one, two); // 1 undefined 2. let three, four; ({three, four} = {three: 3, four: 4}); console.log(three, four); // 3 4 오른쪽이 오브젝트이면 왼쪽도 오브젝트 여야 합니다. let {one,two} 형태는 변수 선언과 할당을 한번에 하는 형식입니다.오른쪽 nine이 왼쪽 오브젝트에 없으므로 값을 할당하지 않습니다.왼쪽 two 변수에 값을 할당하지 않았으므로 초기값인 undefined가 유지됩니다. 오브젝트 할당에서 사전에 선언된 변수를 사용하려면소괄호() 안에 할당 코드를 작성합니다. 파라미터 분활 할당호출하는 function 파라미터에 오브젝트를 작성하고호출받는 function 파라미터를 오브젝트 분할 할당 형태로 작성하면함수 블록에서 직접 프로퍼티 이름을 사용할 수 있습니다. 1234567//호출 받는 function function total( { one, plus: { two, five } } ) { console.log(one + two + five); // 8 }; //function 호출 total({one: 1, plus: {two: 2, five: 5}});","link":"/2020/03/20/Destructuring%20-ECMAScript/"},{"title":"ES6에 추가된 Operation -ECMAScript","text":"ES6에 추가된 다양한 형태의 오퍼레이션 과 for-of 문,ES7에 추가된 거듭제곱 연산자를 살펴봅니다. Operation 프로퍼티 이름조합 Default Value Default 파라미터 for-of 거듭 제곱 연산자 (**) 프로퍼티 이름조합 문자열과 변수를 조합하여 오브젝트의 프로퍼티 이름으로 사용하는 것을Computed property name(프로퍼티 이름 조합)이라고 합니다. 문자열 조합문자열을 조합하여 오브젝트의 프로퍼티 키로 사용할 수 있습니다. 1234let item = { [\"one\" + \"two\"]: 12 }; console.log(item.onetwo); // 12 조합하려는 이름을 대괄호[]안에 문자열로 작성한 형태입니다.“one”과 “two”를 조합한 onetwo가 프로퍼티 키가 됩니다.item.onetwo 형태로 프로퍼티 값을 구할 수 있습니다. 변수 값과 문자열 조합1234567891011let item = \"tennis\"; let sports = { [item]: 1, [item + \"Game\"]: \"윔블던\", [item + \"Method\"](){ return this[item]; } }; console.log(sports.tennis); // 1 console.log(sports.tennisGame); // 윔블던 console.log(sports.tennisMethod()); // 1 []안에 변수 이름을 작성하면 변수 값을 프로퍼티 키로 사용합니다.item 변수 값 “tennis”가 프로퍼티 키가 되고 1이 값이 됩니다.따라서 sports.tennis 형태로 값을 구할 수 있습니다. item 변수 값인 “tennis”와 문자열 “Game”을 조합하면“tennisGame”이 되며 이를 프로퍼티 키 값으로 사용하고 “윔블던”이 값이 됩니다.sport.tennisGame 형태로 값을 구할 수 있게 됩니다. [item + “Method”] (){[]안에 변수 이름과 문자열을 조합하고 여기에 함수를 나타내는 소괄호()를 넣어 함수 이름으로 사용한 형태입니다.소괄호()는 대괄호[]밖에 작성합니다.sports.tennisMethod() 형태로 호출할 수 있습니다. 디스트럭처링과 프로퍼티 이름 조합프로퍼티 이름을 조합하고 조합한 이름을 분할 할당하여 값을 넘겨줄 수 있습니다. 123let one = \"sports\"; let {[one]: value} = {sports: \"농구\"}; console.log(value); //농구 변수 이름 one을 []안에 작성하여 프로퍼티 키로 사용하고 그 값은 sports가 됩니다.{[one]: value}코드는 {sports: value}와 같습니다. {sports: value} = {sports: “농구”};value에 “농구”가 할당됩니다. Default Value 변수, 파라미터, 프로퍼티에 값이 할당되지 않을 때 사전에 정의한 값이 할당됩니다.이 값을 Default value라고 합니다. 일반적으로 사용되는 디폴트 값과는 차이가 있습니다.예를 들어 let 변수로 선언하고 할당은 하지 않은 경우디폴트 값으로 undefined가 설정됩니다. 여기서의 Default value는 변수를 선언하고 할당은 되지 않은 경우(=undefined 형태일 경우) 기본으로 할당될 값을 지정해 주는 형태 입니다. Default 파라미터123456function multiply(a, b) { return a * b; } multiply(5, 2); // 10 multiply(5); // NaN ! multiply(5) 함수 호출 형태는 매개 변수 b에게 값을 할당하지 않습니다그러므로 b는 Defalut value값 undefined 되어return a*b를 평가할 때 NaN이 반환됩니다. ES6에서 기본 매개변수라면, 함수 body 내 검사는 더 이상 필요치 않습니다. 이제, 간단히 함수 머리(head)에 b의 기본값으로 1을 둘 수 있습니다 default value1234567function multiply(a, b = 1) { return a*b; } multiply(5, 2); // 10 multiply(5); // 5 multiply(5, undefined); // 5 호출하는 함수에서 파라미터 값을 넘겨주지 않거나 undefined를 넘겨주면 디폴트 값이 적용됩니다. 파라미터 디스트럭처링12let getTotal = ([one, two] = [10, 20]) =&gt; one + two; console.log(getTotal()); // 30 함수 파라미터에 디스트럭처링과 디폴트 값을 작성한 형태입니다.getTotal()을 호출하면서 파라미터 값은 넘겨주지 않으므로호출 받는 함수의 디폴트값이 적용됩니다.디폴트 값 [10, 20]이 분할 할당되어 10이 one에 20이 two에 할당됩니다. 12let getValue = ({two: value} = {two: 20}) =&gt; value; console.log(getValue()); // 20 함수 파라미터에 디스트럭처링과 디폴트 값을 오브젝트로 작성한 형태입니다.디폴트 값 {two: 20}이 분할 할당되어 20이 value에 할당됩니다. 왼쪽에서 오른쪽으로 디폴트 값이 적용됩니다. 디폴트 값 적용 순서123let [one, two = one + 1, five = two + 3] = [1]; console.log(one, two, five); // 1 2 5 오른쪽의 []에서 1이 one에 할당됩니다. 이어서 two=one+1을 실행하고 할당됩니다.다음으로 five=two+3을 실행하고 할당합니다. for-of for-of 문은 이터러블 오브젝트를 반복하여 처리합니다.반복하는 자체는 for-in문과 차이가 없지만 대상과 방법에서 차이가 있습니다. for (variable of iterableObject) {코드} variable반복 할때 마다 서로 다른 속성값이 variable에 할당됩니다. Array 반복12345678let iterable = [10, 20, 30]; for (let value of iterable) { console.log(value); } // 10 // 20 // 30 블록 내부 변수를 변경하고 싶지 않은경우,let 대신 const를 사용할 수 있습니다,. const12345678let iterable = [10, 20, 30]; for (const value of iterable) { console.log(value); } // 10 // 20 // 30 String 반복String12345678let iterable = \"boo\"; for (let value of iterable) { console.log(value); } // \"b\" // \"o\" // \"o\" TypedArray 반복TypedArray1234567let iterable = new Uint8Array([0x00, 0xff]); for (let value of iterable) { console.log(value); } // 0 // 255 Map 반복Map123456789101112131415let iterable = new Map([[\"a\", 1], [\"b\", 2], [\"c\", 3]]); for (let entry of iterable) { console.log(entry); } // [a, 1] // [b, 2] // [c, 3] for (let [key, value] of iterable) { console.log(value); } // 1 // 2 // 3 Set 반복Set12345678let iterable = new Set([1, 1, 2, 2, 3, 3]); for (let value of iterable) { console.log(value); } // 1 // 2 // 3 DOM 컬렉션 반복NodeList 같은 DOM 컬렉션에 대해 반복 document.querySelectorAll()같은 DOM 메서드를 실행하여반환된 NodeList를 반복할 수 있습니다 주의: 이는 NodeList.prototype[Symbol.iterator]가구현된 플랫폼에서만 작동합니다. DOM-Symbol.iterator1234567891011121314&lt;ul&gt; &lt;li&gt;첫 번째&lt;/li&gt; &lt;li&gt;두 번째&lt;/li&gt; &lt;li&gt;세 번째&lt;/li&gt; &lt;/ul&gt; &lt;script&gt; let nodes = document.querySelectorAll(\"li\"); for (var node of nodes) { console.log(node.textContent); //첫 번째 //두 번째 //세 번째 }; &lt;/script&gt; 생성기(Generator) 반복Generator에 대해서도 반복할 수 있습니다 Generator123456789101112131415function* fibonacci() { // 생성기 함수 let [prev, curr] = [1, 1]; while (true) { [prev, curr] = [curr, prev + curr]; yield curr; } } for (let n of fibonacci()) { console.log(n); // 1000에서 수열을 자름 if (n &gt;= 1000) { break; } } 다른 반복가능 객체에 대해 반복iterable 프로토콜을 명시해서 구현하는 객체에 대해서도 반복할 수 있습니다. 1234567891011121314151617181920var iterable = { [Symbol.iterator]() { return { i: 0, next() { if (this.i &lt; 3) { return { value: this.i++, done: false }; } return { value: undefined, done: true }; } }; } }; for (var value of iterable) { console.log(value); } // 0 // 1 // 2 디스트럭처링이터러블 오브젝트 구조에 맞춰 for-of 문에 변수를 작성하면디스트럭처링을 할 수 있습니다. 12345678910let values = [ {item: \"선물1\", amount: {apple: 10, candy: 20}}, {item: \"선물2\", amount: {apple: 30, candy: 40}} ]; for (var {item: one, amount: {apple: two, candy: five}} of values){ console.log(one, two, five); }; // 선물1 10 20 // 선물2 30 40 values 배열의 첫 번째 엘리먼트에서 item 프로퍼티 값인 “선물1”이one에 할당됩니다. amount는 구조이며 양쪽이 모두 같습니다.apple 프로퍼티 값 10이 two에 할당되고candy 프로퍼티 값 20이 five에 할당됩니다. values의 두 번째 엘리먼트도 같은 방법으로 진행됩니다. for-of와 for-in 차이for-in 문의 대상은 Object이며 열거 가능한 프로퍼티가 대상입니다. 즉 프로퍼티의 enumerable 속성 값이 false이면 반복에서 제외됩니다. for-of 문의 대상은 이터러블 오브젝트 이며 prototype에 연결된 프로퍼티는 대상이 아닙니다. 1234567891011121314151617181920212223242526272829303132331. let values = [10, 20, 30]; 2. Array.prototype.music = function(){ return \"음악\" }; 3. Object.prototype.sports = function(){ return \"스포츠\" }; 4. for (var key in values) { console.log(key, values[key]); /* 0 10 1 20 2 30 music ƒ (){ return \"음악\" } sports ƒ (){ return \"스포츠\" } */ }; 5. for (var value of values) { console.log(value); /* 10 20 30 */ }; values [10, 20, 30] 는 Array 오브젝트 이므로Array.prototype에 연결된 프로퍼티가 values.proto에 첨부됩니다. Array.prototype에 music 메서드를 추가하면values.proto와 Array.prototype이 연동되므로values.music()형태로 호출할 수 있습니다.빌트인 오브젝트 prototype에 메서드를 추가하는 것은 좋은 방법이 아닙니다. 위는 예시를 위한 표현입니다. Object.prototype에 메서드를 추가하는 것 역시 values.sports() 식으로 호출 할수 있게 해줍니다. for-in 문으로 values 배열을 열거하면 Array.prototype에 추가된 music과Object.prototype에 추가된 sports가 출력됩니다.Array.prototype에 빌트인으로 설정된 메서드는 열거되지 않고, 개발자 코드로 추가한 메서드만 열거됩니다. for-of 문으로 values 배열을 열거하면 prototype에 연결된 프로퍼티가 열거되지 않습니다. 이점이 for-in과 for-of의 차이입니다. for-of로 Object 열거 하는 방법오브젝트는 이터러블 오브젝트가 아니므로 for-of 문으로 열거할 수 없습니다.개발자 코드로 사전처리 해줌으로써 for-of문에서 오브젝트를 열거할 수 있습니다. 123456789101112let sports = { soccer: \"축구\", baseball: \"야구\" }; let keyList = Object.keys(sports); for (var key of keyList){ console.log(key, sports[key]); // soccer 축구 // baseball 야구 }; Object.keys(sports)는 파라미터의 sports 오브젝트에서 프로퍼티 키를 배열로 반환합니다. 배열은 이터러블 오브젝트이므로 이를 for-of문으로 반복하면서 sports[key]형태로 프로퍼티 값을 구할 수 있습니다. 거듭 제곱 연산자 ** 거듭 제곱(Exponentiation) 연산자는 곱하기 문자()를 연속하여2개 작성한 형태(*)입니다. ES7 스펙에 추가되었습니다. 12345678console.log(3**2); console.log(3**3); console.log(Math.pow(3, 3)); /* 9 27 27 */ 32는 3의 2승 값 9 입니다.33은 3의 3승 값 27 입니다.**은 Math.pow()메소드와 같습니다.","link":"/2020/03/22/ES6%EC%97%90%20%EC%B6%94%EA%B0%80%EB%90%9C%20Operation%20-ECMAScript/"},{"title":"Generator 오브젝트 -ECMAScript","text":"함수를 호출하면 함수 블록의 코드를 한 번에 실행하지만,제너레이터(Generator)오브젝트는 나누어서 실행할 수 있습니다. Generator function* 선언문 function* 표현식 GeneratorFunction():제너레이터 함수 생성 yield: 제너레이터 함수 실행,멈춤 next():yield 단위로 실행 next() 활용 예제 throw(): Error 발생 yield* 키워드 제너레이터 함수 작성 형식은 3가지가 있습니다. function* 선언문 function* 표현식 GeneratorFunction function* 선언문과 표현식은 기존의 function과 형태가 같습니다,“*”를 사용하는 형태만 다릅니다.GeneratorFunction은 new Function()과 같으며파라미터에 지정한 문자열로 제너레이터 함수를 생성하여 반환합니다. 중요 포인트제너레이터 함수를 호출하면 제너레이터 오브젝트를 생성하여 반환합니다.function()을 호출하면 함수 블록을 실행하지만, 제너레이터 함수는 함수 블록을 실행하지 않고 제너레이터 오브젝트를 생성하여 반환합니다.생성한 제너레이터 오브젝트에 호출한 함수에서 넘겨 준 파라미터 값이 설정됩니다. 생성된 제너레이터 오브젝트는 이터레이터 오브젝트입니다.이터레이터 오브젝트의 메서드를 호출했을 때 제너레이터 함수 블록을 실행합니다.제너레이터 함수 블록에 yield 키워드를 작성하면 함수블록의 코드를 모두 실행하지 않고 yield 키워드 단위로 나누어 실행합니다. 제너레이터 함수는 new 연산자를 사용할 수 없으며 사용시 TypeError가 발생합니다. function* 선언문 선언문 형태로 제너레이터 함수를 정의합니다. function* name([param[, param[, … param]]]) {statements} name함수명. param함수에 전달되는 인수의 이름. 함수는 인수를 255개까지 가질 수 있다. statements함수의 본체를 구성하는 구문들. 반환 값Generator 객체를 반환합니다. 12345678910111. function* sports(one, two){ console.log(\"함수 블록\"); yield one + two; }; 2. console.log(typeof sports); 3. let genObj = sports(1, 2); 4. console.log(typeof genObj); // function // object function* sports(one, two){} 형태를 제너레이터 선언문이라고 합니다.처음 제너레이터 함수를 호출하면서 넘겨주는 파라미터 값이 sports()의 파라미터에 작성한 이름(one, two)에 설정됩니다. console.log(typeof sprts) 제너레이터 함수의 typeof는 function입니다. let genObj = sports(1,2)sports(1,2)로 호출하면 sports 함수 블록을 수행하지 않고 제너레이터 오브젝트를 생성하여 반환합니다. 함수 블록을 수행하면 console.log(“함수 블록”)이 실행되어야 하는데 실행되지 않습니다.sports(1,2)에서 넘겨 준 파라미터 값이 function* sports(one,two){}의 파라미터 one 과 two에 설정됩니다. 따라서 제너레이터 오브젝트를 사용하여 제너레이터 함수를 호출했을 때 추가 처리를 하지 않아도 파라미터 값을 사용할 수 있습니다. 생성된 제너레이터 오브젝트의 type 인 object가 출력됩니다. Generator 설명Generator는 빠져나갔다가 나중에 다시 돌아올 수 있는 함수입니다. 이때 컨텍스트(변수 값)는 출입 과정에서 저장된 상태로 남아 있습니다. Generator 함수는 호출되어도 즉시 실행되지 않고, 대신 함수를 위한 Iterator 객체가 반환됩니다. Iterator의 next() 메서드를 호출하면 Generator 함수가 실행되어 yield 문을 만날 때까지 진행하고, 해당 표현식이 명시하는 Iterator로부터의 반환값을 반환합니다. yield* 표현식을 마주칠 경우, 다른 Generator 함수가 위임(delegate)되어 진행됩니다. 이후 next() 메서드가 호출되면 진행이 멈췄던 위치에서부터 재실행합니다. next() 가 반환하는 객체는 yield문이 반환할 값(yielded value)을 나타내는 value 속성과, Generator 함수 안의 모든 yield 문의 실행 여부를 표시하는 boolean 타입의 done 속성을 갖습니다. next() 를 인자값과 함께 호출할 경우, 진행을 멈췄던 위치의 yield 문을 next() 메서드에서 받은 인자값으로 치환하고 그 위치에서 다시 실행하게 됩니다. function* 표현식 표현식 형태로 제너레이터 함수를 정의합니다. function* [name]([param1[, param2[, …, paramN]]]) {statements} name함수명. 생략하면 익명 함수가 됩니다. 함수명은 함수내에만 한정됩니다. paramN함수에 전달되는 인수의 이름. 함수는 최대 255 개의 인수를 가질 수 있습니다. statements함수의 본체를 구성하는 구문들. 반환 값Generator 객체 function* expression 은 function* statement 과 매우 유사하고 형식도 같습니다. function* expression 과 function* statement 의 주요한 차이점은 함수명으로, function* expressions 에서는 익명 함수로 만들기 위해 함수명이 생략될 수 있습니다. function* expression1234567891. let sports = function*(one, two){ 4. console.log(\"함수 블록\"); yield one + two; }; 2. let genObj = sports(10, 20); 3. console.log(genObj.next()); //함수 블록 // Object {value: 30, done: false} function 이름이 없는 무명(혹은 익명) 함수입니다.함수를 변수에 할당해 줌으로써 sports를 함수 이름으로 사용할 수 있습니다.function_에 직접 함수 이름을 작성할 수 있지만, 외부에서 함수를 호출할 때는 sports()로 호출해야 합니다.function_ 함수 이름은 함수 안에서 자신을 호출할 때 사용됩니다.(재귀 함수 호출)하지만 변수에 할당하며 작성한 함수 이름으로 재귀 호출할 수 있으므로function* 에 직접 함수이름을 작성하는 방법은 잘 사용하지 않습니다.자바스크립트 초기 버전에서 사용했습니다. sports(10, 20)으로 호출하여 제너레이터 오브젝트를 생성하고, 10을 파라미터 one에 설정하고 20을 two에 설정합니다.이때, 함수 블록의 코드를 실행하지 않고 생성한 제너레이터 오브젝트를 반환합니다. 생성된 제너레이터 오브젝트는 이터레이터 오브젝트입니다. 제너레이터 오브젝트의 next()를 호출하면 이터레이터 오브젝트와 같은 처리를 수행합니다.next()를 호출하여 sports 제너레이터 함수의 함수 블록을 수행합니다. 제너레이터 함수 블록의 코드 입니다.console에 “함수 블록”을 출력합니다.sports(10, 20)으로 호출했을 때, one과 two에 값을 설정했으므로yield 키워드에서 파라미터 이름으로 값을 구할 수 있습니다.yield 키워드는 yield 오른쪽의 표현식을 평가하고,평가 결과를 {value: 30, done: false} 형태로 반환합니다. 개발자 도구에서 sports 제너레이터 함수 (== 크롬브라우저) 엔진이 function* 키워드를 만나면 제너레이터 함수 오브젝트를 생성하여sports 변수에 할당 합니다. sports(10, 20)을 호출하면 sports.prototype에 연결된 프로퍼티로 제너레이터 오브젝트를 생성하여 반환합니다. __proto__.constructor는 생성자 함수로 이름이 GeneratorFunction입니다. 반환된 제너레이터 오브젝트에__proto__.__proto__에 next()가 있으므로genObj.next()형태로 호출할 수 있습니다. GeneratorFunction(): 제너레이터 함수 생성 제너레이터 함수를 생성하여 반환합니다. GeneratorFunction 생성자는 새로운 generator function 객체를 생성합니다. JavaScript 에서 모든 generator function 은 실제로 GeneratorFunction object 입니다. 주의할 점은, GeneratorFunction 이 전역 객체(global object)가 아니란 점입니다. GeneratorFunction은 다음의 코드를 실행해서 얻을 수 있습니다. Object.getPrototypeOf(function*(){}).constructor new 연산자로 GeneratorFunction() 함수를 호출할 수 없습니다. 이름 없는 제너레이터 함수를 생성하고, 여기에 연결된 constructor를 사용하여 제너레이터 함수를 생성합니다. 123456789101. let GenConst = Object.getPrototypeOf(function*(){}).constructor; 2. let sports = new GenConst( \"one\", \"two\", \"console.log('함수 블록'); yield one + two\" ); 3. let genObj = sports(3, 4); 4. console.log(genObj.next()); // 함수 블록 // Object {value: 7, done: false} 제너레이터 함수를 생성하기 위한 생성자(constructor)를 구합니다.function*(){}으로 익명 제너레이터 함수를 생성하여 Object.getPrototypeOf()의 파라미터 값으로 지정합니다. 익명 제너레이터 함수의 prototype 오브젝트가 반환됩니다. prototype에 constructor가 있으므로 이를 반환하고 GenConst에 할당합니다. (Genconst 변수가 생성자 함수가 되는 것 입니다.) new 연산자로 GenConst 생성자를 호출하여 제너레이터 함수를 생성합니다.(GenConst의 파라미터에 생성될 제너레이터 함수에서 사용할 파라미터와 함수 블록 코드를 문자열로 작성합니다.)첫 번째 one 과 두 번째 two가 제너레이터 함수의 파라미터가 되고,세 번째 파라미터가 함수 블록 코드가 됩니다. 파라미터의 문자열을 parsing(문자열 해석?)하면 다음과 같은 형태가 되는 것입니다. new GenConst parsing1234(function*(one,two){ console.log('함수 블록'); yield one + two }) sports(3,4)로 호출하면 제너레이터 오브젝트를 생성하여 반환합니다.function*(one, two){}에서 3이 one에 4가 two에 설정됩니다. next()를 호출하면 함수 블록 코드를 실행합니다.Object {value: 7, done: false}를 반환합니다. yield: 제너레이터 함수 실행, 멈춤 yield 키워드는 제너레이터 함수를 멈추게 하거나 다시 실행하는데 사용됩니다. [returnValue] = yield [expression]; expression제너레이터 함수에서 제너레이터 프로토콜을 통해 반환할 값을 정의합니다(표현식). 값이 생략되면, undefined를 반환합니다. returnValue제너레이터 실행을 재개 하기 위해서, optional value을 제너레이터의 next() 메서드로 전달하여 반환합니다. yield의 표현식 평가 결과를 왼쪽의 returnValue에 할당하지 않습니다.제너레이터 오브젝트의 next()를 호출하면 next() 파라미터 값이 returnValue에 할당됩니다. next()로 제너레이터 함수를 호출하면 yield 작성에 관계없이 “{value: 값, done: false/true}” 형태로 반환합니다. yield를 수행하면 표현식 평가 결과가 value 값에 설정되고, yield를 수행하지 못하면 undefined가 설정됩니다. 12345678910111213function* sports(one){ let two = yield one; let param = yield two + one; yield param + one; } 1. let generatorObj = sports(10); 2. console.log(generatorObj.next()); 3. console.log(generatorObj.next()); 4. console.log(generatorObj.next(20)); //Object {value: 10, done: false} //Object {value: NaN, done: false} //Object {value: 30, done: false} sports(10)으로 호출하여 제너레이터 함수의 one 파라미터에 10이 설정되고제너레이터 오브젝트를 생성하여 반환합니다. (함수 블록의 코드는 실행하지 않습니다.) generatorObj.next()를 호출하면 sports 제너레이터 함수 블록의 첫 줄부터 첫 번째 yield까지 수행합니다. == (let two = yield one;)yield의 표현식 평과 결과 {value: 10, done: false}형태를 반환합니다.할당연산자(=)는 오른쪽 값을 왼쪽 변수에 할당하지만, yield 의 할당연산자(=)는 할당하지 않습니다. next()를 다시한번 호출하면 파라미터 값을 (let two = yield one)에서 two 변수에 설정합니다. 파라미터 값이 지정되지 않았으며 undefined가 two 변수에 설정됩니다. 그리고 아래 코드를 실행합니다.two 변수에 undefined가 설정되어 있고, one 변수에 10이 설정되어 있으므로Object {value: NaN, done: false}를 반환합니다. NaN을 param 변수에 설정하지 않습니다. next(20)으로 호출하면 파라미터 값 20을 (let param = yield two + one)에서 param 변수에 설정합니다. param 변수 값이 20이고 one 변수 값이 10이므로{value: 30, done: false}를 반환합니다. 12345678910function* sports(one){ yield one; 4. let check = 10; } 1. let genObj = sports(10); 2. console.log(genObj.next()); 3. console.log(genObj.next()); //Object {value: 10, done: false} //Object {value: undefined, done: true} sports(10) 으로 호출하면 제너레이터 함수의 one 파라미터에 10이 설정되고제너레이터 오브젝트를 생성하여 반환합니다. next()를 호출하면 함수 블록의 첫 줄부터 첫 번째 yield의 표현식까지 수행합니다. yield one; = {value: 10, done: false} 형태로 반환합니다. next()를 호출하면 파라미터 값을 바로 앞 yield 왼쪽에 있는 변수에 할당합니다.그런데 왼쪽의 변수가 없으므로 값을 할당하지 않습니다.이후에 아래 코드를 실행합니다. check에 10을 할당하는 코드이지만 더 이상 수행할 yield는 없고함수 안에 더 처리해야할 코드도 없습니다. 반환할 값이 없습니다.value 프로퍼티 값에 undefined를 설정하고, done 프로퍼티 값에 true를 설정합니다. {value: undefined, done: true} 형태로 반환됩니다. next(): yield 단위로 실행 제너레이터 함수에서 yield 단위로 실행합니다. next()를 호출하면 yield를 기준으로 이전 yield의 다음 줄부터 yield까지 수행합니다. 제너레이터 함수에 yield가 여러개 작성되어 있으면, yield 수만큼 next()를 작성해줘야 제너레이터 함수 전체를 실행하게 됩니다. 파라미터는 선택으로 제너레이터 함수가 멈춘 yield의 왼쪽 변수에 설정합니다. 1234567891011121314let gen = function*(value){ value = value + 10; yield ++value; value = value + 7; yield ++value; }; 1. let genObj = gen(1); console.log(genObj.next()); console.log(genObj.next()); console.log(genObj.next()); //Object {value: 12, done: false} //Object {value: 20, done: false} //Object {value: undefined, done: false} gen(1)로 호출하면 제너레이터 함수의 value 파라미터에 1이 설정되며 제너레이터 오브젝트를 생성하여 반환합니다. next()를 호출하면 제너레이터 함수 첫 줄부터 yield의 표현식까지 수행합니다.즉, 다음 코드를 실행합니다.value = value + 10;yield ++value;파라미터로 받은 1에 10을 더해 value에 할당합니다.다음으로 yield ++value;를 실행하여 value값에 1을 더합니다.{value: 12, done: false}가 반환됩니다. 다시 next()를 호출하면 yield ++value에서 yield 왼쪽에 파라미터 값을 설정합니다. 그런데 왼쪽에 변수가 없으므로 다음 코드를 실행합니다.value = value + 7;yield ++value;value 변수 값이 12이므로 7을 더해 19를 value에 할당합니다.다음으로 yield ++value;을 실행하여 {value: 20, done: false}를 반환합니다. 다시 next()를 호출하면 제너레이터 함수에 yield가 없으므로{value: undefined, done: false}를 반환합니다. next() 활용 예제 청구 금액과 할인 금액 계산하여 반환 청구 금액을 계싼하는 제너레이터 함수와 할인 금액을 계산하는 일반 함수를 정의합니다. 청구 금액 계산 제너레이터 함수는 수량과 단가를 파라미터로 받아 금액을 계산합니다. 계산한 금액을 yield로 반환합니다. 할인 금액 함수를 호출하면서 yield로 반환된 값을 파라미터 값으로 넘겨 줍니다. 파라미터의 금액에 따라 할인 금액을 계산하여 반환합니다. 청구 금액 계산 제너레이터 함수를 호출하면서 할인 금액을 파라미터로 넘겨줍니다. 합계 금액에서 할인 금액을 빼서 청구 금액을 계산합니다, 계산된 청구 금액을 반환합니다. next(), yield 활용 예제123456789101112131415161718192021222324252627282930313233343536373839// 청구 금액을 계산하는 제너레이터 함수 getAmount // 파라미터 qty = 수량 , price = 단가 let getAmount = function*(qty, price){ // 함수가 처음 호출될 때 수량에 단가를 곱해 합계 금액을 구하고 소숫점은 버립니다. let amount = Math.floor(qty * price); // 두 번째 호출될 때 할인 금액(discount)을 받아 // 합계 금액에서 할인 금액을 빼서 반환합니다. let discount = yield amount; return amount - discount; }; // 할인 금액을 구하는 함수 getDiscount // 파라미터 값인 amount가 1000 보다 크면 0.2를 곱하고 // 아니면 0.1을 곱합니다. let getDiscount = function(amount){ return amount &gt; 1000 ? amount * 0.2 : amount * 0.1; }; // getAmount(10, 60)으로 호출하여 qty값 10 price값 60이 설정됩니다. // 제너레이터 오브젝트를 생성하여 반환합니다. let amountObj = getAmount(10, 60); // next()를 호출하여 제너레이터 함수를 실행시키고 반환된 결과를 // result 변수에 할당합니다. /* let amount = Math.floor(qty * price); 10 * 60 = 600 amount에 600이 할당됩니다. {value: 600, done: false} 반환 */ let result = amountObj.next(); console.log(result); //할인 금액을 구하는 함수 //앞의 next()에서 value:600을 반환했으므로 파라미터 값으로 600을 넘겨줍니다. //호출된 dcAmount에서 60을 반환합니다. let dcAmount = getDiscount(result.value); console.log(dcAmount); //next(dcAmount)로 호출하여 파라미터 값 60을 넘겨줍니다 // let discount = yield amount 에서 60이 discount에 설정됩니다. // 그리고 return amount - discount 를 실행하여 // {value: 540, done: true}를 반환합니다. console.log(amountObj.next(dcAmount)); next()의 다양한 형태next()와 yield를 조합한 다양한 형태를 살펴 봅니다.제너레이터 함수를 계속 호출 하려면 yield가 이에 대응할 수 있어야 합니다.이를 위해 한 줄에 다수의 yield를 작성할 수도 있고,배열 안에 다수의 yield를 작성할 수도 있습니다. next-while123456789101112let gen = function*(value) { let count = 0; while (value){ yield ++count; } }; let genObj = gen(true); 1. console.log(genObj.next()); 2. console.log(genObj.next()); // Object {value: 1, done: false} // Object {value: 2, done: false} 제너레이터 함수에 while문을 작성하고 그 안에 yield를 작성한 형태입니다. 처음 next()를 호출하면 gen()함수의 첫 줄부터 yield까지 수행한 후 그 값을 반환합니다.(let count = 0;)는 처음 한 번만 실행되고 다음부터는 실행하지 않습니다.while(value){}에서 value 파라미터 값이 true이므로 블락을 실행합니다.yield ++count가 실행되어 {value: 1, done: false}를 반환합니다. 다시 next()를 호출하면 앞에서 증가된 count 변수 값이 유지되므로 값을 누적할 수 있습니다. yield ++count를 실행하여 {value: 2, done: false}를 반환합니다.이와 같이 while문 안에 yield를 작성하면 next()를 호출할 때마다 yield가 수행됩니다. next-return-yield1234567891011121314let gen = function*(){ return yield yield yield; } let genObj = gen(); 1. console.log(genObj.next()); 2. console.log(genObj.next(10)); 3. console.log(genObj.next(20)); 4. console.log(genObj.next(30)); // Object {value: undefined, done: false} // Object {value: 10, done: false} // Object {value: 20, done: false} // Object {value: 30, done: true} 제너레이터 함수의 return 문에 다수의 yield를 작성한 형태입니다.return 문의 표현식에 yield가 3개 작성되어 있습니다. 처음 next()를 호출하면 첫 번째 yield를 수행합니다.yield에 반환 값이 없으므로 {value: undefined, done: false}를 반환합니다. 두 번째로 next(10)을 호출하면 두 번째 yield를 수행합니다.왼쪽에 파라미터 값을 받을 변수가 없으므로 파라미터로 넘겨준 값 그대로 반환합니다. 따라서 {value: 10, done: false}를 반환합니다. 세 번째로 next(20)을 호출하면 세 번째 yield를 수행합니다.{value: 20, done: false}를 반환합니다. 마지막으로 next(30)을 호출하면 수행할 yield가 없습니다.{done: true}를 반환하고, return을 작성했으므로 파라미터로 넘겨준 값을반환 합니다. 즉 {value: 30, done: false}이 반환됩니다.return을 작성하지 않으면 {value: undefined, done: true}를 반환합니다. next-array-yield1234567891011let gen = function*(){ return [yield yield]; }; let genObj = gen(); 1. console.log(genObj.next()); 2. console.log(genObj.next(10)); 3. console.log(genObj.next(20)); // Object {value: undefined, done: false} // Object {value: 10, done: false} // Object {value: Array[1], done: true} 제너레이터 함수의 return 문에 배열안에 다수의 yield를 작성한 형태입니다. 는 return문에 yield을 연속으로 작성한 것과 같습니다.yield가 2개 뿐이므로 더 이상 수행할 yield가 없는 상태가 됩니다. 마지막으로 next(20)을 호출하면 (return [yield yield])에서 yield를 제외한[]안에 파라미터로 넘겨준 값을 작성합니다.{value: Array[1], done: true} 형태로 반환됩니다.Array[1]은 {0:20} 입니다. for-of-yield12345678910111213141516let gen = function*(start){ let value = start; while (true){ yield ++value; } }; for (var count of gen(10)){ console.log(count); if (count &gt; 12){ break; } }; // 11 // 12 // 13 for-of() 문에 제너레이터 함수를 호출하는 코드를 작성한 형태입니다. 처음 for-of 문을 시작하면 gen(10)을 호출하여 제너레이터 함수의 start 파라미터에 10을 설정하고 제너레이터 오브젝트를 생성하여 반환합니다.호출한 gen(10) 위치로 돌아오면 반환받은 오브젝트를 할당할 변수가 없으므로 엔진 내부에 저장합니다. gen() 함수를 호출하며 이는 next()를 호출한 것과 같습니다.let value = start;를 수행한 후 while (true){yield ++value;}를 수행합니다.{value: 11, done:false}를 반환하게 되며 value 프로퍼티 값이 count 변수에 설정됩니다. for-of 문의 블록에 작성한 코드를 수행하며 콘솔에 11이 출력됩니다.count 변수 값이 11이므로 다시 for-of 문을 반복하게 됩니다.count 변수 값이 12보다 클때 까지 for-of문을 반복합니다. throw(): Error 발생 throw() 메서드는 Generator의 실행을 재개시키고 Generator 함수의 실행 문맥 속으로 error를 주입합니다. 제너레이터 함수를 호출하여 받은 제너레이터 오브젝트의 throw()를 호출하면에러가 발생합니다. 에러가 발생하면 제너레이터 함수의 catch()문에서 에러를 받습니다. 12345678910111213141516let gen = function*(){ try { yield 10; } catch (message) { yield message; } yield 20; } let genObj = gen(); 1. console.log(genObj.next()); 2. console.log(genObj.throw(\"에러 발생\")); 3. console.log(genObj.next()); // Object {value: 10, done: false} // Object {value: \"에러 발생\", done: false} // Object {value: 20, done: false} next()를 호출하면 try문 의 (yield 10;)을 실행합니다.에러가 발생하지않으며 {value: 10, done: false}를 반환합니다. throw(“에러 발생”)를 호출하면 제너레이터 함수의 catch(message)가 실행됩니다.throw()의 파라미터 값이 catch(message)의 message 파라미터에 설정됩니다.catch() 블록{}의 (yield message;)가 실행되어 {value: “에러 발생”, done: false}가 반환됩니다.중요한 점은 done: false를 반환한다는 점입니다. 즉, 에러는 발생했지만 다음에 next()를 호출할 수 있습니다. genObj.throw(Error(“에러 발생”)); 과 같이 파라미터에 Error 오브젝트를 작성할 수도 있습니다. 앞에서 throw()를 호출하며 catch()블록을 수행했지만 이터레이터가 종료된 것은 아닙니다. 따라서 다시 next()를 호출할 수 있으며 함수의 (yield 20;)을 수행하여{value: 20, done: false}를 반환합니다. 제너레이터 함수에서 에러가 발생1234567891011121314let gen = function*(){ throw \"에러 발생\"; yield 20; }; let genObj = gen(); 1. try { let result = genObj.next(); } catch (error) { console.log(error); } 2. console.log(genObj.next()); //에러 발생 // Object {value: undefined, done: true} try문에서 next()를 호출하면 제너레이터 함수 첫 줄에서 throw문으로 인해 에러가 발생하며, catch(error)에서 에러를 받습니다.(throw “에러 발생”)에서 “에러 발생”이 catch(error)의 error 파라미터에 설정됩니다. 제너레이터 함수에서 에러가 발생하면 이터레이터가 종료됩니다.따라서 next()를 실행하면 제너레이터 함수내에 throw “에러 발생” 밑에yield 20;이 있지만 실행되지 않습니다.{value: undefined, done: true}가 반환됩니다. yield* 키워드 yield* [[expression]] 표현식(expression)에 이터러블 오브젝트를 작성합니다. next()를 호출할 때 마다이터러블 오브젝트를 하나씩 실행하며, 결과 값을 yield의 반환 값으로 사용합니다. 표현식에 제너레이터 함수를 작성할 수 있습니다.표현식으로 호출된 함수에 다수의 yield가 있으면 호출된 함수의 yield를 전부 처리한 후 yield* 아래에 작성한 코드를 실행합니다. yield* 표현식에 제너레이터 함수 작성 형태12345678910111213141516let plusGen = function*(value) { yield value + 5; yield value + 10; }; let gen = function*(value) { yield* plusGen(value); yield value + 20; }; let genObj = gen(10); 1. console.log(\"1:\", genObj.next()); 2. console.log(\"2:\", genObj.next()); 3. console.log(\"3:\", genObj.next()); // Object {value: 15, done: false} // Object {value: 20, done: false} // Object {value: 30, done: false} console.log로 genObj.next()를 호출하면 실행되는 순서가 다음과 같습니다. gen() 함수의 yield* plusGen(value)을 실행합니다. yield*를 작성했으므로 plusGen(value)을 호출하면서 파라미터 값으로 10을 넘겨줍니다. plusGen()이 제너레이터 함수이므로 제너레이터 오브젝트를 생성하여 반환합니다. next()로 호출헤야 plusGen() 함수의 yield를 수행하지만, 이때는 자동으로 plusGen()의 첫 번째 (yield value + 5)를 수행하며 {value: 15, done: false}를 반환합니다. plusGen()을 호출한 곳에서 다시 yield를 수행하므로 plusGen()에서 반환된 값을 반환합니다. 콘솔에 Object {value: 15, done: false}를 출력합니다. next()를 호출하면 plusGen()에서 수행하지 않은 (yield value + 10;)을 실행하며 Object {value: 20, done: false}를 반환합니다. next()를 호출하면 plusGen()에 더 이상 실행할 yield가 없으므로plusGen()을 호출한 gen() 함수 내의 코드 아래의 코드를 수행합니다.(yield value + 20;) 을 실행하게 되며 Object {value: 30, done: false}를 반환합니다. yield* 표현식 재귀 호출 형태123456789101112let gen = function*(value) { yield value; yield* gen(value + 10); } let genObj = gen(1); 1. console.log(genObj.next()); 2. console.log(genObj.next()); 3. console.log(genObj.next()); // Object {value: 1, done: false} // Object {value: 11, done: false} // Object {value: 21, done: false} 처음 next()를 호출하면 제너레이터 함수 첫째 줄의 (yield value;)를 실행하며{value: 1, done: false}를 반환합니다. 두 번째로 next()를 호출하면 (yield* gen(value + 10);)을 실행합니다.그런데 yield* 표현식에서 자신 함수(gen)를 호출합니다. 파라미터 값으로 11을 넘겨주며 next()가 없지만 엔진에서 반환받은 오브젝트의 제너레이터 함수를 호출합니다. (yield value;)가 실행되며 {value: 11, done: false}를 반환합니다.이때, yield value;가 없다면 계속해서 자신을 호출하게 되므로 무한 루프를 돌게됩니다. 세 번째로 next()를 호출하면 (yield* gen(value + 10);)을 실행하고자신을 호출합니다. 위와 같이 진행되어 {value: 21, done: false}를 반환합니다.","link":"/2020/03/31/Generator%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"Global Variable(전역변수)와 Local Variable(지역변수)","text":"변수는 유효범위에 따라 전역변수(Global Variable)와 지역변수(Local Variable)로 구분할 수 있습니다. 이러한 유효범위를 scope라고 합니다. 각각의 function은 각각의 scope를 만듭니다. 전역변수는 함수 외부에서 선언된 변수로, javascript 전체에서 접근할 수 있는 변수입니다. 지역변수는 함수 내부에서 선언된 변수로, 함수가 실행되면 만들어지고 함수가 종료되면 소멸하는 변수입니다. 함수 외부에서는 접근할 수 없습니다. 123456789101112var num =200; // 전역 변수 function myFnc(){ // 지역 변수 함수 var num=500; } myFnc(); // 함수를 호출합니다. document.write(num); /* 함수 내에 작성한 var(변수)는 지역 변수이므로 함수 밖에서는 불러올 수 없습니다. 따라서 전역 변수로 선언된 num값 200이 출력됩니다. */ 의도하지 않는 전역 변수를 작성하게 된다면전역 변수 및 함수를 덮어 쓸 수 있으므로 주의 하여 사용 해야 합니다.","link":"/2020/03/09/Global%20Variable%20%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98%20%EC%99%80%20Local%20Variable%20%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98/"},{"title":"Iteration -ECMAScript","text":"1. 개요Iteration은 반복 처리를 나타내며 이를 위한 프로토콜(Protocol)을 갖고 있습니다. protocol 이라고 하면 통신이 연상되는데통신에 있어 프로토콜은 약속된 기준과 방법으로 데이터를 송수신하는 것을 의미합니다. (통신 프로토콜 = 통신규약) ES6에서 프로토콜도 규약입니다.Iteration을 위한 규약이 있으며 이를 지켜야 반복 처리가 가능합니다. 예를 들어 자바스크립트에서 Array(배열)를 반복 처리 하기 위해서는배열이 반복할 수 있는 Object(오브젝트)여야 하며,오브젝트에 반복 처리를 할 수 있는 method(메서드)가 필요합니다.이러한 규약이 ES6의 Iteration Protocol (반복 처리 규약) 입니다. iterable protocoliterable protocol (이터러블 프로토콜)은 오브젝트의 반복 처리 규약을 정의 합니다.빌트인 오브젝트 String, Array, Map, Set, TypedArray, Argument 와DOM의 NodeList 는 기본 값으로 이터러블 프로토콜을 갖고 있습니다. 이와 같은 오브젝트는 자바스크립트 엔진이 렌더링될 때 이터러블 프로토콜이 설정되기 때문에 사전처리를 하지 않아도 반복 처리를 할 수 있습니다.오브젝트에 이터러블 프로토콜이 설정되면 이터러블 오브젝트라고 합니다. 자바스크립트는 이터러블 오브젝트에 Symbol.iterator가 있어야 합니다.(protocol 규약)Symbol.iterator가 있으면 이터러블 오브젝트 입니다.ex) 이터러블 오브젝트가 아닌 오브젝트에 Symbol.iterator 코드를 추가하면 이터러블 오브젝트가 됩니다. 자체 오브젝트에는 없지만, 상속받은 prototype chain에 있어도 이터러블 오브젝트가 됩니다. ex) 빌트인 Array 오브젝트를 상속받은 오브젝트는 이터러블 오브젝트. 123let arrayObj = []; let result = arrayObj[Symbol.iterator]; console.log(result); // function values() { [native code] } 오브젝트에 프로퍼티 존재 여부를 체크할 때1.arrayObj.propertyKey또는2.arrayObj[propertyKey]형태로 작성하지만, Symbol은 2번과 같이 []안에arrayObj[Symbol.iterator] 형태로 작성해야 합니다. 빌트인 오브젝트 Array에 Symbol.iterator가 설정되어 있으므로function values() { [native code] } 함수코드가 출력됩니다. 123let objectObj = {}; let result = objectObj[Symbol.iterator]; console.log(result); //undefined objectObj는 Symbol.iterator가 존재 하지 않으므로undefined가 출력됩니다.이는 objectObj가 이터러블 오브젝트가 아니라는 뜻이 됩니다. iterator protocoliterator protocol(이터레이터 프로토콜)은 next()메서드를 사용해오브젝트의 값을 차례대로 처리할 수 있는 방법을 제공합니다. 자바스크립트에서 {key: value} 형태의 오브젝트는 작성한 순서대로 열거되는 것이 보장되지 않습니다.이는 오브젝트에 next()가 없다는 의미이기도 합니다.ES6에서는 오브젝트에 추가한 순서대로 key, value가 열거되는Map 오브젝트가 있습니다. 자세한 사항은 Map오브젝트에서 다룹니다. 12345678let arrayObj = [1, 2]; let iteratorObj = arrayObj[Symbol.iterator](); console.log(\"1:\", typeof iteratorObj); console.log(\"2:\", iteratorObj.next()); console.log(\"3:\", iteratorObj.next()); console.log(\"4:\", iteratorObj.next()); Array 오브젝트를 생성하여 [1,2]값을 arrayObj에 할당합니다. arrayObj의 Symbol.iterator()을 호출하면 이터레이터 오브젝트를 생성하여 반환합니다. 1: objectSymbol.iterator()로 반환받은 iteratorObj 타입.(이터러블 오브젝트에 Symbol.iterator()로 반환받은 오브젝트이므로 이터레이터 오브젝트 입니다.)이터레이터 오브젝트 이므로 next()메소드를 사용 할 수있습니다. 2: Object {value: 1, done: false}value: 1 = 이터러블 오브젝트의 값 [1,2] 중 1done: false = 이터레이터가 끝나지 않은 것을 의미합니다. 3: Object {value: 2, done: false}value: 2 = 이터러블 오브젝트의 값 [1,2] 중 2done: false = 이터레이터가 끝나지 않은 것을 의미합니다. 4: Object {value: undefined, done: true}value: undefined = 이터러블 오브젝트의 값 [1,2] 중 이터레이터로 읽은 값이 없음done: true = 이터레이터 종료됨. 이와 같이 이터레이터를 사용하여 이터러블 오브젝트의 값을 작성한 순서대로 읽을 수 있습니다. for()문으로 반복하는 것과는 차이가 있습니다.(목적도 다름)","link":"/2020/03/18/Iteration%20-ECMAScript/"},{"title":"Map 오브젝트 -ECMAScript","text":"Map 오브젝트는 Object 오브젝트와 비슷하지만,다양한 타입을 프로퍼티 키로 사용할 수 있는 점이 다릅니다. Map 오브젝트 개요 new Map(): Map 인스턴스 생성 set(): key와 value 설정 get(): key가 같은 value 반환 has(): key 존재 여부 entries(): 이터레이터 오브젝트 생성 keys(): key 반환 이터레이터 오브젝트 생성 values(): value 반환 이터레이터 오브젝트 생성 forEach(): 엘리먼트마다 콜백 함수 호출 delete(): 엘리먼트 삭제 clear(): 모든 key,value 지움 Symbol.iterator(): 이터레이터 오브젝트 생성 개요 Map 오브젝트는 key와 value로 구성됩니다. key, valueObject 오브젝트의 key 타입은 String 또는 Symbol이지만Map 오브젝트는 아무 객체와 원시값(Object,Function 등등)이라도 key 와 value로 사용할 수 있습니다.key 와 value 값을 저장하며 각 쌍의 삽입 순서도 기억합니다. Map 오브젝트는 key, value로 구성되지만 {key: value}형태로 작성하지 않고,[“key”, “value”]와 같이 이터러블 형태로 작성합니다. key에 다양한 타입을 작성할 수 있는 것과 이러터블 형태로 작성하는 것이Map 오브젝트와 Object 오브젝트의 차이입니다. Map 오브젝트는 key 값이 같으면 추가하지 않고 value 값이 대체되며 추가한 순서대로 읽습니다. 참고 용도 : Map 과 Object 차이 정리 (●’◡’●) Map Object 의도치 않은 key Map은 명시적으로 제공한 키 외에는 어떤 키도 가지지 않습니다. Object는 프로토타입을 가지므로 기본 키가 존재할 수 있습니다. 주의하지 않으면 직접 제공한 키와 충돌할 수도 있습니다. * 참고: ES5부터, 프로토타입으로 인한 키 충돌은 Object.create(null)로 해결할 수 있지만, 실제로 쓰이는 경우는 적습니다. key 타입 Map의 key는 함수, 객체 등을 포함한 모든 값이 가능합니다. Object의 키는 반드시 String 또는 Symbol이어야 합니다. key 정렬 Map의 키는 정렬됩니다. 따라서 Map의 이터레이션은 삽입순으로 이뤄집니다. Object의 키는 정렬되지 않습니다. * 참고: ECMAScript 2015 이후로, 객체도 문자열과 Symbol 키의 생성 순서를 유지합니다. ECMEScript 2015 명세를 준수하는 JavaScript 엔진에서 문자열 키만 가진 객체를 순회하면 삽입 순을 따라갑니다. 크기 Map의 항목 수는 size 속성을 통해 쉽게 알아낼 수 있습니다. Object의 항목 수는 직접 알아내야 합니다. 이터러블 Map은 이터러블이므로, 바로 이터레이션할 수 있습니다. Object를 순회하려면 먼저 모든 키를 알아낸 후, 그 키의 배열을 순회해야 합니다. 성능 잦은 키-값 쌍의 추가와 제거에서 더 좋은 성능을 보입니다. 키-값 쌍의 빈번한 추가 및 제거에 최적화되지 않았습니다. Map 오브젝트가 편리하고 유용성이 높습니다. 그러나 모든 상황에 해당하지는 않습니다.Map 오브젝트는 컬렉션에서 효율이 높습니다. key, value 형태이고 이터러블일 때는 Map 오브젝트를 사용하고값과 함수가 혼합된 형태면 Object 오브젝트를 사용하는 것이 좋습니다. new Map(): Map 인스턴스 생성 Map 인스턴스를 생성하여 반환합니다. new Map([iterable]) iterable 선택적 파라미터요소가 키-값 쌍인 Array 또는 다른 순회 가능한 객체(예: [[1, ‘one’], [2, ‘two’]]). 각 키-값 쌍은 새로운 Map에 포함됩니다. for-of12345678910111213let emptyMap = new Map(); 1. let newMap = new Map([ [\"key1\", \"value1\"], [\"key2\", \"value2\"], [\"key1\", \"sports\"] ]); 2. for (var element of newMap){ console.log(element); }; // [\"key1\", \"sports\"] // [\"key2\", \"value2\"] emptyMap = new Map()과 같이 파라미터를 작성하지 않고 Map 인스턴스를 생성할 수 있습니다. [key, value]가 없는 형태로 생성됩니다. 이는 Map 오브젝트 메서드를 사용하여 [key, value]를 추가해줄 수 있습니다. Map() 파라미터는 이터러블 오브젝트이어야 하므로 대괄호[]를 작성하였으며, 그 안에 [“key1”, “value1”]형태로 작성하였습니다. key1이 key가 되고 value이 value가 됩니다. 다음은 newMap 인스턴스 구조입니다. __proto__: Map은 new Map()을 실행하면 Map.prototype에 연결된 프로퍼티로 인스턴스를 생성한다는 것을 암시합니다. 0: {“key1” =&gt; “sports”}에서 0은 인덱스이며 Map() 파라미터에 작성한 값이 아닙니다. Map은 엔진이 파라미터의 이터러블 오브젝트에 작성한 순서로 인덱스를 부여합니다. 따라서 작성한 순서대로 읽을 수 있습니다. for-of 문 출력 결과가 [“key1”, “sports”], [“key2”, “value2”]두 개만 표시된 이유는 첫 번째의 “key1”과 세 번째 “key1”이 같기 때문입니다.이와 같이 key 값이 같으면 추가되지 않고, value 값을 나중에 작성한 값으로 대체합니다. 인덱스를 부여하여 작성한 순서로 저장하더라도 key 값의 일치 여부를 체크 하기 때문에 첫 번째의 value값을 세 번째의 value 값으로 대체하고 세 번째를 추가하지 않습니다. for.Each()12345678910111213141516171819202122let newMap = new Map([ [\"key1\", \"value1\"], [\"key2\", \"value2\"] ]); for (var element of newMap){ element.forEach((keyValue, index) =&gt; { console.log(index, keyValue); }); }; for (var [key, value] of newMap){ console.log(key, value); }; /* 0 \"key1\" 1 \"value1\" 0 \"key2\" 1 \"value2\" key1 value1 key2 value2 */ Map() 파라미터에 이터러블 오브젝트를 작성하고, 그 안에 두 개의 [key, value]를 작성했습니다. for-of 문을 반복하면 element 변수에 [“key1”, “value1”]형태로 설정됩니다. 배열 형태이므로 for.Each() 메서드를 사용할 수 있습니다. for.Each()가 [“key1”, “value1”]형태를 첫 번째로 읽으면 for.Each() 의 keyValue 파라미터에 “key1”이 설정되고 index에 0이 설정됩니다. 두 번째를 읽으면 keyValue 파라미터에 “value1”이 설정되고 index에 1이 설정됩니다. for-of 문을 처음 반복하면 [“key1”, “value1”]이 읽힙니다. 이때 “key1”이 for-of 문의 [key, value]에서 key에 설정되고 “value1”이 value에 설정됩니다. key, value가 모두 설정되므로 앞 코드와 같이 forEach()로 배열을 전개하지 않아도 됩니다. Error12345678910111213141516171. try { new Map([\"one\", 1]); }catch(e){ console.log(\"[one, 1]\"); }; 2. try { new Map({one: 1}); }catch(e){ console.log(\"{one: 1}\"); }; 3. let newMap = new Map([{one: 1}]); console.log(newMap); // [one, 1] // {one: 1} // {undefined =&gt; undefined} Map() 파라미터에 이터러블 오브젝트를 작성하고 그 안에 배열로 엘리먼트를 작성합니다.[“one”, 1]에서 대괄호[]가 이터러블이므로 이를 제외하면 “one”, 1 형태가 되어 에러가 발생합니다.[[“one”, 1]]형태로 작성해야 합니다. Map() 파라미터에 key,value를 작성하지만, {key: value} 형태로 작성할 수 없으며 TypeError가 발생합니다.[[“one”, 1]]형태로 작성해야 합니다. Map() 파라미터에 대괄호[]를 작성하고, 그 안에 {one: 1}형태로 작성하면 에러가 발생하지 않고Map 인스턴스가 생성됩니다. 하지만 실행 결과에서 볼 수 있듯이 key,value에 값이 설정되지 않아 undefined가 출력됩니다. set(): key와 value 설정 set() 메서드는 Map 오브젝트에서 주어진 key를 가진 엘리먼트를 추가하고, key에 엘리먼트가 이미 있다면 대체합니다. Map.prototype.set(key, value) 첫 번째 파라미터에 key가 될 String 또는 오브젝트를 작성하고 두 번째 파라미터에 value를 작성합니다.set()을 실행한 후 Map인스턴스를 반환하므로 메서드 체인(method chain)형태로 계속해서 Map 인스턴스의 메서드를 호출할 수 있습니다. set1234567891011121314151617181920211. const newMap = new Map(); 2. newMap.set(\"one\", 100); 3. console.log(newMap.size); 4. newMap.set({}, \"오브젝트\"); 5. newMap.set(function(){}, \"Function\"); 6. newMap.set(new Number(\"123\"), \"인스턴스\"); 7. newMap.set(NaN, \"Not a Number\"); 8. for (var [key, value] of newMap) { console.log(key, value); }; /* 1 one 100 Object {} : \"오브젝트\" function (){} : \"Function\" Number {[[PrimitiveValue]]: 123} \"인스턴스\" NaN \"Not a Number\" */ new Map() 파라미터를 작성하지 않고 인스턴스를 생성했습니다.인스턴스에 key, value를 추가할 수는 있으나 인스턴스를 삭제할 수는 없습니다. newMap.set()으로 newMap 인스턴스에 [key, value]값을 추가합니다. “one”이 키가 되고 100이 value가 됩니다. size 프로퍼티는 Map 인스턴스의 엘리먼트 수를 반환합니다. 이 값은 바꿀 수 없습니다. 바꾸면 TypeError가 발생합니다. set()의 첫 번째 파라미터에 Object {}가 key가 되고, 두 번째 파라미터인 “오브젝트”가 value가 됩니다. set()의 첫 번째 파라미터인 function 오브젝트가 key가 되고 두 번째 파라미터인 “Function”이 value가 됩니다. 첫 번째 파라미터인 Number 인스턴스가 key가 되고, 두 번째 파라미터인 “인스턴스”가 value가 됩니다. 첫 번째 파라미터인 NaN이 key가 되고, 두 번째 파라미터인 “Not a Number”가 value가 됩니다. NaN을 key로 사용할 수 있습니다. newMap 인스턴스를 for-of 문으로 반복하면 추가한 순서대로 전개됩니다. newMap의 인스턴스 구조 Map(5) [[Entries]] 0: {&quot;one&quot; =&gt; 100} 1: {Object =&gt; &quot;오브젝트&quot;} 2: {function(){} =&gt; &quot;Function&quot;} 3: {Number =&gt; &quot;인스턴스&quot;} 4: {NaN =&gt; &quot;Not a Number&quot;} 12345678910const newMap = new Map(); newMap.set(\"one\", 100); newMap.set(\"one\", 123); let sportsObj = {sports: \"스포츠\"}; 1. newMap.set(sportsObj, \"Sports Object\"); 2. newMap.set(sportsObj, \"Sports Object-변경\"); 3. newMap.set({}, \"Object-1\"); 4. newMap.set({}, \"Object-2\"); newMap 인스턴스에 “one”을 key로 하여 100을 설정한 후, 다시 “one”을 key로 하여 123을 설정하면key 값이 같으므로 100 이 123으로 대체됩니다. set()의 첫 번째 파라미터에 Object 오브젝트를 직접 작성하지 않고 별도로 작성한 sportsObj 오브젝트를 지정했습니다. sportsObj가 key가 되고 “Sports Object”가 value가 됩니다. sportsObj key가 존재하므로 value가 대체됩니다. set()의 첫 번째 파라미터에 Object 리터럴 {}을 지정했습니다. Object 오브젝트를 생성하여 메모리에 저장하고 newMap 인스턴스에 key로 사용하여 “Object-1”을 추가합니다. set()의 첫 번째 파라미터에 Object 리터럴을 지정해도 앞의 key값과 중복되지 않습니다.왜냐하면 첫 번째 파라미터의 Object 리터럴이 새로운 Object 오브젝트를 생성하므로 앞의 코드와 다른 메모리 주소에 저장되기 때문입니다. 앞의 Object 오브젝트가 저장된 메모리 주소와 생성한 Object 오브젝트의 메모리 주소가 다르므로 value가 대체되지 않고 추가됩니다. get(): key가 같은 value 반환 Map 인스턴스에서 key 값이 같은 value를 반환합니다. Map.prototype.get(key) 파라미터에 검색할 key 값을 작성합니다. 파라미터의 key가 Map 인스턴스에 존재하면 value를 반환하고, 존재하지 않으면 undefined를 반환합니다. key의 값 타입까지 체크합니다 (123 와 “123”은 같지 않습니다.) get()123456789101112const newMap = new Map(); 1. newMap.set(\"one\", 100); console.log(newMap.get(\"one\")); 2. console.log(newMap.get(\"two\")); 3. let sportsObj = {sports: \"스포츠\"}; newMap.set(sportsObj, \"Sports Object\"); console.log(newMap.get(sportsObj)); //100 //undefined //Sports Object set()을 실행하면 [“one”, 100]형태로 등록됩니다. get() 파라미터에 검색할 key 값을 작성합니다. “one”이 newMap 인스턴스에 존재하므로 value인 100을 반환합니다. get()의 파라미터 값인 “two”가 newMap 인스턴스 key에 존재하지 않으므로 undefined 입니다. set()의 첫 번째 파라미터에 sportsObj의 메모리 주소를 key로 지정하여 newMap 인스턴스에 추가합니다.다시 sportsObj의 메모리 주소를 파라미터 값으로 지정하여 get()을 수행하므로 “Sports Object”가 반환됩니다. 123456789101112131415const newMap = new Map(); 1. newMap.set({}, \"Object\"); console.log(newMap.get({})); 2. newMap.set(123, \"값 123\"); console.log(newMap.get(123)); console.log(newMap.get(\"123\")); 3. newMap.set(NaN, \"Not a Number\"); console.log(newMap.get(NaN)); // undefined // 값 123 // undefined // Not a Number set() 파라미터인 Object 오브젝트와 get() 파라미터인 Object 오브젝트의 메모리 주소가 다름으로 undefined를 반환합니다. get(123)으로 검색하면 key 의 타입까지 체크하여 value를 반환합니다.get(“123”)으로 값을 구하면 “123”이 String 타입이므로 타입이 같지않습니다. undefined가 반환됩니다. set()의 파라미터에 NaN을 지정하고 get()의 파라미터에 NaN을 지정하면 key 값이 같으므로 value 값을 반환합니다. ES5에서 (NaN === NaN) 비교 결과가 true가 아닌 문제가 있었지만 Map 오브젝트에 반영되었습니다. has(): key 존재 여부 Map 인스턴스에서 key 값의 존재 여부를 반환합니다. Map.prototype.has(key) key 값이 존재하면 true, 아니라면 false를 반환합니다. 12345const newMap = new Map(); newMap.set(\"one\", 100); console.log(newMap.has(\"one\")); // true key 를 비교한다는 점은 get()과 같습니다.get()은 해당 key의 value를 반환.has()는 key값 존재 여부를 체크, true/false 값을 반환합니다. entries(): 이터레이터 오브젝트 생성 [key, value]를 반환하는 이터레이터 오브젝트를 생성하여 반환합니다. Map.prototype.entries() 생성한 이터레이터 오브젝트에 next()를 호출하면 [key, value]를 반환합니다.next()를 호출할 때마다 Map 인스턴스에 추가한 순서대로 읽힙니다. 123456789101112131415const newMap = new Map([ [\"key1\", \"value1\"], [\"key2\", \"value2\"] ]); let iteratorObj = newMap.entries(); let result = iteratorObj.next(); console.log(result); console.log(iteratorObj.next()); console.log(iteratorObj.next()); // Object {value: Array[2], done: false} // Object {value: Array[2], done: false} // Object {value: undefined, done: true} new Map()으로 두 개의 엘리먼트를 가진 Map 인스턴스를 생성합니다.생성한 Map 인스턴스의 entries()를 호출하여 이터러블 오브젝트를 생성하고 반환합니다. next()를 호출하면 첫 번째의 [“key1”, “value1”]를 {value: Array[2], done: false} 형태의 value에 설정하여 반환합니다. Array[2]로 표시된 이유는 [“key1”, “value1”] 형태이기 때문입니다. keys(): key 반환 이터레이터 오브젝트 생성 key 값을 반환하는 이터레이터 오브젝트를 생성하여 반환합니다. Map.prototype.keys() 생성한 이터레이터 오브젝트의 next()를 호출하면 [key, value]형태에서 key 값만 반환합니다.Map 인스턴스에 추가한 순서대로 읽힙니다. 1234567891011const newMap = new Map([ [\"key1\", \"value1\"] ]); newMap.set({}, \"오브젝트\"); 1. let iteratorObj = newMap.keys(); 2. console.log(iteratorObj.next()); 3. console.log(iteratorObj.next()); // Object {value: \"key1\", done:false} // Object {value: Object, done:false} newMap.keys()로 key 값만 반환하는 이터레이터 오브젝트를 생성해 iteratorObj에 할당합니다. next()를 호출하면 [“key1”, “value1”]에서 “key1”을 {value: “key1”, done:false} 형태로value에 설정하여 반환합니다. ({}, “오브젝트”) 형태로 추가했으므로 Object 오브젝트가 key가 됩니다.{value: Object, done: false} 형태가 반환됩니다. values(): value 반환 이터레이터 오브젝트 생성 value 값을 반환하는 이터레이터 오브젝트를 생성하여 반환합니다. Map.prototype.values() 생성한 이터레이터 오브젝트의 next()를 호출하면 value 값 만 반환합니다. 1234567891011const newMap = new Map([ [\"key1\", \"value1\"] ]); newMap.set({}, \"오브젝트\"); 1. let iteratorObj = newMap.values(); 2. console.log(iteratorObj.next()); 3. console.log(iteratorObj.next()); // Object {value: \"value1\", done: false} // Object {value: \"오브젝트\", done: false} newMap.values()로 value 값을 반환하는 이터레이터 오브젝트를 생성하여 반환합니다. next()를 호출하면 [“key1”, “value1”]에서 “value1”을 {value: “value1”, done: false}의 value에 설정하여 반환합니다. “오브젝트”가 value가 됩니다. {value: “오브젝트”, done:false} 형태로 반환됩니다. forEach(): 엘리먼트마다 콜백 함수 호출 Map 인스턴스를 반복할 때 마다 callback 함수를 호출합니다. Map.prototype.forEach(function) 첫 번째 파라미터에 반복할 때마다 호출할 콜백 함수를 작성합니다. 두 번째 파라미터는 선택적 파라미터로 콜백 함수에서 this로 참조할 오브젝트를 지정합니다. 중요 포인트forEach()는 호출할 때마다 세 개의 파라미터를 넘겨줍니다. [key, value]에서 value [key, value]에서 key 실행 중인 Map 인스턴스 key, value 순서가 아닌 value, key 순서입니다. 12345678910const newMap = new Map([ [\"key1\", \"value1\"], [{}, \"오브젝트\"] ]); newMap.forEach((value, key, map) =&gt; { console.log(key, value); }); // key1 value1 // Object { } \"오브젝트\" forEach()가 처음 호출되면 [“key1”, “value1”]을 읽으며 파라미터 value에 “value1”이 설정되고 파라미터 key에 “key1”이 설정됩니다. 세 번째의 map 파라미터에 newMap 인스턴스가 설정됩니다.두 번째 호출 역시 마찬가지로 설정됩니다. delete(): 엘리먼트 삭제 Map 인스턴스에서 key 값이 같은 엘리먼트를 삭제합니다. Map.prototype.delete(key) 파라미터에 삭제할 key 값을 지정합니다. Map 인스턴스에 같은 key가 존재하면 엘리먼트를 삭제하고 true를 반환합니다. key값이 존재하지 않으면 false를 반환합니다. 12345678910111213const newMap = new Map([ [\"key1\", \"value1\"], [{}, \"오브젝트\"] ]); let sportsObj = {}; newMap.set(sportsObj, \"추가\"); 1. console.log(newMap.delete(\"key1\")); 2. console.log(newMap.delete({})); 3. console.log(newMap.delete(sportsObj)); //true //false //true delete() 파라미터에 작성한 “key1”이 newMap 인스턴스에 존재하므로 [“key1”, “value1”] 엘리먼트를 삭제하고 true를 반환합니다. delete() 파라미터에 작성한 Object 오브젝트{}가 newMap 인스턴스에 존재하는 것처럼 보이지만,새로운 Object 오브젝트를 생성하여 메모리에 저장하므로 newMap 인스턴스에 저장된 Object 오브젝트와 메모리 주소가 달라서 삭제하지 못합니다. false가 반환됩니다. delete() 파라미터의 sportsObj와 newMap 인스턴스의 sportsObj가 같은 메모리 주소를 참조하므로 삭제가 되며 true를 반환합니다. clear(): 모든 key, value 지움 Map 인스턴스의 모든 [key, value]를 지웁니다. Map.prototype.clear() Map 인스턴스를 삭제하는 것이 아니라 [key, value]만 지웁니다.나중에 Map 인스턴스에 [key, value]를 추가해 줄 수 있습니다. 1234567891011const newMap = new Map([ [\"key1\", \"value1\"], [{}, \"오브젝트\"] ]); 1. console.log(newMap.size); newMap.clear(); 2. console.log(newMap.size); //0 //2 size 프로퍼티는 newMap 인스턴스의 [key, value]엘리먼트 수를 반환합니다. 2가 출력됩니다. clear()는 newMap 인스턴스의 모든 [key, value]를 지웁니다. 따라서 size 값으로 0이 출력됩니다. Symbol.iterator(): 이터레이터 오브젝트 생성 이터레이터 오브젝트를 생성하여 반환합니다. Map.prototype.[Symbol.iterator] 생성한 이터레이터 오브젝트의 next()를 호출하면 Map 인스턴스에 작성된 순서대로 [key, value]를 반환합니다.Map.prototype.entries()와 같습니다. 1234567891011let newMap = new Map([ [\"1\", \"music\"], [\"2\", \"sports\"] ]); 1. let iteratorObj = newMap[Symbol.iterator](); 2. console.log(iteratorObj.next()); console.log(iteratorObj.next()); // Object {value: Array[2], done: false} // Object {value: Array[2], done: false} newMap 인스턴스의 Symbol.iterator를 호출하면 이터레이터 오브젝트를 생성하여 반환합니다. next()를 호출할 때마다 [“1”, “music”] 과 [“2”, “sports”]를 순서대로 읽어{value: Array[2], done: false} 형태로 반환합니다.Array[2]에 읽은 [key, value]가 설정됩니다.","link":"/2020/04/10/Map%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScriprt/"},{"title":"Math 오브젝트 -ECMAScript","text":"Math는 수학적인 상수와 함수를 위한 속성과 메서드를 가진 내장 객체입니다. 함수 객체가 아닙니다. Math는 Number 자료형만 지원하며 BigInt와는 사용할 수 없습니다. BigInt는 Number 원시 값이 안정적으로 나타낼 수 있는 최대치인 253 - 1보다 큰 정수를 표현할 수 있는 내장 객체입니다. 다른 전역 객체와 달리 Math는 생성자가 아닙니다. Math의 모든 속성과 메서드는 정적입니다. 속성 math.E오일러의 상수이며 자연로그의 밑. 약 2.718. math.LN22의 자연로그. 약 0.693. math.LN1010의 자연로그. 약 2.303. math.LOG2E밑이 2인 로그 E. 약 1.443. math.LOG10E밑이 10인 로그 E. 약 0.434. math.PI원의 둘레와 지름의 비율. 약 3.14159. math.SQRT1_2½의 제곱근. 약 0.707. math.SQRT22의 제곱근. 약 1.414. 메서드 참고: 삼각 함수(sin(), cos(), tan(), asin(), *acos(), atan(), atan2())는 매개변수와 반환값 모두 호도법(라디안)을 사용합니다.라디안 값을 각도 값으로 변환하려면 (Math.PI / 180)으로 나누세요. 반대로 각도 값에 곱하면 라디안 값이 됩니다. 참고: 많은 수의 Math 함수 정확도는 구현에 따라 다를 수 있습니다. 즉, 각 브라우저의 결과가 다를 수 있으며, 서로 같은 JS 엔진이라도 운영체제나 아키텍쳐에 따라서 불일치하는 값을 반환할 수 있습니다. math.abs(x)숫자의 절댓값을 반환합니다. math.acos(x)숫자의 아크코사인 값을 반환합니다. math.acosh(x)숫자의 쌍곡아크코사인 값을 반환합니다. math.asin(x)숫자의 아크사인 값을 반환합니다. math.asinh(x)숫자의 쌍곡아크사인 값을 반환합니다. math.atan(x)숫자의 아크탄젠트 값을 반환합니다. math.atanh(x)숫자의 쌍곡아크탄젠트 값을 반환합니다. math.atan2(y, x)인수 몫의 아크탄젠트 값을 반환합니다. math.cbrt(x)숫자의 세제곱근을 반환합니다. math.ceil(x)인수보다 크거나 같은 수 중에서 가장 작은 정수를 반환합니다. math.clz32(x)주어진 32비트 정수의 선행 0 개수를 반환합니다. math.cos(x)숫자의 코사인 값을 반환합니다. math.cosh(x)숫자의 쌍곡코사인 값을 반환합니다. math.exp(x)Ex 를 반환합니다. x는 인수이며 E 는 오일러 상수(2.718…) 또는 자연로그의 밑입니다. math.expm1(x)exp(x)에서 1을 뺀 값을 반환합니다. math.floor(x)인수보다 작거나 같은 수 중에서 가장 큰 정수를 반환합니다. math.fround(x)인수의 가장 가까운 단일 정밀도 표현을 반환합니다. 32비트 유동 소수 값 math.hypot([x[, y[, …]]])인수의 제곱합의 제곱근을 반환합니다. math.imul(x, y)두 32비트 정수의 곱을 반환합니다. math.log(x)숫자의 자연로그(loge 또는 ln) 값을 반환합니다. math.log1p(x)숫자 x에 대해 1 + x의 자연로그(loge 또는 ln) 값을 반환합니다. math.log10(x)숫자의 밑이 10인 로그를 반환합니다. math.log2(x)숫자의 밑이 2인 로그를 반환합니다. math.max([x[, y[, …]]])0개 이상의 인수에서 제일 큰 수를 반환합니다. math.min([x[, y[, …]]])0개 이상의 인수에서 제일 작은 수를 반환합니다. math.pow(x, y)x의 y 제곱을 반환합니다. math.random()0과 1 사이의 난수를 반환합니다. math.round(x)숫자에서 가장 가까운 정수를 반환합니다. math.sign(x)x의 양의 수인지 음의 수인지 나타내는 부호를 반환합니다. math.sin(x)숫자의 사인 값을 반환합니다. math.sinh(x)숫자의 쌍곡사인 값을 반환합니다. math.sqrt(x)숫자의 제곱근을 반환합니다. math.tan(x)숫자의 탄젠트 값을 반환합니다. math.tanh(x)숫자의 쌍곡탄젠트 값을 반환합니다. math.toSource()문자열 “Math”를 반환합니다. math.trunc(x)숫자의 정수 부분을 반환합니다.","link":"/2020/03/29/Math%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"Number 오브젝트 -ECMAScript","text":"ES6에서 Number 오브젝트에 상수와 메서드가 추가되었습니다.2진수가 추가되었고 8진수가 재정의 되었습니다. Number 오브젝트 Number 상수 64비트 유동 소수점 EPSILON 진수 리터럴 2진수(Binary) 8진수(Octal) isNaN(): NaN 여부 isInteger(): 정수 여부 isSafeInteger(): 안정 정수 여부 isFinite(): 유한 값 여부 Number 상수 ES6에 다음과 같이 두 개의 Number 상수가 추가되었습니다. 상수 이름 값 Number.MAX_SAFE_INTEGER 9007199254740991 (253 - 1) 최댓값 Number.MIN_SAFE_INTEGER -9007199254740991 (-(253 - 1)) 최솟값 safe integer(안전 정수)란, 지수(e)를 사용하지 않고 나타낼 수 있는 값을 의미합니다. 2의 64승이 아닌 2의 53승입니다. 위와 같이 최댓값과 최솟값이 있습니다. 64비트 유동 소수점자바스크립트는 IEEE(Institute of Electrical and Electronics Engineers) 754에 정의된 “doble-precision floating-point format numbers”로 숫자 값을 표현합니다.64비트 유동 소수점으로 정수와 소수를 포함하여 64개의 비트로 값을 표현합니다. 사인 비트(sign bit)MSB(most significant bit): 최상위 비트, 즉 제일 왼 쪽에 있는 63번 비트를 뜻하며 0이면 양수, 1이면 음수를 나타낸다. 지수(exponent): 62번 비트에서 52번 비트까지의 11개 비트입니다. 유효 숫자(fraction): 51번 비트부터 0번 비트까지의 52개 비트에 사인 비트를 포함시켜 53개 비트입니다. 123456789101112// 9007199254740991 console.log(\"1:\", Number.MAX_SAFE_INTEGER); console.log(\"2:\", Math.pow(2, 53) - 1); // -9007199254740991 console.log(\"3:\", Number.MIN_SAFE_INTEGER ); console.log(\"4:\", -(Math.pow(2, 53) - 1)); 1: 9007199254740991 2: 9007199254740991 3: -9007199254740991 4: -9007199254740991 자바스크립트 안정 정수 최댓값과 최솟값을 출력한 결과입니다. 자바스크립트에는 64비트 형식 IEEE 754 정의 값 외에도상징적인 값을 표현하는 Infinity,NaN(숫자가 아님)이 있습니다. Number 타입의 값 중에는 두 가지 방식으로 표현할 수 있는 유일한 값이 있는데, 0 이다. 0 은 -0 이나 +0 으로 표시할 수 있다. (“0” 은 물론 +0 이다.) 실제로 이러한 방식은 거의 효력이 없다. 그 예로, +0 === -0 은 true 이다. 하지만 0으로 나누는 경우 그 차이가 눈에 띌 보일 것입니다. Javascript / 0123442 / +0 // Infinity 42 / -0 // -Infinity EPSILON Number.EPSILON 속성(property)은 Number 형으로 표현될 수 있는 1과 1보다 큰 값 중에서 가장 작은 값의, 차이 값입니다. EPSILON 속성은 대략 2.2204460492503130808472633361816E-16 또는 2-52의 값을 갖습니다. [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false 값을 갖습니다. 부동소수점에 대한 이해Number.EPSILON IEEE754 표현식의 문제Number.EPSILON은 왜 2.220446049250313e-16인가? 12345678910111. let total = 0.1 + 0.2; console.log(total); 2. let result = (Math.abs(0.1 + 0.2 - 0.3) &lt; Number.EPSILON); console.log(result); 3. let value = (Math.pow(10, 1) * 0.1) + (Math.pow(10, 1) * 0.2); console.log(value / 10 === 0.3); // 0.30000000000000004 // true // true 자바스크립트에서 0.1 과 0.2 를 더하면 0.3이 아니라 30000000000000004이 출력됩니다. 이는 자바스크립트가 2진 유동 소수점 방식으로 값을 계산하기 때문입니다. 이와 같이 미세한 값 차이로 인해 값이 일치하지 않을 때Number.EPSILON을 사용합니다. 0.1+0.2 == 0.3 // false 0.1과 0.2를 더하고 0.3을 뺸 절댓값이 Number.EPSILON 값보다 작으면 2진 유동 소수점으로 인한 차이로 처리합니다. Number.EPSILON 값보다 작으므로 true가 출력됩니다. 소수를 정수로 변환하여 계산한 후, 소수를 정수로 변환할 때 곱했던 값으로 나누면 차이가 나지 않습니다. ES5에서 사용가능한 방법입니다. 진수 리터널 2진수(Binary)첫 번째 숫자 0을 작성하고 두 번째에 소문자 b 또는 대문자 B를 작성합니다.세 번째 부터 값을 0 또는 1로 작성합니다.예시로 5값은 0b0101 또는 0B0101 형태의 값 입니다. 8진수(Octal)첫 번째 숫자 0을 작성하고 두 번째에 소문자 o 또는 대문자 O를 작성합니다.세 번째 부터 값을 0에서 7까지 작성합니다. 0o0105 또는 0O0105 형태입니다.ES5에서는 첫 번째에 o 또는 O를 작성 했었습니다. literal12345678// 2진수 let two = 0b0101; console.log(two); // 8진수 let eight = 0o0101; console.log(eight); // 5 65 0b0101는 2진수로 값이 5이며, 0o0101는 8진수로 값이 65입니다.웹 개발자에게는 CSS에서 #0012FF 형태의 16진수를 사용하므로 16진수가 더 익숙합니다. isNaN() : NaN 여부 Number.isNaN() 메서드는 주어진 값이 NaN인지 판별합니다.(NaN === NaN)의 체크 결과가 false로 반환되는 문제가 있어ES5에서 글로벌 오브젝트 isNaN()을 추가했지만 이 또한 문제가 많아ES6에서 Number.isNaN() 이 새로 추가되었습니다.기존부터 존재한 전역 isNaN() 함수의 더 엄격한 버전입니다. Number.isNaN(value) 파라미터에 비교 대상 값을 지정합니다. 주어진 값이 Number이고 값이 NaN이면 true, 아니면 false를 반환합니다. 글로벌 오브젝트 isNaN() 함수와 달리, Number.isNaN()은 강제로 매개변수를 숫자로 변환하는 문제를 겪지 않습니다. 이는 보통NaN으로 변환됐을 값이 안전하게 전달되지만, 실제로는 NaN과 같은 값이 아님을 의미합니다. 이는 또한 오직 숫자형이고 또한 NaN인 값만이 true를 반환함을 뜻합니다. (엄-격) isNaN12345// 예를 들면 아래 예시는 global isNaN()으로 true가 됐을 것임 Number.isNaN(\"NaN\"); // false Number.isNaN(undefined); // false Number.isNaN({}); // false Number.isNaN(\"blabla\"); // false NaN의 재미난? 특징은 자바스크립트에서 유일하게 자기자신과 값이 같지 않다는 것입니다.NaN === NaN; // false isInteger(): 정수 여부 파라미터 값이 정수이면 true, 아니면 false를 반환합니다. isInteger12345678console.log(\"1:\", Number.isInteger(0));// 정수 console.log(\"2:\", Number.isInteger(1.0));// 정수 console.log(\"3:\", Number.isInteger(-123));// 정수 console.log(\"4:\", Number.isInteger(\"12\"));// false console.log(\"5:\", Number.isInteger(1.02));// false console.log(\"6:\", Number.isInteger(NaN));// false console.log(\"7:\", Number.isInteger(true));// false 파라미터 값이 Number 타입의 정수가 아니면 모두 false를 반환합니다. isSafeInteger(): 안정 정수 여부 isSafeInteger123console.log(Number.isSafeInteger(7.0)); //true console.log(Number.isSafeInteger(Number.MAX_SAFE_INTEGER));//true console.log(Number.isSafeInteger(Number.MIN_SAFE_INTEGER));//true 정수 값 이면서 안정 정수의 범위 이면 true를 반환합니다.그 외에는 모두 false를 반환합니다. isFinite(): 유한 값 여부 파라미터에 비교 대상 값을 지정합니다.그 값이 유한 값이면 true, 아니면 false를 반환합니다. 글로벌 오브젝트의 isFinite()와 값 차이가 있으므로 주의합니다. isFinite1234567891011121314151617181920212223console.log(\"1:\", Number.isFinite(Infinity), isFinite(Infinity)); console.log(\"2:\", Number.isFinite(-Infinity), isFinite(-Infinity)); console.log(\"3:\", Number.isFinite(0), isFinite(0)); /////////////////////////////////////// console.log(\"4:\", Number.isFinite(\"0\"), isFinite(\"0\")); console.log(\"5:\", Number.isFinite(null), isFinite(null)); console.log(\"6:\", Number.isFinite(NaN), isFinite(NaN)); console.log(\"7:\", Number.isFinite(undefined), isFinite(undefined)); console.log(\"8:\", Number.isFinite(true), isFinite(true)); /* 1: false false 2: false false 3: true true ////////////////// 4: false true 5: false true 6: false false 7: false false 8: false true */","link":"/2020/03/26/Number%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"Object 오브젝트 -ECMAScript","text":"ES6에서 Object 오브젝트에 작성하고 제어하는 방법이 추가 되었습니다.어떤것은 ES5와 다르게 변경된 것도 있습니다. Object 오퍼레이션 디스크립터 get, set 속성 getter setter is(): 값과 값 타입 비교 assign(): 오브젝트 프로퍼티 복사 assign() 필요성 assign() 고려사항 assign() getter setPrototypeOf():__proto__에 첨부 __proto__ 오퍼레이션 Object에 같은 key 사용(var obj= {key: value}) 형태에서 key 값이 같은 프로퍼티를 두 개 작성했을 때자바스크립트 에디션(버젼)별로 차이가 있습니다. ES3에서는 key 값이 같더라도 추가되고 ES5의 strict 모드에서는 에러가 발생합니다. ES6에서는 strict 모드에 관계없이 에러가 발생하지 않으며 나중에 작성한 프로퍼티 값으로 대체됩니다. ES6 같은 key값 사용123456\"use strict\"; debugger; let sameKey = {one: 1, one: 2}; console.log(sameKey); // Object {one:2} 오브젝트 프로퍼티 키 값이 one인 프로퍼티 두 개를 작성 했습니다.ES6 버젼에서 첫 번째의 one 프로퍼티 값 1이 두 번째 프로퍼티 값 2로 대체됩니다.나중에 작성된 프로퍼티는 값만 대체되고 추가되지 않습니다.{one:2}가 두 개 작성되지 않습니다. 변수 이름으로 값 설정변수 이름을 사용하여 Object의 프로퍼티 값을 설정할 수 있습니다. 1234let one = 1, two = 2; let values = {one, two}; console.log(values); // Object {one: 1, two:2} (let values = {one, two})에서 one이 프로퍼티 이름이 되면서 one 변수 값인 1이프로퍼티 값으로 설정됩니다.two 역시 프로퍼티 이름이 되면서 변수 값인 2가 프로퍼티 값으로 설정됩니다. {one, two} 의 형태가 변수의 이름을 사용하여 프로퍼티 이름이 되면서변수의 값이 프로퍼티 키로 할당되어 {one:1, two:2}형태로 변환 됩니다. Object에 function 작성 ES5 에서는 Object에 함수를 아래와 같은 형태로 작성합니다. ES51234567let obj = { getTotal: function(param){ return param + 123; } }; console.log(obj.getTotal(400)); //523 ES6 에서 Object에 함수(메서드)를 다른 방법으로 작성할 수 있습니다. ES61234567let obj = { getTotal(param){ return param + 123; } }; console.log(obj.getTotal(400)); //523 getTotal(param) {} 형태와 같이 클론(:)과 function 키워드를 작성 하지 않습니다.이 형태의 설명은 다음에 다루고 여기서는 바뀐 형태와 그에 따른 코드 작성의 편리함 정도만 알고 넘어갑니다. 디스크립터 디스크립터(Descriptor)는 ES5에서 제시되었으며 이를 바탕으로ES6에서 여러 기능들이 추가 되었습니다. 내용의 연결을 위해 간단하게 요점만 다룹니다. 1234Object.defineProperty({}, \"book\", { value : 123 enumerable: true }); “book”은 프로퍼티 이름입니다. 프로퍼티 이름 이외에{value: 123, enumerable: true}가 프로퍼티 디스크립터입니다.프로퍼티 디스크립터는 속성 이름(enumerable)과 속성 값(true)으로 구성됩니다. 프로퍼티 디스크립터는 데이터 프로퍼티 디스크립터 타입과 엑세스(access) 디스크립터 타입으로 분류됩니다. 프로퍼티 디스크립터 타입 속성 이름 속성 값 형태 디폴트 값 개요 데이터 value Javascript 데이터 타입 undefined 프로퍼티 값으로 사용 writable true, false false false: 속성 값 변경 불가 엑세스 get function, undefined undefined 프로퍼티 getter 함수 set function, undefined undefined 프로퍼티 setter 함수 공용 enumerable true, false false false: for-in으로 열거 불가 configurable true, false false false: 프로퍼티 삭제 불가 데이터 타입 속성과 엑세스 타입 속성을 같이 작성할 수 없습니다.“{value:1, get: function(){}}” 형태과 같이 value 속성과 get 속성을 같이 작성하면 에러가 발생합니다. 스펙에서 {writable: true} 형태를 [[writable]]:true로 기술하고 있습니다.enumerable,configurable도 같습니다.위와 같이 대괄호 두 개 [[]] 사이에 속성 이름을 작성합니다. get, set 속성 get 속성은 getter 기능을 제공하고 set 속성은 setter 기능을 제공합니다. 아래는 ES5 에서의 사용 형태 입니다. ES5 get12345678var obj = {}; 2. Object.defineProperty(obj, \"book\", { 3. get: function(){ 4. return \"책\"; } }); 1. console.log(obj.book); // 책 엔진이 코드를 해석하면 obj 오브젝트에서 book 프로퍼티 작성 여부를 체크합니다.book 프로퍼티가 작성되어 있으면 get 속성의 존재 여부를 체크합니다. 존재한다면 get 속성 값인 함수를 실행합니다. 이것이 getter 입니다. getter가 호출되어 호출된 값 “책”이 반환됩니다. getter는 obj.book()과 같이 함수를 호출하는 형태로 작성하지 않고obj.book과 같이 함수 이름만 작성합니다. ES5 set123456789var obj = {}; Object.defineProperty(obj, \"item\", { set: function(param){ this.sports = param; } }); obj.item = \"야구\"; console.log(obj.sports); // 야구 obj 오브젝트에서 item 프로퍼티 작성 여부를 체크합니다. 작성되어 있으면 set 속성의 존재 여부를 체크합니다. 존재 하면 set 속성 값인 함수를 실행합니다. 이때 “야구” 값 을 실행하는 함수의 파라미터 값으로 넘겨줍니다.이것이 setter 입니다. setter가 호출되면 this.sports에서 this가 obj 오브젝트를 참조합니다.파라미터로 넘겨받은 “야구”를 obj 오브젝트의 sports 프로퍼티에 할당합니다. (obj.sports) 형태는 getter입니다. 하지만 obj 오브젝트에 get 속성을 작성하지 않았습니다. 디폴트로 getter가 호출되어 obj 오브젝트의 sports 프로퍼티 값을 반환 합니다. ES6에서는 보다 직관적으로 getter와 setter를 정의할 수 있습니다. ES6 getter12345678let obj = { value: 123, get getValue(){ return this.value; } }; console.log(obj.getValue); // 123 ES6에서 getter는 함수(메서드) 이름 앞에 명시적으로 “get”을 작성합니다. (obj.getValue)와 같이 함수 이름을 작성합니다. getter getValue가 함수로 호출 됩니다. this는 obj.getValue의 obj 오브젝트를 참조 합니다. obj 오브젝트에 value 프로퍼티가 있으므로 값을 반환 합니다. ES6 setter12345678let obj = { set setValue(value){ this.value = value; } }; obj.setValue = 123; console.log(obj.value); // 123 setter 또한 ES6에서 함수(메서드) 이름 앞에 명시적으로 “set”을 작성합니다. (obj.setValue = 123)과 같이 obj 오브젝트의 setValue를 프로퍼티 키로 하여값을 할당하는 형태로 작성합니다. setValue가 setter이므로 함수로 호출되고 123을 파라미터 값으로 넘겨줍니다. this는 obj.setValue의 obj 오브젝트를 참조합니다. is(): 값과 값 타입 비교 Object.is() 메서드는 두 개의 파라미터 값과 값 타입을 비교하여 같으면 true, 다르면 false를 반환 합니다. 값과 값 타입을 비교하는 것이지 오브젝트를 비교하는 것이 아닙니다. 배열[]과 배열[] 비교, 오브젝트{}와 오브젝트{} 비교는 false가 반환됩니다.단, window 오브젝트를 비교하면 true를 반환합니다. 값을 비교하는 방법마다 차이가 있습니다. ===값과 값 타입을 모두 비교합니다. ==타입은 비교하지 않고 값만 비교합니다. Object.is()값과 값 타입을 모두 비교합니다. Object.is() 와 === 의 차이Object.is()와 ===는 값과 값 타입을 비교하는 점은 같습니다. 차이점. +0 과 -0을 비교하면 Object.is()는 false ===는 true를 반환합니다. NaN 과 NaN을 비교하면 Object.is()는 true를 반환하고 ===는 false를 반환합니다. 정리1234567891011121314151617181920212223console.log(\"1:\", Object.is(1, \"1\")); //false console.log(\"2:\", Object.is(NaN, NaN), NaN === NaN); // true false console.log(\"3:\", Object.is(0, -0), 0 === -0); // false true console.log(\"4:\", Object.is(-0, 0), -0 === 0); // false true console.log(\"5:\", Object.is(-0, -0), -0 === -0); // true true console.log(\"6:\", Object.is(NaN, 0/0), NaN === 0/0); // true flase console.log(\"7:\", Object.is(null, null), null === null); // true true console.log(\"8:\", Object.is(undefined, null), undefined === null); // false false assign(): 오브젝트 프로퍼티 복사 Object.assign() 메소드는 열거할 수 있는 하나 이상의 출처 객체로부터대상 객체로 속성을 복사할 때 사용합니다. 대상 객체를 반환합니다. Object.assign(target, …sources) 형태 : Object.assign() target : 열거 가능한 오브젝트 지정 sources : 열거 가능한 오브젝트, 다수 지정 가능, sources 지정안할 시 target 오브젝트 반환 두 번째 파라미터의 오브젝트에서 own 프로퍼티만 복사합니다.prototype과 프로퍼티 디스크럽터는 복사하지 않습니다. own 프로퍼티: 오브젝트 자체에서 작성한 프로퍼티를 나타내며 상속받은 프로퍼티는 포함되지 않습니다. 첫 번째 파라미터 null값12345678910try { let obj = Object.assign(null, {x: 1}); } catch (e) { 1. console.log(\"null 지정 불가\"); } 2. console.log(Object.assign(123)); // Number {[[PrimitiveValue]]: 123} 3. console.log(Object.assign(456, 70)); // Number {[[PrimitiveValue]]: 456} Object.assign()의 첫 번째 파라미터를 지정하지 않거나 null 또는 undefined로 지정하면 TypeError가 발생합니다.null로 지정했으므로 catch(e)가 실행되어 “null 지정 불가”가 출력됩니다. Object.assign()의 첫 번째 파라미터에 Number, Boolean,String, Symbol 값을 지정하면 값 타입의 오브젝트를 생성하고파라미터 값을 생성한 오브젝트의 [[PrimitiveValue]]에 설정합니다.첫 번째 파라미터가 123 Number 오브젝트 이므로 Number 오브젝트를 생성하고[[PrimitiveValue]]에 123을 설정합니다. 마지막으로 생성한 오브젝트를 반환 합니다. 첫 번째, 두 번째 파라미터 모두 열거 가능한 오브젝트가 아닙니다.첫 번째 오브젝트는 Number 오브젝트 이므로 2번과 같은 방식으로 설정되고 반환됩니다.하지만 두 번째 오브젝트는 복사되지 않고 반환됩니다. 12345678910111213141516171819202122232425261. console.log(Object.assign(\"ABC\", {one: 1})); /* String 0: \"A\" 1: \"B\" 2: \"C\" one: 1 length: 3 &amp;#95;&amp;#95;proto&amp;#95;&amp;#95;: String [[PrimitiveValue]]: \"ABC\" */ 2. console.log(Object.assign(Symbol(\"ABC\"), {one: 1})); /* Symbol description: (...) one: 1 &amp;#95;&amp;#95;proto&amp;#95;&amp;#95;: Symbol [[PrimitiveValue]]: Symbol(ABC) */ try { let obj = Object.assign(\"ABC\", \"ONE\"); } catch (e) { 3. console.log(\"파라미터 모두 문자열 사용 불가\") }; Object.assign() 첫 번째 파라미터가 String 오브젝트 입니다.String 오브젝트를 생성하고 [[PrimitiveValue]]에 “ABC”가 설정되고String 오브젝트는 이터러블 오브젝트 이기 때문에 {one:1}을 복사하고 생성한 오브젝트를 반환합니다. Object.assign() 첫 번째 파라미터가 Symbol 이므로 Symbol 오브젝트를 생성합니다.[[PrimitiveValue]]에 Symbol(“ABC”)를 설정합니다.생성된 Symbol 오브젝트에 {one:1}을 복사합니다. Object.assign()의 파라미터가 모두 문자열이므로 TypeError가 발생합니다. 파라미터 값으로 undefined, null 작성시12345678910111213141516171819let oneObj = {}; 1. Object.assign(oneObj, \"ABC\", undefined, null); console.log(oneObj); /* Object 0: \"A\" 1: \"B\" 2: \"C\" &amp;#95;&amp;#95;proto&amp;#95;&amp;#95;: Object */ let twoObj = {}; 2. Object.assign(twoObj, {key1: undefined, key2: null}); console.log(twoObj); /* Object key1: undefined key2: null &amp;#95;&amp;#95;proto&amp;#95;&amp;#95;: Object */ Object.assign() 파라미터에 undefined, null을 작성하면 복사되지 않습니다. Object.assign() 파라미터에 오브젝트로 작성하고 오브젝트에 프로퍼티 값으로undefined 와 null을 작성하면 복사됩니다. undefined, null를 오브젝트 프로퍼티 값으로 작성시 복사 가능하지만, 파라미터에 값으로 작성하면 복사되지 않습니다. assign() 필요성 일반적으로 Object 오브젝트를 변수에 할당하면 프로퍼티가 연동되어한 쪽의 프로퍼티 값을 바꾸면 다른 한 쪽의 프로퍼티 값이 자동으로 바뀝니다. 일반적인 오브젝트 프로퍼티 연동 예시12345678910111213let sports = { event: \"축구\", player: 11 } 1. let dup = sports; 2. sports.player = 55; console.log(dup.player); // 55 3. dup.event = \"농구\"; console.log(sports.event); // \"농구\" sports 오브젝트를 dup 변수에 할당하면 dup 변수의 오브젝트와 sports 오브젝트의 프로퍼티가 연동됩니다. console.log(dup);{event: “농구”, player: 55} event: “농구” player: 55 __proto__: Object 즉, 한 쪽 오브젝트 프로퍼티 값을 바꾸면 다른 쪽의 프로퍼티 값이 자동으로 변경됩니다. sports 오브젝트의 player 프로퍼티에 55를 할당 합니다.dup 오브젝트의 player 프로퍼티 값이 55로 변경됩니다.sports 오브젝트는 원본이고 dup 오브젝트가 복사본입니다. 복사본 dup 오브젝트의 event 프로퍼티에 값을 할당하면원본 sports 오브젝트의 event 프로퍼티 값이 자동으로 변경됩니다. 값을 연동하여 사용하고 싶지 않은 경우Object.assign()으로 복사하여 사용하면 프로퍼티 값이 연동되지 않습니다. Object.assign() 사용 복사1234567891011121314let sports = { event: \"축구\", player: 11 }; 1. let dup = Object.assign({}, sports); console.log(dup.player); // 11 2. dup.player = 33; console.log(dup.player,sports.player); // 33 11 3. sports.event = \"수영\"; console.log(dup.event,sports.event); // 축구 수영 Object.assign() 두 번째 프로퍼티에 지정한 sports 오브젝트의 프로퍼티를첫 번째 파라미터에 지정한 빈 오브젝트{}에 복사합니다.그리고 첫 번째 파라미터의 오브젝트를 반환하여 dup 변수에 할당합니다. dup 오브젝트의 player 프로퍼티에 33을 할당합니다.sports 오브젝트의 player 프로퍼티 값은 연동되지 않습니다. sports 오브젝트의 event 프로퍼티에 “수영”을 할당합니다.dup 오브젝트의 프로퍼티 값은 연동되지 않습니다. assign() 고려사항 Object.assign()은 복사한 값이 연동되지 않아 좋지만 고려할 점도 있습니다. 12345678910let oneObj = {one: 1}; let twoObj = {two: 2}; 1. let mergeObj = Object.assign(oneObj, twoObj); console.log(Object.is(oneObj, mergeObj)); //true 2. mergeObj.one = 456; console.log(Object.is(oneObj, mergeObj)); //true twoObj의 프로퍼티를 oneObj에 복사하고 mergeObj에 할당합니다.oneObj 와 mergeObj의 프로퍼티가 같으므로 ture가 출력됩니다. Object.assign()으로 복사한 첫 번째 파라미터(oneObj)와 두 번째 파라미터(twoObj)의 프로퍼티는 연동되지 않지만, 첫 번째 파라미터 오브젝트(oneObj)를 할당한 오브젝트(mergeObj)는 연동됩니다. assign() getter 오브젝트의 프로퍼티를 복사할 때 프로퍼티가 getter이면함수를 복사하지 않고 함수를 호출하여 반환된 값을 복사합니다.return문을 작성하지 않으면 undefined를 반환합니다. 12345678910let count = { current: 1, get getCount() { return ++this.current; } }; let mergeObj = {}; 1. Object.assign(mergeObj, count); 2. console.log(mergeObj); // Object {current: 1, getCount: 2} 두 번째 파라미터 count 오브젝트에 작성된 순서로 복사합니다.count 오브젝트의 current 프로퍼티를 복사 하고 그 값은 1입니다.다음 getCount()함수를 복사하는 대신 함수를 호출하고 반환된 값을 복사합니다.함수에서 this.current에 1을 더하므로 프로퍼티 값은 2가 되고 2를 반환합니다. count 오브젝트의 current 프로퍼티를 복사하는 시점의 값은 1입니다.그 후에 getCount() 함수를 호출하면서 1을 더하지만원본 프로퍼티 값이 변경되더라도 복사된 mergeObj의 프로퍼티 값은 연동되지 않으므로 current 값은 1입니다.getCount는 함수가 호출되고 반환된 값인 2가 mergeObj의 복사되어 출력됩니다. setPrototypeOf(): __proto__에 첨부 Object.setPrototypeOf() 메소드는 지정된 객체의 프로토타입 (즉, 내부 [[Prototype]] 프로퍼티)을 다른 객체 또는 null 로 설정합니다첫 번째 파라미터의 __proto__에 두 번째 파라미터를 첨부합니다. Object.setPrototypeOf(obj, prototype); obj오브젝트 또는 인스턴스 (프로토타입 설정을 가지는 오브젝트)오브젝트에 프로퍼티를 추가 할 수 없는 오브젝트이면 TypeError 발생 prototype객체의 새로운 프로토 타입 (오브젝트 or null). 경고 오브젝트의 [Prototype]을 변경하는 것은 모든 브라우저와 JavaScript 엔진에서단순히 obj.__proto__ = … 문에 소요 된 시간으로 제한되지 않고변경된 [Prototype]에 접근할 수 있는 모든 코드로 확장될 수 있습니다.성능에 신경을 쓰면 [[Prototype]] 설정을 피해야 합니다.[[Prototype]]을 변경하는 대신 Object.create()를 사용하여 원하는 [[Prototype]]으로 새 오브젝트를 만듭니다. setPrototypeOf() 예제1123456789let Sports = function(){}; Sports.prototype.getCount = function(){ return 123; }; 1. let protoObj = Object.setPrototypeOf({}, Sports.prototype); 2. console.log(protoObj.getCount()); // 123 setPrototypeOf()의 두 번째 파라미터인 Sports.prototype에 연결된 프로퍼티를 첫 번째 파라미터인 빈 오브젝트{}의 __proto__에 첨부합니다. protoObj: Sports __proto__: Object ① getCount: ƒ () constructor: ƒ () __proto__: Object protoObj에 __proto__가 연결되어 있으며 여기에Sports.prototype의 constructor 와 getCount가 연결되어 있습니다. protoObj의 __proto__에 getCount가 있으므로protoObj.getCount() 형태로 호출할 수 있습니다. setPrototypeOf() 예제21234567891011let Sports = function(){}; Sports.prototype.getCount = function(){ return 123; }; 1. let fnObj = Object.setPrototypeOf({}, Sports); 2. console.log(fnObj.getCount); // undefined 3. console.log(fnObj.prototype.getCount.call(Sports)); // 123 예제1에서는 Object.setPrototypeOf()의 두 번째 파라미터를Sports.prototype를 지정 했습니다. 예제 2에서는 Sports 함수를 지정합니다.Sports 함수를 첫 번째 파라미터 오브젝트의 __proto__에 첨부하여 반환합니다. fnObj.getCount를 실행하면 Sports.prototype에 연결된 getCount가 반환되지 않고 undefined가 반환됩니다. 이는 fnObj 또는 fnObj.__proto__에 getCount가 없다는 의미입니다.setPrototypeOf() 두 번째 파라미터에 Sports.prototype이 아닌 Sports를 지정하면 Sports.prototype에 연결된 메서드를 직접 호출할 수 없습니다. 이와 같이 경로를 지정해 호출해줘야 합니다.fnObj.__proto__.prototype.getCount()가 전체 경로이지만,__proto__는 작성하지 않아도 되므로fnObj.prototype.getCount.call(Sports)형태로 작성하면getCount()를 호출할 수 있습니다. __proto__ new 연산자로 생성된 인스턴스 또는다른 오브젝트의 prototype에 연결된 프로퍼티가__proto__에 첨부됩니다. __proto__는 엑세스 프로퍼티 입니다.즉, getter와 setter 기능이 있습니다. __proto__는 [[Enumerable]]: false이고[[Configurable]]: true 입니다. 인스턴스를 생성하면 오브젝트의 prototype에 연결된 프로퍼티가인스턴스의 __proto__에 첨부됩니다. 이 환경이 만들어지면 prototype에 연결된 메서드를 인스턴스 메서드로 호출할 수 있습니다. 브라우저 개발자 도구에서 __proto__에 첨부되는 것처럼 표시되는 것은 개발자가 인식 하기 쉽도록 하기 위한 것으로 실제로는원본 오브젝트의 prototype에 연결된 프로퍼티를 참조합니다.이것을 prototype 공유(share)라고 합니다. 첨부라는 말은 기능의 표면적 이해를 돕기 위한 것일뿐 실제로 prototype에 프로퍼티를 복사하는 것은 아닙니다. 참조 혹은 prototype 공유가 맞습니다. prototype과 __proto__ 차이 __proto__에 있는 메서드는 object.name() 형태로 직접 호출할 수 있지만 prototype에 연결된 메서드는 object.prototype.name.call() 형태로 호출해야 합니다. 123456789101. let Sports = function(){}; Sports.prototype.get = function(){}; let sportsObj = new Sports(); 2. sportsObj.&amp;#95;&amp;#95;proto&amp;#95;&amp;#95;[\"set\"] = function(){}; 3. sportsObj.set(); 4. let result = Sports.prototype.set; console.log(result); // function() {} Sports.prototype에 get 메서드를 연결하고 new 연산자로 인스턴스를 생성하여sportsObj에 할당합니다. sportsObj.__proto__에 get()메서드가 첨부됩니다. 생성한 sportsObj 인스턴스의 __proto__에 set() 메서드를 추가합니다. 이때 __proto__에 추가하더라도 __proto__에 추가되지 않고 Sports.prototype에 추가됩니다.왜냐하면 set()메서드를 Sports로 생성한 다른 인스턴스에서 공유하기 때문입니다. set() 메서드가 호출되면 인스턴스의 __proto__에 있지만,__proto__은 프로퍼티 검색과 경로 제공을 위한 것으로,실제로 호출되는 메서드는 인스턴스를 생성한 Sports.prototype에 연결된 메서드입니다.이것이 prototype의 프로퍼티 공유 개념이며 자바스크립트의 아키텍처입니다. sportsObj의 __proto__에 set()메서드를 추가했는데,Sports.prototype.set으로 코드가 출력된 것은 실제로 Sports.prototype에 추가되기 때문입니다.","link":"/2020/03/23/Object%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"RegExp (정규표현) 객체 -JavaScript","text":"정규표현 객체는 입력요소에 데이터를 규칙에 맞게 작성했는지 판단해서 알려주는 객체 입니다. 지정한 규칙대로 단어가 입력됬는지, 잘못된 단어를 포함하고 있는지 찾을때 사용합니다 기본형 두가지 var 변수 = new RegExp(패턴, 검색옵션) 생성자 함수를 사용하면 정규식이 실행 시점에 컴파일됩니다. 정규식의 패턴이 변경될 수 있는 경우, 혹은 사용자 입력과 같이 다른 출처로부터 패턴을 가져와야 하는 경우에는 생성자 함수를 사용합니다. var 변수 = /패턴/검색 옵션 정규식 리터럴(슬래쉬로 감싸는 패턴)은 스크립트가 불러와질 때 컴파일됩니다. 만약 정규식이 상수라면, 이렇게 사용하는 것이 성능을 향상시킬 수 있습니다. 정규 표현 검색 옵션 종류 설명 * 앞의 표현식이 0회 이상 연속으로 반복되는 부분과 대응됩니다. {0,} 와 같은 의미입니다. + 앞의 표현식이 1회 이상 연속으로 반복되는 부분과 대응됩니다. {1,} 와 같은 의미입니다. i 찾는 문자가 영문일 경우 대·소문자를 구분하지 않습니다 ? 앞의 표현식이 0 또는 1회 등장하는 부분과 대응됩니다. {0,1} 와 같은 의미입니다. . 개행 문자를 제외한 모든 단일 문자와 대응됩니다.예를 들어, /.n/는 “nay, an apple is on the tree”에서 ‘an’과 ‘on’에 대응되지만, ‘nay’ 에는 대응되지 않습니다. g 옵션에 g가 없으면 데이터의 왼쪽부터 규칙에 일치하는 문자 한 개만 찾지만,g를 넣으면 규칙에 맞는 모든 문자를 찾습니다. m 데이터의 행이 바뀌어도 규칙에 맞는 문자를 찾습니다.(다중행 검색) $ 문자열 끝부분에 규칙에 맞는 문자를 찾습니다. ^ 문자열 앞에서부터 규칙에 일치하는 문제를 찾습니다. [xyz] 문자셋(Character set) 입니다.괄호 안의 어떤 문자(이스케이프 시퀀스까지 포함)와도 대응됩니다. 점(.) 이나 별표 (*) 같은 특수 문자는 문자셋 내부에서는 특수 문자가 아닙니다. 따라서 이스케이프시킬 필요가 없습니다. 하이픈을 이용하여 문자의 범위를 지정해줄 수 있습니다. [^xyz] 부정 문자셋(negated character set)입니다. 괄호 내부에 등장하지 않는 어떤 문자와도 대응됩니다. 하이픈을 이용하여 문자의 범위를 지정할 수 있습니다. \\d 숫자 문자에 대응됩니다. [0-9]와 동일합니다. \\D 숫자 문자가 아닌 문자에 대응됩니다. [^0-9]와 동일합니다. \\s 페이스, 탭, 폼피드, 줄 바꿈 문자등을 포함한 하나의 공백 문자에 대응됩니다. [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff].와 동일합니다. 예를 들어, /\\S\\w*/는 “foo bar.”의 ‘bar’ 에 대응됩니다. \\S 공백 문자가 아닌 하나의 문자에 대응됩니다. [^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]. 와 동일합니다. 예를 들어, /\\S\\w*/는 “foo bar.”의 ‘foo’ 에 대응됩니다. [0-9][A-Z][a-z] 숫자, 대문자 영문, 소문자 영문을 찾습니다. \\w 문자의 앞 또는 뒤에 공백 문자열을 삭제합니다. \\W 알파벳, 숫자, 밑줄(_) 기호를 제외한 문자를 찾습니다. [^A-Za-z0-9_] 와 동일합니다. (x) ‘x’에 대응되고, 그것을 기억합니다. 괄호는 포획 괄호(capturing parentheses)라 불립니다. (?:x) ‘x’에 대응되지만 대응된 것을 기억하지 않습니다. 괄호는 비포획 괄호(non-capturing parentheses)라고 불립니다. x(?=y) 오직 ‘y’가 뒤따라오는 ‘x’에만 대응됩니다. 이것은 lookahead 라고 불립니다.예를 들어, /Jack(?=Sprat)/ 는 ‘Sprat’가 뒤따라오는 ‘Jack’ 에만 대응됩니다. /Jack(?=Sprat x(?!y) ‘x’뒤에 ‘y’가 없는경우에만 ‘x’에 일치합니다. 이것은 negated lookahead 라고 불립니다. a b {n} 앞 표현식이 n번 나타나는 부분에 대응됩니다. n은 반드시 양의 정수여야 합니다. /a{2}/는 ‘a’에는 대응되지 않지만, 첫 두”aa” 에는 대응됩니다. {n,m} n과 m은 양의 정수이고, n &lt;= m를 만족해야 합니다.앞 문자가 최소 n개, 최대 m개가 나타나는 부분에 대응됩니다. m이 생략된다면, m은 ∞로 취급됩니다. \\cX 문자열 내부의 제어 문자에 대응됩니다. 여기서 X는 A에서 Z까지의 문자 중 하나입니다. 예를 들어, /\\cM/는 문자열에서 control-M (U+000D)에 대응됩니다. \\f 폼피드 (U+000C) 문자에 대응됩니다. \\n 줄 바꿈 (U+000A) 문자에 대응됩니다. \\r 캐리지 리턴(U+000D) 문자에 대응됩니다. \\t 탭 (U+0009) 문자에 대응됩니다. \\v 수직 탭(U+000B) 문자에 대응됩니다. \\n 정규식 내부의 n번째 괄호에서 대응된 부분에 대한 역참조 여기서, n은 양의 정수입니다. 예를 들어, /apple(,)\\sorange\\1/는 “apple, orange, cherry, peach.”의 ‘apple, orange,’ 에 일치합니다. \\0 널 (U+0000)문자에 대응합니다. 이 때 다른 숫자를 뒤에 쓰지 마세요. 왜냐하면 \\0는 8진 이스케이프 시퀀스이기 때문입니다. \\xhh 코드가 hh(두 16진 숫자)인 문자에 일치합니다. \\uhhhh 코드가 hhhh(네개의 16진 숫자)인 문자에 일치합니다. 참고 링크 :https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D 정규 표현 메서드 종류 설명 test() 지정된 규칙에 맞는 단어가 있으면 true 값을 반환 exec() 지정된 규칙에 맞는 단어가 있으면 해당 단어를 반환 사용예제 12345678910111213var str=\"Html Css jQuery \"; // 문자열 선언var reg1=/css/; // 검색 패턴var result_1=reg1.test(str); //str데이터에 reg1 패턴 규칙에 맞는 단어가 있으면 true 아니면 false반환 document.write(result_1,\"&lt;br /&gt;\"); //false var reg2=/css/i; // 검색 패턴//옵션에 'i'를 입력하면 영문 대소문자를 구분하지 않습니다var result_2=reg2.test(str); document.write(result_2,\"&lt;br /&gt;\"); //true 사용예제 2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// 유저에게 이름을 입력받습니다.var userName=prompt(\"당신의 이름은?\");// (가 부터 힣 까지, 2자 부터 5자까지)인 경우의 패턴 값을 생성했습니다.reg1=/^[가-힣]{2,5}$/;while(true){ // reg1 값이 true라면 if(reg1.test(userName)) break; // break(종료) // reg1 값이 false 라면 alert(\"이름 입력 형식이 잘못되었습니다!\"); userName=prompt(\"당신의 이름은?\"); // 다시 입력받습니다.}// 유저에게 핸드폰 번호를 입력받습니다.var userCell=prompt(\"당신의 핸드폰 번호는?\");// (010 or 016 or 011)로 시작, 숫자 3~4자리만 작성가능, 마지막엔 숫자4개가 작성된 경우의 패턴 값을 생성했습니다.reg2=/^(010|016|011)\\d{3,4}\\d{4}$/;while(true){ //reg2 값이 true 라면 if(reg2.test(userCell)) break; // break // reg2 값이 false 라면 alert(\"핸드폰 입력 형식이 잘못되었습니다!\"); userCell=prompt(\"당신의 핸드폰 번호는?\"); // 다시 입력받습니다.}// 유저에게 이메일을 입력받습니다.var userEmail=prompt(\"당신의 이메일은?\");/* 알파벳, 밑줄(_), 숫자를 포함한 5글자부터~12글자까지, 다음엔 '@', a-z중 2글자부터 10글자까지 작성된, \".\"이후에 a-z중 2~3글자 까지 작성된, 다음에 \".\"인 문자가 0이거나 1개가 작성된, .이후에 a-z중 0개 부터 2개까지 작성된 패턴 값을 생성합니다.*/reg3=/^\\w{5,12}@[a-z]{2,10}[\\.][a-z]{2,3}[\\.]?[a-z]{0,2}$/;while(true){ //reg3 값이 true 라면 if(reg3.test(userEmail)) break; // break //reg3 값이 false라면 alert(\"이메일 입력 형식이 잘못되었습니다!\"); userEmail=prompt(\"당신의 이메일은?\"); //다시 입력받습니다.}// 출력document.write(userName,\"&lt;br /&gt;\");document.write(userCell,\"&lt;br /&gt;\");document.write(userEmail,\"&lt;br /&gt;\");","link":"/2020/03/03/RegExp%20%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%20%EA%B0%9D%EC%B2%B4%20-JavaScript/"},{"title":"Promise 오브젝트 -ECMAScript","text":"Promise 오브젝트는 비동기(Asynchronous)처리를 위한 메커니즘을 제공합니다.ES5까지 없었던 개념으로 ES6에 추가되었습니다. Promise 오브젝트 개요 Promise 처리 순서 Promise 상태 settled 상태 fulfill (성공) reject (실패) new Promise(): Promise 인스턴스 생성 then(): 성공, 실패 핸들러 catch(): 실패 핸들러 resolve(): 성공 상태의 인스턴스 반환 thenable reject(): 실패 상태의 인스턴스 반환 all(): 모두 성공이면 핸들러 실행 race(): 처음 한 번만 핸들러 호출 개요 자바스크립트는 기본적으로 동기(Synchronous)로 실행합니다. 동기 실행이란 현재 코드가 실행을 완료해야 다음 코드가 실행되는 것을 의미합니다. 여러 줄의 코드가 있다고 했을 때, 첫째 줄의 코드가 실행을 완료해야 둘째 줄이 실행되며, 둘째 줄이 실행을 완료해야 셋째 줄이 실행되는 형태입니다. 반면, Promise는 비동기(Asynchronous)로 실행합니다. XMLHttp Request의 비동기 통신과 비슷합니다.클라이언트에서 서버로 보낸 요청(Request)에 서버가 응답(Response)할 때까지 통신이 연결된 상태에서 기다리지 않습니다. 따라서 서버가 처리하는 동안 다른 처리를 할 수 있습니다. 클라이언트에서 서버가 응답했을 때의 처리를 사전에 정의해 두면, 서버가 응답했을 때 정의한 코드가 자동으로 실행됩니다.Promise도 이와 개념이 비슷합니다. 코드 구현 관점에서 보면 Promise는 하나의 오브젝트입니다. Promise 오브젝트에서 비동기 처리 방법을 제공하므로 이에 맞추어 코드를 작성하면 됩니다. Promise 오브젝트는 DOM(Document Object Model)에서 처음 제시되었으나 현재는 JavaScript 스펙에 포함되었습니다. 따라서 DOM에서도 사용이 가능하며 이는 DOM을 사용하는 다른 언어에서도 Promise를 사용할 수 있다는 것이 됩니다. Promise 처리 순서Promise 개념을 이해하기 위해 Promise의 비동기 처리 흐름을 간단하게 살펴봅니다. Promise 처리 흐름123456789101112131415161. function create(){ 3. return new Promise(function(resolve, reject){ resolve(); console.log(\"1: resolve\"); }); }; 2. 4. 6. create().then(function(){ console.log(\"3: 성공\"); }, function(){ console.log(\"3: 실패\"); }); 5. console.log(\"2: 끝\"); // 1: resolve // 2: 끝 // 3: 성공 엔진이 function 키워드를 만나면 create()를 호출할 수 있도록 Function 오브젝트로 생성합니다.함수 안에 코드는 실행하지 않고 다음 줄로 이동합니다. create() 함수를 호출합니다. 함수 안에 코드가 실행됩니다. return 문의 표현식을 평가하므로 new Promise()로 인스턴스를 생성합니다. 이때, Promise() 파라미터에 작성한 function(){}을 실행합니다. (function을 executer(실행자)라고 합니다.) function(executer) 블록의 첫째 줄에 resolve()가 작성되어 있습니다. 그런데 호출을 받아서 처리할 같은 이름의 함수가 소스 코드에 없습니다. 단지 파라미터에 resolve가 작성되어 있을 뿐입니다. resolve() 형태가 함수를 호출하는 형태이지만 호출하지 않습니다. 이에 대해서는 사전 설명이 필요하므로 뒤에서 다룹니다. 다음 줄에 console.log()를 실행하여 “1: resolve”를 출력합니다. 생성한 인스턴스를 반환합니다.여기서 중요한 점이 executer가 실행된다는 것과 resolve()가 호출되지 않는다는 점입니다. resolve()를 바로 호출하지 않고 호출할 수 있는 환경이 되었을 때 호출합니다. create() 실행이 끝나면 생성한 Promise 인스턴스를 반환합니다. Promise 인스턴스에 then()이 있으므로 이어서 then()을 호출할 수 있습니다. 하지만 then()을 호출하지 않고, 아래 코드로 이동합니다.앞에서 resolve()를 호출할 수 있는 환경이 되었을 때 호출하는 것과 then()을 실행하지 않고 아래 코드로 이동하는 것이 Promise 비동기 처리의 핵심 매커니즘 입니다. create() 실행 이후에 then()을 호출하지 않고 다음 줄로 이동했을 때 만나는 코드입니다.“2: 끝”이 출력됩니다. 이제 더 이상 남아있는 코드가 없습니다. 이제 남은 것은 then()에 작성한 function()의 실행입니다.then()은 두 개의 파라미터를 갖고 있습니다.위 코드에서는 첫 번째 파라미터의 function이 실행되어 “3: 성공”이 출력됩니다.두 번째 파라미터의 function은 실행되지 않습니다. 첫 번째 파라미터 function이 실행된 이유는 뒤에서 다룹니다. console.log 출력 순서를 보면 “1: resolve”는 new Promise()로 인스턴스를 생성할 때 executer에서 출력합니다.Promise 인스턴스를 생성해야 메서드를 사용할 수 있으므로 먼저 인스턴스를 생성합니다. “2: 끝”은 create()에 연결된 then()을 실행하지 않으므로 두 번째로 실행됩니다. “3: 성공”은 소스 코드 전체를 끝까지 처리한 후 실행되어 세 번째로 출력됩니다. Promise 상태 Promise는 코드를 실행할 때마다 진행 상태를[[PromiseState]]에 저장합니다.상태를 저장하는 이유는 연속해서 코드를 실행하지 않고, 소스 코드 끝까지 내려갔다 다시 올라와서 실행하므로 진행 상태가 필요하기 때문입니다. 상태에 따라 다음 단계를 처리하기 위해서 입니다. Promise 진행 상태는 크게 두 가지로 나눌 수 있습니다.pending 과 settled로 나뉩니다.settled 상태는 다시 fulfill(성공) 과 reject(실패)로 나눌 수 있습니다.pending 과 settled는 상태이면서 발생 단계입니다. 먼저 pending 상태가 되었다가 settled 상태로 넘어갑니다.단계로 보면 두 단계 (pending, settled)이지만 상태 측면에서 보면 세 개이므로 세 개의 상태로 분류하기도 합니다. pending 상태pending123456function create(){ return new Promise(function(resolve, reject){ resolve(); console.log(\"1: resolve\"); }); }; pending 상태(단계)에서는 위 코드와 같이 우선 new Promise()로 인스턴스를 생성합니다. 그리고 executer를 실행하여 성공과 실패에 따라 호출할 핸들러 함수를 바인딩 합니다.바인딩이란 resolve()와 같이 바로 함수를 호출하지 않고 나중에 호출하므로, 그때를 위한 호출 환경을 설정하는 것을 의미합니다. executer 블록의 코드를 실행하지 않고 소스 코드 끝까지 처리한 후 실행하므로 이 시점에서 Promise 처리의 성공과 실패를 알 수 없습니다. 따라서 성공 또는 실패가 발생했을 때, 이에 따라 함수가 호출될 수 있도록 환경 설정이 필요합니다. settled 상태settled12345create().then(function(){ console.log(\"3: 성공\"); }, function(){ console.log(\"4: 실패\"); }); pending 상태가 종료되면 settled 상태로 변환됩니다. 이때 처리의 성공과 실패를 알 수 있습니다.settled 상태는 다시 fulfill(성공) 상태와 reject(실패) 상태로 구분됩니다. 상태에 따라 pending 단계에서 바인딩한 핸들러 함수가 호출됩니다. fulfill (성공)executer 불록의 코드가 성공적으로 실핸된 상태를 나타냅니다.then()의 첫 번째 파라미터의 핸들러(function)가 실행됩니다. - 핸들러 안에 성공에 따른 코드를 작성합니다. reject (실패)executer 블록의 코드 실행이 실패한 상태를 나타냅니다.then()의 두 번째 파라미터의 핸들러가 실행됩니다. - 핸들러 안에 실패에 따른 코드를 작성합니다. new Promise(): Promise 인스턴스 생성 Promise 인스턴스를 생성하여 반환합니다. new Promise() 1234new Promise(function(resolve, reject){ resolve( ); reject( ); }); executer에 두 개의 파라미터를 작성할 수 있습니다. 첫 번째 파라미터에 executer 블록에서 처리를 성공했을 때 호출할 핸들러 이름(resolve)를 작성합니다. 두 번째 파라미터에 실패했을 때 호출할 핸들러 이름(reject)를 작성합니다. resolve 와 reject는 가독성을 위한 것으로 다른 이름을 사용해도 됩니다. executer 블록에 핸들러 함수를 작성하지 않으면, then()의 파라미터에 작성한 함수가 실행되지 않습니다.핸들러 함수 이름과 executer의 파라미터에 작성한 이름과 같아야 하며, 같지 않으면 에러가 발생합니다.예를 들어, resolve() 와 function(resolve)와 같이 resolve 이름이 같아야 합니다. 12345678910111213141516171819function create(param){ 2. return new Promise(function(resolve, reject){ 3. if (param === \"ok\"){ resolve(param); 4. console.log(\"1: resolve\"); } else { reject(param); } }); }; 1. 5. create(\"ok\").then(function(param){ 7. console.log(\"3: 성공,\", param); }, function(param){ console.log(\"3: 실패,\", param); }); 6. console.log(\"2: 끝\"); // 1: resolve // 2: 끝 // 3: 성공, ok create()를 호출하면서 “ok”를 파라미터 값으로 넘겨 줍니다. 호출받은 create() 함수의 파라마터 param에 설정됩니다. executer의 파라미터에 resolve 와 reject를 작성했습니다. Function 오브젝트를 생성하여 resolve 와 reject에 할당합니다. Promise 인스턴스를 생성하여 return 한 후, create()에 연결된 then()의 파라미터에 작성한 함수와 연결합니다.이렇게 설정함으로써 executer 블록에서 resolve()를 호출하면 then()의 첫 번째 파라미터의 함수가 호출되고, reject()를 호출하면 then()의 두 번째 파라미터의 함수가 호출됩니다.executer 파라미터의 resolve와 executer 블록의 resolve()와 then()의 첫 번째 파라미터 함수가 연결되고,executer 파라미터의 reject와 executer 블록의 reject()와 then()의 두 번째 파라미터 함수가 연결되는 것입니다. param 값으로 받은 파라미터가 “ok”이므로 true가 되어 if 문 블록을 수행합니다.resolve(param)가 함수를 호출하는 형태이지만, 지금 호출하지 않고 소스 코드를 끝까지 실행한 후 되돌아와서 호출합니다. 되돌아와서 resolve()를 호출하면 이를 받아 실행할 같은 이름의 함수가 없습니다.이때 executer 파라미터의 resolve에 설정된 함수를 호출합니다. 그러면 resolve 와 then()의 첫 번째 파라미터의 함수와 연결되어 있으므로 then()의 첫 번째 함수가 연결되어 있으므로 then()의 첫 번째 함수가 실행됩니다. 이것이 Promise의 비동기 처리 메커니즘입니다. resolve(param) 다음 줄에 console.log을 실행하며 “1: resolve”를 출력합니다.이제 남은 것은 생성한 인스턴스를 반환하는 것입니다. create(“ok”)의 호출이 완료되면 Promise 인스턴스를 반환하므로 “인스턴스.then()” 형태가 되어 then()을 실행할 수 있지만 바로 실행하지 않습니다. 우선 then()의 첫 번째 파라미터를 executer의 resolve에 바인딩하고, then()의 두 번째 파라미터를 executer의 reject에 바인딩 합니다.이렇게 바인딩을 함으로써 executer 블록에서 resolve()를 호출했을 때 then()의 첫 번째 파라미터에 작성한 함수가 실행됩니다. 소스 코드의 마지막 코드로 console에 “2: 끝”을 출력합니다. 모든 코드를 읽었으므로 이제 남은 것은 resolve()를 실행하는 것입니다. executer 블록에서 resolve(param)을 호출하면, then()의 첫 번째 파라미터 함수가 호출됩니다.이때, resolve(param)에서 param 값인 “ok”가 핸들러 함수인 function(param)의 param에 설정됩니다.따라서 console에 “3: 성공, ok”가 출력됩니다. fail12345678910111213141516171819function create(param){ return new Promise(function(resolve, reject){ if (param === \"ok\"){ resolve(param); } else { reject(param); console.log(\"1: reject\"); } }); }; 1. create(\"fail\").then(function(param){ console.log(\"3: 성공,\", param); }, function(param){ console.log(\"3: 실패,\", param); }); console.log(\"2: 끝\"); // 1: reject // 2: 끝 // 3: 실패, fail 바로 앞에서 다룬 코드는 성공 기준이며 위 코드는 실패 기준입니다.Promise 처리 흐름은 같습니다. then()의 두 번째 파라미터에 작성한 함수가 실행된다는 점이 다릅니다. create()를 호출하면서 “fail”을 파라미터 값으로 넘겨 줍니다.호출된 create() 함수에서 if 문의 else 블록 reject(param)과 console.log(“1: reject”)를 실행하게 됩니다.물론 reject(param)은 이때 호출되지 않고 소스 코드를 끝까지 실행한 후 되돌아와서 호출 환경이 설정되있을 때 호출됩니다.executer 블록에서 reject()가 호출되면 then()의 두 번째 파라미터에 작성한 함수가 실행됩니다.따라서 콘솔에 “3: 실패, fail”이 출력됩니다. then(): 성공, 실패 핸들러 성공과 실패 핸들러를 정의합니다. Promise.prototype.then(onFulfilled, onRejected) 첫 번째 파라미터에 Promise가 성공 상태가 되었을 때 실행될 핸들러 함수를 작성합니다.두 번째 파라미터에 Promise가 실패 상태가 되었을 때 실행될 핸들러 함수를 작성합니다. executer 블록의 resolve() 와 reject()에서 다수의 파라미터 값을 넘겨주더라도 핸들러 함수에서 첫 번째 파라미터 하나만 받습니다. 따라서 여러 개의 파라미터 값을 넘겨 주려면 resolve()와 reject()의 파라미터에 배열과 같은 형태로 작성해야 합니다. resolve(성공) 와 reject(실패) 핸들러 함수에서 return 문의 작성 여부와 관계없이 현재 실행 중인 Promise 인스턴스를 반환합니다. return 문을 작성하면 return 문의 표현식을 평가하고 그 결과를 [[PromiseValue]]에 undefined를 설정합니다. then() 에서 Promise 인스턴스를 반환하므로 then(one).then(two)와 같이 then()을 연속해서 작성할 수 있습니다. 이때, 첫 번째 then()에서 [[PromiseValue]]에 설정한 값이 두 번째 then(two)의 파라미터인 two에 설정됩니다. 핸들러 함수에서 Promise 인스턴스를 반환하여 연속해서 메서드를 호출할 수 있도록 하고, return 문의 반환 값을 [[PromiseValue]]에 설정하여 다음 then()의 핸들러 함수의 파라미터에 설정합니다. then()12345678910111213141516171819201. function create(){ return new Promise((resolve) =&gt; resolve(100)); }; 2. create().then(() =&gt; console.log(\"1:then\")); 3. create().then((param) =&gt; { console.log(\"2:then,\", param); return param + 50; }); 4. create().then((param) =&gt; { console.log(\"3:then,\", param); return param + 70; }).then((param) =&gt; console.log(\"4:then,\", param)); // 1:then // 2:then, 100 // 3:then, 100 // 4:then, 170 create()가 호출되면 executer 블록의 resolve()를 수행하게 됩니다.하지만 호출받을 resolve 함수가 없으므로 호출 환경이 되었을 때 호출합니다.즉, 소스 코드 끝까지 처리하고 되돌아와 호출합니다.실패가 발생하지 않으면 executer의 파라미터와 블록에 reject를 작성하지 않아도 됩니다. then()의 첫 번째 파라미터에 핸들러 함수를 작성하여 연결합니다. executer 블록에서 resolve 파라미터 값으로 100을 넘겨 주지만 이 코드에서는 사용되지 않습니다. “1:then”을 출력합니다. 두 번째로 create()를 호출하여 Promise 인스턴스를 생성합니다. executer 블록에서 resolve(100)으로 호출하면, then()의 첫 번째 파라미터의 핸들러 함수가 실행되며 100이 param에 설정됩니다.return문의 표현식을 평가한 150을 [[PromiseValue]]에 설정만하고 반환하지 않으며, 실행 중인 Promise 인스턴스를 반환합니다. 세 번째로 create()를 호출하여 Promise 인스턴스를 생성합니다. then()의 첫 번째 파라미터의 핸들러 함수가 호출되면 param 파라미터에 100이 설정됩니다. return 문의 표현식을 평가한 170을 [[PromiseValue]]에 설정하고 실행중인 Promise 인스턴스를 반환합니다.then()에서 Promise 인스턴스를 반환하므로 두 번째 .then() 으로 호출할 수 있습니다.[[PromiseValue]]에 설정된 170이 param 파라미터에 설정되며 “4: then, 170”이 출력됩니다. 코드 실행 순서 정리 : 첫 번째 create() 함수를 호출합니다. Promise 인스턴스를 반환합니다.연결된 then()의 핸들러 함수를 실행하지 않고 아래로 이동합니다. 두 번째 create() 함수를 호출합니다. Promise 인스턴스를 반환합니다.연결된 then()의 핸들러 함수를 실행하지 않고 아래로 이동합니다. 세 번째 create() 함수를 호출합니다. Promise 인스턴스를 반환합니다.연결된 then()의 핸들러 함수를 실행하지 않고 아래로 이동합니다. 더 이상 처리할 코드가 없습니다. 첫 번째의 executer 블록의 resolve()가 호출되며 then()의 핸들러 함수가 실행됩니다.콘솔에 “1:then”이 출력됩니다. 두 번째의 executer 블록의 resolve()가 호출되며 then()의 핸들러 함수가 실행됩니다.콘솔에 “2:then, 100”이 출력됩니다. 세 번째의 executer 블록의 resolve()가 호출되며 then()의 핸들러 함수가 실행됩니다.콘솔에 “3:then, 100”이 출력됩니다. 세 번째의 then()에 연결된 then()의 핸들러 함수가 실행됩니다.콘솔에 “4:then, 170”이 출력됩니다. then().then()과 같이 then()이 연결되어 있으면, 처음 then()의 핸들러 함수를 실행한 후, 두 번째 then()의 함수 코드를 실행합니다. 이때 처음 then()의 return 값이 두 번째 then()함수의 파라미터 값으로 설정됩니다. catch(): 실패 핸들러 실패(reject) 핸들러를 정의합니다. Promise.prototype.catch(onRejected) 파라미터에 Promise가 reject 상태가 되었을 때 실행될 핸들러 함수를 작성합니다.then()의 첫 번째 파라미터에 함수를 작성하고, 두 번째 파라미터는 작성하지 않습니다.대신 then().catch() 형태로 작성하여 then()의 두 번째 파라미터에 작성할 함수를 catch()의 파라미터에 작성합니다. then()은 성공했을 때 실행되며 catch()는 실패했을 때 실행됩니다. catch() 의 핸들러 함수에 파라미터를 하나만 작성할 수 있습니다.executer 블록의 reject() 에서 다수의 파라미터를 넘겨주려면 배열과 같은 형태로 작성해야 합니다. catch()의 핸들러 함수에서 return 문의 작성 여부와 관계없이 현재 실행 중인 Promise 인스턴스를 반환합니다. catch().then()과 같이 catch() 다음에 then()을 연결할 수 있으며, catch()에서 설정한 [[PromiseValue]] 값을 then()의 파라미터 값으로 넘겨줍니다. 123456789101112function create(param){ return new Promise((resolve, reject) =&gt;{ 1. param === \"ok\" ? resolve(param) : reject(param); }); }; 2. create(\"fail\").then((param) =&gt; { console.log(\"성공:\", param); }).catch((param) =&gt; { console.log(\"실패:\", param); }); // 실패 : fail 파라미터로 받은 param 값이 “ok”이면 resolve(param)을 호출하고, 아니면 reject(param)을 호출합니다.“fail”값으로 create()를 호출합니다. 따라서 reject()를 호출하게 되며, catch()의 핸들러 함수가 실행됩니다. create(“fail”)로 호출하여 Promise 인스턴스를 생성합니다.executer 블록에서 reject()가 호출되므로 catch()의 핸들러 함수가 실행됩니다.reject(param)에서 param 값이 핸들러 함수의 파라미터인 param에 설정됩니다.실패만 발생하므로 then()의 핸들러 함수는 실행되지 않고, catch() 핸들러 함수만 실행됩니다. 12345678910111213141516171819202122function create(param){ return new Promise((resolve, reject) =&gt;{ resolve(\"resolve\"); }); }; 1. create().then((param) =&gt; { console.log(\"1:then,\", param); throw \"에러 발생 시킴\"; 2. }).catch((param) =&gt; { console.log(\"2:catch,\", param); 3. }).then((param) =&gt; { console.log(\"3:then,\", param); }).catch((param) =&gt; { console.log(\"4:catch,\", param); }); // 1: then, resolve // 2: catch, 에러 발생 시킴 // 3: then, undefined then()의 핸들러 함수가 실행되면 콘솔에 “1:then, resolve”가 출력됩니다.이어서 throw 문으로 에러를 발생시킵니다. 그러면 then()에 이어서 작성한 catch()핸들러 함수가 실행됩니다. executer 블록에서 reject()를 호출해도 catch()의 핸들러 함수가 실행되지만,then()에서 에러가 발생해도 catch()의 핸들러 함수가 실행됩니다.이때, 앞 then()의 throw문에 작성한 “에러 발생 시킴”이 catch() 핸들러 함수의 param 파라미터에 설정됩니다. 콘솔에 “2:catch, 에러 발생 시킴”이 출력됩니다.핸들러 함수에 return 문을 작성하지 않았으므로 [[PromiseValue]]에 undefined가 설정되며 실행 중인 Promise 인스턴스가 반환됩니다. catch()에서 에러가 발생하지 않으면 then().catch().then().catch() 형태에서 catch()에 연결된 두 번째 then()이 실행됩니다. 만약 에러가 발생하여 두 번째 catch()를 실행하더라도 소스 코드 전체가 종료되지 않습니다. then()이 실행되면 catch()에서 [[PromiseValue]]에 설정한 undefined가 param 파라미터에 설정됩니다.콘솔에 “3:then, undefined”가 출력됩니다. then()에 이어서 catch()가 있지만, then()에서 에러가 발생하지 않았으므로 catch()가 실행되지 않습니다. then()의 핸들러 함수를 실행한 후, 소스 코드 전체가 종료됩니다. resolve(): 성공 상태의 인스턴스 반환 fulfill(성공) 상태의 Promise 인스턴스를 반환합니다. Promise.resolve() 파라미터value, promise, thenable 반환 값파라미터 값에 따라 반환 형태가 다릅니다. 파라미터에 값을 작성하면 성공 상태의 Promise 인스턴스를 생성하여 반환합니다.이어서 then()을 작성하면 then()의 첫 번째 파라미터에 작성한 함수가 호출됩니다.파라미터에 Promise 인스턴스를 지정하면 인스턴스를 성공 상태로 변환하여 반환합니다. 1234567891011121314151. let promiseObj = Promise.resolve( {sports: \"스포츠\", music: \"음악\"} ); 2. promiseObj.then((param) =&gt;{ for (let name in param){ console.log(name, param[name]); } }); 3. Promise.resolve( [\"sports\", \"music\"] ).then((param) =&gt; console.log(param)); // sports 스포츠 // music 음악 // [\"sports\", \"music\"] Promise.resolve()를 호출하면 Promise 인스턴스를 생성하고 Promise를 성공 상태로 설정하여 반환합니다.then()의 핸들러 함수에 파라미터 하나만 작성할 수 있으므로 다 수의 파라미터 값을 넘겨주기 위해 Object 오브젝트로 작성했습니다. 다음은 promiseObj 인스턴스 구조입니다. proto에 첨부된 프로퍼티가 Promise.prototype에 연결된 프로퍼티와 같습니다.이는 new 연산자를 사용하지 않고 Promise.resolve()를 실행해도 Promise 인스턴스를 생성한다는 의미입니다. [[PromiseState]] 값이 “resolve”로 설정되어 있습니다. 따라서 then()의 첫 번째 파라미터의 핸들러 함수가 실행됩니다. Promise.resolve()의 파라미터 값이 [[PromiseValue]]에 설정되었으며 then()의 핸들러 함수의 파라미터에 설정됩니다. PromiseObj의 Promise 인스턴스가 성공 상태이므로 then()의 첫 번째 파라미터 함수가 실행됩니다.이 시점에서 실행되지 않고 소스 코드에 작성된 코드를 끝까지 처리한 후 실행됩니다.핸들러 함수의 param 파라미터에 {sports: “스포츠”, music: “음악”}이 설정됩니다. Promise.resolve() 가 Promise 인스턴스를 생성하여 반환하므로 then()을 연결하여 작성할 수 있습니다.지금 then()의 핸들러 함수를 실행하지 않고, 위에 작성한 then()의 핸들러 함수를 먼저 실행한 후 실행합니다.resolve()파라미터 값인 [“sports”, “music”]이 then()의 핸들러 함수의 param 파라미터에 설정됩니다. 12345671. let oneObj = Promise.resolve( {sports: \"스포츠\"} ); 2. Promise.resolve(oneObj).then((param) =&gt;{ console.log(param); }); // Object {sports: \"스포츠\"} promise.resolve() 파라미터에 promise.resolve()로 생성한 인스턴스를 지정한 형태입니다. Promise 인스턴스를 생성하여 반환합니다. 이때 resolve( )의 파라미터 값이 [[PromiseValue]]에 설정됩니다. Promise.resolve() 파라미터에 앞에서 생성한 Promise 인스턴스를 지정했습니다.then()의 핸들러 함수가 실행되면 oneObj 인스턴스 [[PromiseValue]]에 설정된 값이 핸들러 함수의 param 파라미터에 설정됩니다. 즉, {sports: “스포츠”}가 설정됩니다. thenable let obj = {then(resolve,reject) {…} }와 같이 오브젝트 안에 then()을 작성한 형태를 thenable이라고 합니다. 1234567891. let oneObj = Promise.resolve({ then(resolve){ console.log(\"1: then\"); resolve(\"thenable\"); } }); 2. oneObj.then((value) =&gt; console.log(\"2:\",value)); // 1: then // 2: thenable Promise.resolve()의 파라미터에 Object 오브젝트를 작성하고, 그 안에 then()을 작성했습니다.이를 thenable이라고 합니다.이 시점에서는 Promise 인스턴스만 생성하고 then()을 실행하지 않습니다.소스 코드의 마지막 코드까지 실행한 후 then()을 실행합니다.oneObj에 생성한 인스턴스를 할당한 시점의 [[PromiseState]]값은 “pending”입니다.then()의 resolve(“thenable”)을 호출하기 전까지 “pending”상태 이며 호출하면 “resolved”로 바뀝니다. oneObj 인스턴스에 then()이 포함되어 있으므로 위 코드를 연결하면 oneObj.then().then() 형태가 됩니다.이 형태는 다음과 같은 순서와 방법으로 실행됩니다. oneObj 인스턴스의 then(resolve)가 실행됩니다. 콘솔에 “1:then”을 출력합니다. resolve(“thenable”)을 호출합니다. 이때[[PromiseValue]]에 “thenable”을 설정합니다. oneObj.then().then() 형태에서 두 번째 then()이 호출됩니다. 두 번째 then()의 value 파라미터에 [[PromiseValue]] 값인 “thenable”이 설정됩니다. 콘솔에 “2:thenable”을 출력합니다. 12345678910111213let thenable = { then(resolve, reject){ resolve(\"resolve\"); reject(\"에러\"); } }; 1. let oneObj = Promise.resolve(thenable); 2. oneObj.then( (value) =&gt; console.log(value), (value) =&gt; console.log(\"실행되지 않음\") ); // resolve Object 오브젝트에 then(resolve,reject)를 작성하였으며, resolve() 다음 줄에 reject()를 작성하였습니다. 작성 형태만 보면 resolve()를 호출하고 reject()를 호출할 것으로 보이지만,성공 또는 실패 하나만 발생하므로 먼저 작성한 resolve()만 호출됩니다.반대로 reject(), resolve() 순서로 작성하면 reject()만 호출되고 resolve()는 호출되지 않습니다. Promise.resolve() 파라미터에 thenable 오브젝트를 지정하여 Promise 인스턴스를 생성합니다. 이때 then()은 실행되지 않습니다. oneObj.then()에 두 개의 파라미터를 작성했습니다.첫 번째 파라미터는 resolve()로 호출했을 때 실행되는 함수이고두 번째 파라미터는 reject()로 호출했을 때 실행되는 함수입니다.oneObj 인스턴스에 then()이 있으므로 oneObj.then()은 then().then() 형태가 됩니다.첫 번째 then()에서 resolve(“resolve”)를 호출하면 [[PromiseValue]]에 “resolve”가 설정됩니다.두 번째 then()의 첫 번째 파라미터 함수가 실행되며, value 파라미터에 “resolve”가 설정됩니다.두 번째 파라미터 함수는 reject()를 호출하였을 때 실행되므로 위 코드에서는 실행되지 않습니다. reject(): 실패 상태의 인스턴스 반환 reject(실패) 상태의 Promise 인스턴스를 반환합니다. Promise.reject() 파라미터에 실패 사유를 작성합니다. reject 상태로 변환된 Promise 인스턴스를 반환합니다. 123451. let promiseObj = Promise.reject(\"reject 처리\"); 2. promiseObj.then( (param) =&gt; console.log(param), (param) =&gt; console.log(\"에러:\", param)); // 에러: reject 처리 Promise.reject()를 실행하면 reject 상태의 Promise 인스턴스를 생성하여 반환합니다.파라미터 값이 [[PromiseValue]]에 설정되며, then()의 두 번째 파라미터 함수의 파라미터 값으로 설정됩니다.다음은 promiseObj 인스턴스 구조입니다. Promise 인스턴스의 상태는 “reject”입니다. 따라서 then()의 두 번째 파라미터 함수가 호출됩니다. Promise.reject() 파라미터에 작성한 “reject 처리”가 [[PromiseValue]]에 설정됩니다. promiseObj.then()에 두 개의 파라미터를 작성했습니다. 첫 번째 파라미터 함수는 resolve()로 호출했을 때 실행되고, 두 번째 파라미터 함수는 reject()로 호출했을 때 실행됩니다. 현재 reject 상태이므로 두 번째 파라미터 함수가 실행됩니다. all(): 모두 성공이면 핸들러 실행 파라미터의 모든 Promise 인스턴스가 성공 상태이면 then()의 핸들러 함수를 실행합니다. Promise.all() 파라미터에 이터러블 오브젝트를 작성합니다.이터러블 오브젝트에 작성한 순서로 Promise 인스턴스를 생성합니다. 생성한 모든 Promise 인스턴스가 성공 상태이면, then()의 첫 번째 파라미터 함수를 실행합니다.Promise 인스턴스가 하나라도 실패한다면, then()의 핸들러 함수를 실행하지 않습니다. executer 블록에서 resolve()를 호출한 순서가 아닌 Promise 인스턴스를 생성한 순서로 파라미터 값을 배열에 첨부하여 [[PromiseValue]]에 설정합니다. then()의 첫 번째 파라미터 함수에서 파라미터 값으로 사용합니다. 1234567891011121314151. function order(mili) { return new Promise((resolve) =&gt; { setTimeout(() =&gt; { console.log(\"실행\", mili); resolve(mili); }, mili); }); }; 2. Promise.all([order(300), order(200), order(100)]) .then((milis) =&gt; console.log(\"호출\", milis)); // 실행 100 // 실행 200 // 실행 300 // 호출 [300, 200, 100] order(mili)가 호출되면 Promise 인스턴스를 생성하면서 setTimeout()을 실행합니다.파라미터로 받은 mili 값을 지연 시간으로 사용합니다. 지연 시간이 경과한 후에 setTimeout의 콜백 함수가 실행됩니다. order()를 여러 번 호출했을 때, 호출한 순서가 아닌 mili 값에 따라 콜백 함수가 실행되므로 실행 순서가 달라질 수 있습니다. 즉, 콜백 함수에서 resolve() 호출 순서가 바뀔 수 있습니다. Promise.all()의 파라미터에 order() 호출을 배열로 작성했습니다.따라서 첫 번째 엘리먼트부터 차례로 order() 함수를 호출하게 됩니다. 호출된 order() 함수에서 setTimeout()을 실행하며, 파라미터로 넘겨준 값을 지연 시간으로 사용합니다.함수 호출에는 시간이 걸리지 않아 (0.1초 안에) 세 개의 order() 300,200,100 순서로 호출됩니다.하지만 setTimeout()의 콜백 함수는 지연 시간으로 인해 100, 200, 300 순서로 실행되게 됩니다. setTimeout()에서 지연 시간이 경과하면 콜백 함수에서 resolve(mili)를 호출하게 되며then()의 핸들러 함수가 실행됩니다. 이때, Promise.all()은 resolve(mili)를 호출할 때 마다 then()의 핸들러 함수가 실행되지 않습니다. Promise.all()의 파라미터에서 order() 호출로 생성한 Promise 인스턴스가 모두 성공적으로 처리되었을 때 한 번만 호출합니다.Promise.all()에서 order()함수를 총 세 번 호출하지만, 생성된 인스턴스가 모두 성공적으로 처리돼야 then()의 핸들러 함수를 실행하는 것입니다. 실행 결과 “실행 100”, “실행 200”, “실행 300”은 setTimeout의 콜백 함수가 실행한 출력 값이고,호출 [300, 200, 100]은 then()의 핸들러 함수에서 출력한 값입니다. race(): 처음 한 번만 핸들러 호출 처음 한 번만 then()의 핸들러 함수를 실행합니다. Promise.race() 파라미터에 이터러블 오브젝트를 작성합니다. 이터러블 오브젝트에 작성한 순서로 Promise 인스턴스를 생성합니다. 처음 한 번만 Promise 인스턴스 성공과 실패에 따라 then()의 핸들러 함수를 호출하고, 그 다음 부터는 호출하지 않습니다. 12345678910111213141516function order(mili) { return new Promise((resolve, reject) =&gt; { setTimeout(() =&gt; { console.log(mili); resolve(mili); }, mili); }); }; 1. Promise.race([order(300), order(200), order(100)]) .then((milis) =&gt; console.log(\"then:\", milis), (error) =&gt; console.log(error)); // 100 // then: 100 // 200 // 300 Promise.race()에서 order(300), order(200), order(100) 순서로 order() 함수를 호출합니다.하지만 Promise.race()는 처음 한 번만 then()의 핸들러 함수가 실행되므로order(200), order(100)의 핸들러 함수는 실행되지 않습니다.","link":"/2020/04/14/Promise%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"Set 오브젝트 -ECMAScript","text":"Set 오브젝트는 Map 오브젝트와 비슷하지만 [key, value]가 아닌 [value]만 작성하는 점이 다릅니다. Map 오브젝트에 Array 기능을 추가한 오브젝트 입니다. Set 오브젝트 개요 new Set(): Set 인스턴스 생성 add(): value 추가 has(): value 존재 여부 entries(): 이터레이터 오브젝트 생성 values(): value 반환 이터레이터 오브젝트 생성 keys(): key 반환 이터레이터 오브젝트 생성 forEach(): 엘리먼트마다 콜백 함수 호출 delete(): 엘리먼트 삭제 clear(): 모든 value 지움 Symbol.iterator: 이터레이터 오브젝트 생성 개요 Set 오브젝트는 Array 오브젝트와 비슷하지만, Array 오브젝트에 없는 특성이 있습니다.Set 오브젝트는 [value1, value2, ···]와 같이 값을 배열로 작성합니다.Set 오브젝트에 추가한 순서로 인덱스를 부여하여 저장합니다. 따라서 추가한 순서대로 읽히는 것을 보장해 줍니다. Set 오브젝트는 key 개념을 갖고 있으며 value1, value2가 값이면서 키 역활도 합니다.역활을 하는 것이지 key가 별도로 존재하는 것은 아닙니다.이런 특징으로 인해 value 값이 같으면 나중에 추가한 값이 추가되지 않습니다.이 점이 Array 오브젝트와 다르며 Map 오브젝트와 같습니다. [value1, value2]에 string, number, symbol 등의 원시값(프리미티브) 데이터 타입을 작성할 수 있으며, Object, Function과 같은 오브젝트도 작성할 수 있습니다. null 값은 undefined로 취급됩니다. Array 오브젝트에서 엘리먼트를 삭제하려면 배열을 반복하면서 값의 일치 여부를 비교해야 합니다.같은 값이 여러 개 있을 수 있으므로 모두 삭제하려면 계속해서 비교하며 삭제가 진행됩니다.반면 Set 오브젝트는 value 값이 같은 것이 없으므로 삭제를 한 번만 실행하면 됩니다. new Set(): Set 인스턴스 생성 Set 인스턴스를 생성하여 반환합니다. new Set() 선택적 파라미터파라미터는 선택으로 이터러블 오브젝트를 작성하고, 그 안에 value를 0개 이상 작성합니다. Set()123456789101112const setObj = new Set(); 1. const newSet = new Set([1, 2, 1, 2, \"스포츠\"]); 2. console.log(newSet.size); 3. for (let element of newSet){ console.log(element); }; // 3 // 1 // 2 // 스포츠 Set( ) 파라미터에 value를 지정하지 않고 인스턴스를 생성할 수 있습니다. 추후에 Set 오브젝트의 메서드를 이용해서 value를 추가해줄 수 있습니다. Set( ) 파라미터에 이터러블 오브젝트를 작성하고, 그 안에 value를 작성한 형태입니다.Set 인스턴스에 저장할 때 파라미터 값이 key 역활을 하면서 value로 저장됩니다.Set 인스턴스에서 value의 존재 여부를 체크하고 존재하지 않으면 추가, 존재하면 추가하지 않습니다. size 프로퍼티는 Set 인스턴스의 value 수를 반환합니다. Set() 파라미터에 5개의 값을 작성했는데, 실행 결과 3이 출력됩니다. 이는 같은 파라미터값은 뒤에 작성한 값이 추가되지 않기 때문입니다. for-of 문으로 newSet 인스턴스를 반복할 수 있습니다. newSet 인스턴스의 value가 for-of 문의 element에 설정됩니다. add(): value 추가 Set 인스턴스 끝에 value 값을 추가합니다. Set.prototype.add() 파라미터에 Set 인스턴스에 추가할 String, 오브젝트 등의 value를 지정합니다. 값을 추가 한 후 Set 인스턴스를 반환합니다. 따라서 메서드 체인 방법으로 Set 인스턴스의 메서드를 호출할 수 있습니다. add()123456789101. const newSet = new Set(); newSet.add(\"축구\").add(\"농구\"); 2. newSet.add(\"축구\"); 3. for (let element of newSet) { console.log(element); }; // 축구 // 농구 Set 인스턴스를 생성하여 newSet에 할당합니다. add() 파라미터에 “축구”를 지정하여 실행하면, Set 인스턴스에 “축구”가 추가되며 인덱스 값은 0 입니다. add()를 실행한 후 newSet 인스턴스를 반환하므로 add()를 연결하여 호출할 수 있습니다. “농구”가 추가되고 인덱스 값은 1 입니다. add() 파라미터에 지정한 “축구”가 Set 인스턴스에 존재하므로 “축구”가 추가되지 않습니다. for-of 문으로 newSet 인스턴스를 반복하면, newSet 인스턴스의 value가 for-of 문의 element에 설정됩니다.newSet 인스턴스에 추가된 순서대로 전개됩니다. has(): value 존재 여부 Set 인스턴스에서 value의 존재 여부를 반환합니다. Set.prototype.has() 파라미터에 존재 여부를 체크할 값을 지정합니다. Set 인스턴스에 값이 존재하면 true, 아니면 false를 반환합니다. has()12345const newSet = new Set(); newSet.add(\"sports\"); console.log(newSet.has(\"sports\")); // true Set 인스턴스를 생성하여 newSet 변수에 할당했습니다. add()를 실행하면 파라미터에 지정한 “sports”가 newSet 인스턴스에 추가됩니다. newSet 인스턴스에 has() 파라미터에 지정한 “sports”가 존재합니다. true를 반환합니다. entries(): 이터레이터 오브젝트 생성 이터레이터 오브젝트를 생성하여 반환합니다. Set.prototype.entries() 생성한 이터레이터 오브젝트의 next()를 호출하면 Set 인스턴스에 작성된 순서로 [key, value]를 반환합니다.Set 인스턴스에 key를 저장하지 않지만 value를 key에 설정하여 반환합니다. entries()12345671. const newSet = new Set([\"one\", () =&gt; {}]); let iteratorObj = newSet.entries(); 2. console.log(iteratorObj.next()); 3. console.log(iteratorObj.next()); // Object {value: Array[2], done: false} // Object {value: Array[2], done: false} 두 개의 value를 가진 Set 인스턴스를 생성합니다. 하나는 “one”이고 또 하나는 function(){}입니다. entries()를 호출하면 이터레이터 오브젝트를 생성하여 반환합니다. 첫 번째 value인 “one”을 반환하며 실행 결과에 {value: Array[2], done: false}가 출력됩니다.value를 반환하므로 {value: “one”, done: false} 형태로 반환되어야 하지만, value를 key에 설정하여 반환하므로 {value: Array[2]} 형태가 됩니다. Array[2]를 펼치면 0:”one”, 1:”one”이 표시됩니다. 마찬가지로 value인 function(){}을 반환하며 {value: Array[2], done: false} 형태입니다.Array[2]를 펼치면 0: function(){}, 1: function(){}이 표시됩니다. values(): value 반환 이터레이터 오브젝트 생성 value 값을 반환하는 이터레이터 오브젝트를 생성하여 반환합니다. Set.prototype.value 생성한 이터레이터 오브젝트의 next()를 호출하면 Set 인스턴스에 작성된 순서로 value를 반환합니다. values()12345671. const newSet = new Set([\"one\", () =&gt; {}]); let iteratorObj = newSet.values(); 2. console.log(iteratorObj.next()); 3. console.log(iteratorObj.next()); // Object {value: \"one\", done: false} // Object {value: function, done: false} 두 개의 value를 가진 Set 인스턴스를 생성합니다. 하나는 “one” 또 하나는 function(){}입니다.인스턴스의 values()를 호출하면 value를 반환하는 이터레이터 오브젝트를 생성하여 반환합니다. 첫 번째 value인 “one”이 대상이며 {value: “one”, done: false}를 반환합니다.etntries() 메서드가 {value: Array[2]}를 반환하는 것과 차이점 입니다. 두 번째 value인 function(){}이 대상이며 {value: function(){}, done: false}를 반환합니다. keys(): key 반환 이터레이터 오브젝트 생성 key 값을 반환하는 이터레이터 오브젝트를 생성하여 반환합니다. Set.prototype.keys() 생성한 이터레이터 오브젝트의 next()를 호출하면 Set 인스턴스에 작성된 순서로 key 값을 반환합니다.Set 인스턴스에 value만 설정되므로 value를 key로 하여 반환합니다.그다지 의미가 없지만 같은 이름의 Map 인스턴스 메서드와 반환 구조를 맞추기 위한 것으로 생각됩니다. keys()1234567const newSet = new Set([\"one\", () =&gt; {}]); let iteratorObj = newSet.keys(); console.log(iteratorObj.next()); console.log(iteratorObj.next()); // Object {value: \"one\", done: false} // Object {value: function(){}, done: false} 앞의 예제들과 주어진 값은 같습니다.keys()를 호출하면 value를 key로 하여 반환하는 이터레이터 오브젝트를 생성하여 반환합니다.반환되는 프로퍼티 이름이 key가 아닌 value입니다. forEach(): 엘리먼트마다 콜백 함수 호출 Set 인스턴스에 작성된 순서로 반복하면서 콜백 함수를 호출합니다. Set.prototype.forEach() 파라미터Function (반복할 때 마다 호출할 callback 함수)Object (선택) callback 함수에서 this로 참조할 오브젝트 forEach()를 호출할 때마다 세 개의 파라미터를 넘겨줍니다.첫 번째 파라미터가 value이고 두 번째 파라미터가 key입니다. 세 번째 파라미터는 실행 중인 Set 인스턴스 입니다.value 값과 key 값이 같습니다. forEach()1234567const newSet = new Set([\"one\", \"two\"]); newSet.forEach(function(value, key, obj) { console.log(value, this.member); }, {member: 10}); // one : 10 // two : 10 forEach()를 처음 호출하면 콜백 함수의 value 와 key 파라미터에 “one”이 설정되고 obj 파라미터에 newSet 인스턴스가 설정됩니다. 콜백 함수에서 this로 forEach() 두 번째 파라미터에 지정한 Object 오브젝트를 참조합니다. 화살표 함수로 콜백 함수를 작성하면 콜백 함수 블록에서 this가 window 오브젝트를 참조하므로 이 코드와 같이 function 키워드로 작성해야 합니다. delete(): 엘리먼트 삭제 Set 인스턴스에서 value 값이 같은 엘리먼트를 삭제합니다. Set.prototype.delete() 파라미터삭제할 value 반환 값삭제 성공시 true, 아니면 false 반환 delete()1234const newSet = new Set([\"one\"]); console.log(newSet.delete(\"one\")); // true newSet 인스턴스에서 delete() 파라미터에 지정한 “one” 과 같은 value가 있으면 엘리먼트를 삭제합니다.삭제되므로 true를 반환합니다. clear(): 모든 value 지움 Set 인스턴스의 모든 value()를 지웁니다. Set.prototype.clear() clear()1234const newSet = new Set([\"one\", \"two\"]); newSet.clear(); console.log(newSet.size); // 0 clear()를 실행하면 newSet 인스턴스에서 엘리먼트를 모두 지우므로 size 프로퍼티 값이 0으로 출력됩니다. 인스턴스 자체를 지우는 것이 아니라 엘리먼트를 모두 지우는 것 이므로 다시 value를 추가해줄 수 있습니다. Symbol.iterator: 이터레이터 오브젝트 생성 이터레이터 오브젝트를 생성하여 반환합니다. Set.prototype[Symbol.iterator] 생성한 이터레이터 오브젝트의 next()를 호출하면, Set 인스턴스에 작성된 순서로 value를 반환합니다. Symbol.iterator12345671. const newSet = new Set([1, \"스포츠\"]); let iteratorObj = newSet[Symbol.iterator](); 2. console.log(iteratorObj.next()); console.log(iteratorObj.next()); // Object {value: 1, done: false} // Object {value: \"스포츠\", done: false} newSet 인스턴스를 생성하고 [1, “스포츠”]를 할당합니다.newSet 인스턴스의 [Symbol.iterator] ()를 호출하면 이터레이터 오브젝트를 생성하여 반환합니다. next()를 호출할 때마다 newSet 인스턴스의 value값을 {value: 1, done: false} 형태의 value에 설정하여 반환합니다.","link":"/2020/04/13/Set%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"Spread 연산자 -ECMAScript","text":"개요스프레드(Spread) 연산자는 이터러블 오브젝트의 엘리먼트를 하나씩 분리하여 전개합니다. 전개한 결과를 변수에 할당하거나 호출하는 함수의 파라미터 값으로 사용할 수 있습니다. 기본형 […iterableObject] function에서 function(…iterableObject); array에서 […iterableObj, ‘4’, ‘five’, 6]; object 에서 let objClone = { …obj };//ECMAScript 2018에서 추가되었습니다. spread 연산자는 “…”을 작성하고 뒤에 이터러블 오브젝트를 작성합니다. 1. 배열[] 대괄호 안에 spread 연산자로 배열을 작성한 형태. 123456789101112131415let one = [11, 12]; let two = [21, 22]; let spreadObj = [51, ...one, 52, ...two]; 1. console.log(spreadObj); /* 0: 51 1: 11 2: 12 3: 52 4: 21 5: 22 = [51, 11, 12, 52, 21, 22] */ 2. console.log(spreadObj.length); // 6 one 배열의 엘리멘트 [11, 12]에서 11과 12가 분리된 후,spreadObj = [51, …one, 52, …two];에 …one위치에 설정됩니다.two 배열역시 같은방식으로 spreadObj에 설정되고[51, 11, 12, 52, 21, 22] 형태로 spreadObj에 할당됩니다. spreadObj의 length 값은 6이 됩니다.(one 과 two 배열의 엘리멘트가 분리되어 할당되었기 때문)엘리멘트가 분리되지 않고 할당되었다면 length 값은 4가 돼야 합니다. 2. 문자열[] 대괄호 안에 spread 연산자로 문자열을 작성한 형태. 1234567891011let spreadObj = [...\"music\"]; console.log(spreadObj); /* 0: \"m\" 1: \"u\" 2: \"s\" 3: \"i\" 4: \"c\" = [\"m\", \"u\", \"s\", \"i\", \"c\"] */ console.log(spreadObj.length); // 5 3. 함수 파라미터호출하는 함수의 파라미터 값을 spread 연산자로 작성하면,함수를 호출하기 전에 파라미터 값을 분리, 전개합니다.호출받는 함수의 파라미터에 이름을 작성하면 각 엘리먼트 값이 파라미터 이름에 설정됩니다. 1234567891011const values = [10, 20, 30]; get(...values); // 10, 20, 30 으로 각각 분리됩니다. function get(one, two, three){ /* 호출받은 함수 파라미터에 one: 10 two: 20 three: 30 이 설정됩니다. */ console.log( one + two + three); // 60 }; 함수의 파라미터 값이 분리된 형태를 spread 파라미터 라고 합니다. rest 파라미터function(…rest)와 같이 함수 파라미터에 spread연산자로 파라미터를 작성한 형태를 rest파라미터 라고 합니다. function(param, paramN, …rest); 호출하는 함수의 파라미터에 3개의 파라미터 값을 작성하고호출받는 함수의 파라미터에 파라미터 이름을 하나만 작성하면나머지 2개의 파라미터 값이 설정되지 않습니다. ...rest 미사용1234let get = (one) =&gt; { console.log(one); } get(...[1, 2, 3]); // 1 get(…[1, 2, 3])이 get(1, 2, 3)형태로 전개되고파라미터 one에 1 값이 설정됨.호출받는 get()함수가 화살표 함수이므로호출한 get(…[1, 2, 3]) 함수에서 보낸 파라미터가 arguments에 설정되지 않음.따라서 [1, 2, 3]에서 2,3을 받지 못하게 됩니다. ...rest 사용시12345let get = (...numRest) =&gt; { console.log(numRest); // [1, 2, 3] console.log(Array.isArray(numRest));// 배열 인지 확인해주는 메서드 true } get(...[1, 2, 3]); rest 파라미터는 get(1, 2, 3) 형태로 호출된 파라미터 값을 배열의 엘리멘트로 설정합니다.(함수 안에서 numRest에 설정된 값을 배열로 사용할 수 있습니다.) 한개의 값만 설정 하고 rest 사용시12345let get = (one, ...rest) =&gt; { console.log(one); // 1 console.log(rest); // [2, 3] } get(...[1, 2, 3]); get(1, 2, 3) 형태로 호출되어 파라미터 one에 1값 설정됨.나머지 2,3은 rest파라미터에 [2, 3]형태로 설정됩니다. spread와 rest 파라미터 구분(...)형태는 같지만 기능이 다르므로 구분해야 합니다. spread 파라미터는호출하는 함수의 파라미터에 사용하며 Array( 배열[] )를 엘리먼트 단위로 전개합니다. rest 파라미터는호출받는 함수의 파라미터에 사용합니다.호출하는 함수의 파라미터 순서에 맞춰 호출받는 파라미터에 값을 설정합니다.설정되지 못하고 남은 파라미터 값은 배열의 엘리먼트로 설정합니다. spread는 배열을 엘리먼트로 분리,전개. rest는 전개된 엘리먼트를 다시 배열에 설정. Array-like (유사배열)배열은 아니지만 배열처럼 사용할 수 있는 Object를 Array-like(혹은 유사배열 객체)라고 합니다. 배열은 인덱스(index)를 갖고 있어 인덱스 순서대로 읽을 수 있으며,인덱스 번호를 이용해 엘리먼트 값을 수정, 삭제할 수 있습니다. Object의 {key:values}형태를 배열도 object라는 점을 이용한Array(배열) 처럼 사용 하는 트릭입니다. Object의 프로퍼티 “key” 를 Array의 index 처럼 사용하고value[key] 형태로 프로퍼티를 읽어올 수 있습니다. Object의 value(프로퍼티 값)은 Array의 엘리먼트 처럼 사용합니다. 123456789101112131415161718192021222324252627282930let values = { // {key:value} 0: \"zero\", 1: \"one\", 2: \"two\", // {key:value} 형태에 맞추어 object전체 수 length 값을 작성합니다. // 이 형태가 Array-like (유사 배열)입니다. length: 3}; for (var key in values){ // for-in console.log(key, ':', values[key]); }; for (var k = 0; k &lt; values.length; k++){ // for() console.log(values[k]); }; /*실행결과 -------------- for-in 0 : zero 1 : one 2 : two length : 3 -------------- for() zero one two */ for-in 문은 Object 오브젝트를 전개할 때 사용합니다.for-in 문으로 valuse 오브젝트를 전개하면 length 프로퍼티도 같이 전개됩니다.즉, for-in문으로 Array-like를 전개한다면 length 프로퍼티를 제외시키는 처리가 필요합니다. 배열을 전개할 때는 주로 for()문을 사용합니다.for()문으로 values 오브젝트를 전개해도 length프로퍼티가 전개되지 않습니다. 유사배열은 배열 메서드를 사용할 수 없습니다.일반적으로 유사배열은 배열이 아니므로 배열 메서드를 사용할 수 없습니다.이럴 때 메서드를 빌려와 유사배열에도 배열 메서드를 사용할 수 있는 방법은 apply, call, form등 을 이용해 Array 메소드를 가져와 쓰는 경우가 있습니다.","link":"/2020/03/20/Spread%20%EC%97%B0%EC%82%B0%EC%9E%90%20-ECMAScript/"},{"title":"Strict mode -ECMAScript","text":"Strict modestrict mode는JavaScript 코드가 “엄격 모드”에서 실행되도록 정의합니다. “strict mode”지시문은 ECMAScript 버전 5에서 새로 추가되었습니다. IE9 이하를 제외한 모든 최신 브라우저는 strict mode를 지원합니다. 가끔 엄격하지 않은 기본값을“느슨한 모드(sloppy mode)”라고 부르기도 합니다.공식적인 용어는 아니지만 혹시 모르니 알아두세요. &quot;strict mode&quot;지시문은 script 나 function의 시작 부분에서만 인식됩니다. 전체 스크립트 적용 구문 12//스크립트 파일 첫번째 줄 \"use strict\"; function에 적용하는 구문123function strict() { // 함수-레벨 strict mode 문법 \"use strict\"; 1. strict mode를 사용하면 선언되지 않은 변수를 사용할 수 없습니다.1234567\"use strict\"; myFunction(); function myFunction() { x = 3.14; // x를 선언해 주지 않았기 때문에 오류가 발생합니다. } y= 3; // y역시 선언되지 않았기에 오류가 발생합니다. strict mode는 이전에 허용 된 “잘못된 구문”을 실제 오류로 변경합니다. 또한 선언되지 않은 변수를 사용하지 못하게하는 것과 같이더 깨끗한 코드를 작성하는 데 도움이됩니다.“strict mode”는 문자열이므로 IE 9는 이해하지 않아도 오류를 발생시키지 않습니다. 예를 들어,일반적인 JavaScript에서 변수 이름을 잘못 입력하면 새로운 전역 변수가 만들어집니다.strict mode에서는 실수로 전역 변수를 만들 수 없습니다. 2. NaN 은 쓸 수 없는 전역 변수입니다.NaN 에 할당하는 일반적인 코드는 아무 것도 하지 않습니다.개발자도 아무런 실패 피드백을 받지 않습니다. 엄격 모드에서 NaN 에 할당하는 것은 예외를 발생시킵니다.일반 코드에서 조용히 넘어가는 모든 실패에 대해 (쓸 수 없는 전역 또는 프로퍼티에 할당, getter-only 프로퍼티에 할당, 확장 불가 객체에 새 프로퍼티 할당) 엄격 모드에서는 예외를 발생시킵니다. 12345678910111213141516171819\"use strict\"; // 쓸 수 없는 프로퍼티에 할당 var undefined = 5; // TypeError 발생 var Infinity = 5; // TypeError 발생 // 쓸 수 없는 프로퍼티에 할당 var obj1 = {}; Object.defineProperty(obj1, \"x\", { value: 42, writable: false }); obj1.x = 9; // TypeError 발생 // getter-only 프로퍼티에 할당 var obj2 = { get x() { return 17; } }; obj2.x = 5; // TypeError 발생 // 확장 불가 객체에 새 프로퍼티 할당 var fixed = {}; Object.preventExtensions(fixed); fixed.newProp = \"ohai\"; // TypeError 발생 3. 엄격 모드는 삭제할 수 없는 프로퍼티를 삭제하려할 때 예외를 발생시킵니다. (시도가 어떤 효과도 없을 때).12\"use strict\"; delete Object.prototype; // TypeError 발생 4. 또한 function 삭제도 허용하지 않습니다.123\"use strict\"; function x(p1, p2) {}; delete x; // error 5. 엄격모드는 유니크한 함수 파라미터 이름을 요구합니다. 일반 코드에서는 마지막으로 중복된 인수가 이전에 지정된 인수를 숨깁니다. 이러한 이전의 인수들은 arguments[i] 를 통해 여전히 남아 있을 수 있으므로, 완전히 접근 불가한 것이 아닙니다. 여전히, 이런 숨김 처리는 이치에 맞지 않으며 원했던 것이 아닐 수 있습니다(예를 들면 오타를 숨길 수도 있습니다). 따라서 엄격 모드에서는 종복 인수명은 구문 에러입니다.예시112\"use strict\"; function x(p1, p1) {}; // !!! 구문 에러 예시21234function sum(a, a, c){ // !!! 구문 에러 \"use strict\"; return a + b + c; // 코드가 실행되면 잘못된 것임 } 6. ECMAScript 5 에서의 엄격 모드는 8진수 구문을 금지합니다.8진수 구문은 ES5의 문법이 아니지만,모든 브라우저에서 앞에 0을 붙여 지원됩니다(0644 === 420 와 “045” === “%”). ECMAScript 2015 에서는 접두사 &quot;0o&quot;를 붙여 8진수를 지원합니다. 1var a = 0o10; // ES6: 8진수 초보 개발자들은 가끔 앞에 붙은 0 이 무의미하다고 생각하여, 이를 정렬용으로 사용합니다 — 하지만 이는 숫자의 의미를 바꿔버립니다.이 8진수 문법은 거의 무용하며 잘못 사용될 수 있으므로 엄격모드에서 이 구문은 에러입니다. 1234\"use strict\"; var sum = 015 + // !!! 구문 에러 197 + 142; 7. ECMAScript 6 의 엄격모드는 primitive 값에 프로퍼티를 설정하는 것을 금지합니다. 엄격모드가 아닐 때에는 프로퍼티 설정이 간단하게 무시되지만(no-op), 엄격모드에서는 TypeError 를 발생시킵니다.1234567(function() { \"use strict\"; false.true = \"\"; // TypeError (14).sailing = \"home\"; // TypeError \"with\".you = \"far away\"; // TypeError })(); primitive: 원시값 또는 원시 자료형객체도 아니고 메서드도 아닌 데이터입니다.string, number, bigint, boolean, null, undefined, symbol7가지 원시 자료형이 존재 합니다. 모든 원시 값은 불변합니다. 즉, 변형할 수 없습니다. 원시값 자체와, 원시값을 할당한 변수를 혼동하지 않는 것이 중요합니다. 변수는 새로운 값을 다시 할당할 수 있지만, 이미 생성한 원시값은 객체, 배열, 함수와는 달리 변형할 수 없습니다. 원시값 예시1234567891011121314// 문자열 메서드는 문자열을 변형하지 않음 var bar = \"baz\"; console.log(bar); // baz bar.toUpperCase(); console.log(bar); // baz // 배열 메소드는 배열을 변형함 var foo = []; console.log(foo); // [] foo.push(\"plugh\"); console.log(foo); // [\"plugh\"] // 할당은 원시 값에 새로운 값을 부여 (변형이 아님) bar = bar.toUpperCase(); // BAZ 원시 값을 교체할 수는 있지만, 직접 변형할 수는 없습니다. 원시형 코드 실행 과정1234567891011121314151617181920// 원시값 let foo = 5; // 원시값을 변경해야 하는 함수 정의 function addTwo(num) { num += 2; } // 같은 작업을 시도하는 다른 함수 function addTwo_v2(foo) { foo += 2; } // 원시값을 인수로 전달해 첫 번째 함수를 호출 addTwo(foo); // 현재 원시값 반환 console.log(foo); // 5 // 두 번째 함수로 다시 시도 addTwo_v2(foo); console.log(foo); // 5 5 대신 7 일 것이라고 예상하였나요?그렇다면, 이 코드의 실행 과정을 살펴보세요. addTwo 와 addTwo_v2 함수 호출을 위해, JavaScript는 식별자 foo 의 값을 찾습니다. 이는 인스턴스화된 첫 번째 구문의 변수를 올바르게 찾습니다. 찾은 다음, JavaScript는 인수를 함수의 매개변수로서 전달합니다. 함수의 본문 내 구문들을 실행하기 전에, JavaScript는 원래 전달된 인수(원시 값)를 복사해 로컬 복사본을 생성합니다. 이러한 복사본은 함수의 스코프 내에서만 존재하며, 함수 정의 내에 지정한 식별자를 통해 접근가능합니다(addTwo 의 num, addTwo_v2 의 foo). 그 후, 함수의 구문들이 실행됩니다.4-1. 첫 번째 함수내에서, 로컬 num 인수가 생성되었습니다. 이 값을 2 증가시키는 것이며, 원래 foo 의 값이 아닙니다! 4-2. 두 번째 함수내에서, 로컬 foo 인수가 생성되었습니다. 이 값을 2 증가시키는 것이며, 원래(외부) foo 의 값이 아닙니다! 또한, 이 경우에서, 외부 foo 변수에는 어떤 방법으로든 접근할 수 없습니다. 이는 자바스크립트의 어휘적 유효 범위(lexical scoping)와 결과 변수 섀도잉 때문입니다. 로컬 foo 는 외부 foo 를 숨깁니다. 결과적으로, 우리 함수들 내부의 모든 변경은 그 복사본으로 작업하였기 때문에, 원본 foo 에 전혀 영향을 주지 않았습니다. 이것이 원시값이 변하지 않는 이유입니다. 원시값에 직접 작업하지 않으므로, 원본을 건드리지 않고 복사본 가져와 계속 작업을 합니다. 8. function의 this키워드는 엄격모드에서 다르게 작동합니다.this 키워드는 함수를 호출 한 객체를 나타냅니다.객체를 지정하지 않으면 엄격 모드의 function은 undefined로 반환됩니다. 12345\"use strict\"; function myFunction() { alert(this); // will alert \"undefined\" } myFunction();","link":"/2020/03/16/Strict%20mode%20-ECMAScript/"},{"title":"String(문자) 객체 -JavaScript","text":"문자 객체 메서드 및 속성 종류 설명 charAt(index) 문자열에서 인덱스 번호에 해당하는 문자를 반환 indexOf(“찾을 문자”) 문자열 왼쪽부터 찾을 문자와 일치하는 문자를 찾아 최초로 일치하는 문자의 인덱스 번호를 반환 lastindexOf(“찾을 문자”) 문자열 오른쪽부터 찾을 문자와 일치하는 문자를 찾아 최초로 일치하는 문자의 인덱스 번호를 반환 (만일 찾을 문자가 없으면 -1을 반환) match(“찾을 문자”) 문자열 왼쪽부터 찾을 문자와 일치하는 문자를 찾아 최초로 찾은 문자를 반환 (찾는 문자가 없으면 null 반환) replace(“바꿀 문자”,”새 문자”) 문자열 왼쪽부터 바꿀 문자와 일치하는 문자를 찾아 최초로 찾은 문자를 치환 search(“찾을 문자”) 문자열 왼쪽부터 찾을 문자와 일치하는 문자를 찾아 최초로 일치하는 인덱스 번호 반환 slice(a,b) a번째 까지 문자를 자르고 b번째 이후에 문자를 자른후 남은 문자를 반환 substring(a,b) a 인덱스부터 b 인덱스 이전 구간의 문자를 반환 substr(a,문자 갯수) 문자열에 a인덱스 부터 지정된 문자 개수만큼 문자열을 반환 split(“문자”) 지정한 문자를 기준으로 문자 데이터를 나누어 배열에 저장하여 반환 toLowerCase() 문자열에서 영문 대문자를 모두 소문자로 바꿉니다. toUpperCase() 문자열에서 영문 소문자를 모두 대문자로 바꿉니다. length 문자열에서 문자의 총 개수를 반환합니다. concat(“새로운 문자”) 문자열에 새로운 문자열을 결합합니다. charCodeAt(“찾을 문자”) 찾을 문자의 아스키 코드 값을 반환 fromCartCode(아스키 코드 값) 아스키 코드 값에 해당하는 문자를 반환 trim() 문자의 앞 또는 뒤에 공백 문자열을 삭제합니다. 사용 예제 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849var t=\"Hello Thank you good luck to you\"; document.write(t.charAt(16),\"&lt;br /&gt;\"); // 인덱스 16에 저장된 문자를 불러옵니다 (g) document.write(t.indexOf(\"you\"),\"&lt;br /&gt;\"); // 문자열 왼쪽부터 최초로 발견된 \"you\"의 인덱스 값을 반환 (12) document.write(t.indexOf(\"you\",16),\"&lt;br /&gt;\"); // 문자열 인덱스 16 위치부터 최초로 발견된 \"you\"의 인덱스 값 반환 (29) document.write(t.lastIndexOf(\"you\"),\"&lt;br /&gt;\"); // 문자열 오른쪽 부터 왼쪽 방향으로 최초로 발견된 \"you\"의 인덱스 값 반환 (29) document.write(t.lastIndexOf(\"you\",25),\"&lt;br /&gt;\"); // 문자열 인덱스 25부터 왼쪽 방향으로 최초로 발견된 \"you\"의 인덱스 값 반환 (12) document.write(t.match(\"luck\"),\"&lt;br /&gt;\"); // 문자열 왼쪽부터 최초로 발견된 \"luck\"과 일치하는 문자를 찾아 반환 (luck) document.write(t.search(\"you\"),\"&lt;br /&gt;\"); // 문자열 왼쪽부터 최초로 발견된 \"you\"의 인덱스 값 반환 (luck) document.write(t.substr(21,4),\"&lt;br /&gt;\"); // 문자열 인덱스 21부터 네 글자를 가져옵니다 (luck) document.write(t.substring(6,12),\"&lt;br /&gt;\"); // 문자열 인덱스 6부터 12 이전까지 문자를 가져옵니다. (Thank_) document.write(t.replace(\"you\",\"me\"),\"&lt;br /&gt;\"); // 문자열 왼쪽부터 최초에 발견된 \"you\"를 \"me\"로 치환 (Hello Thank me good luck to you) document.write(t.toLowerCase(),\"&lt;br /&gt;\"); // 문자열의 영문자를 모두 소문자로 바꿉니다. (hello thank you good luck to you) document.write(t.toUpperCase(),\"&lt;br /&gt;\"); // 문자열의 영문자를 모두 대문자로 바꿉니다. (HELLO THANK YOU GOOD LUCK TO YOU) document.write(t.length,\"&lt;br /&gt;\"); // 문자열의 총 문자 개수를 반환합니다. (공백포함 32) var s=t.split(\" \"); // \" \"(공백) 문자를 기준으로 문자를 분리하여 s에 저장합니다. document.write(s[0],\"&lt;br /&gt;\"); // s 인덱스 0에 저장된 문자열을 출력합니다. (Hello) document.write(s[4],\"&lt;br /&gt;\"); // s 인덱스 4에 저장된 문자열을 출력합니다. (luck) 사용자에게 입력받은 이메일 유효성 검사 예제123456789101112131415161718192021222324var userEmail=prompt(\"당신의 이메일 주소는?\",\"\"); var check1=false; //초기 값 저장 var check2=false; //초기 값 저장 //이메일 주소에 뒷부분 형식을 배열로 저장 var arrUrl=[\".co.kr\",\".com\",\".net\",\".or.kr\",\".go.kr\"]; /*방문자가 입력한 이메일 주소에 \"@\"포함되어 있으면 변수 check1에 true가 저장*/ if(userEmail.indexOf(\"@\")&gt;0) check1=true; //indexOf는 찾는 문자가 없는경우만 -1을 반환 합니다. //이메일에 배열 데이터 포함여부 검사 for(var i=0; i&lt;arrUrl.length; i++){ if(userEmail.indexOf(arrUrl[i])&gt;0) check2=true; } //AND(&amp;&amp;)연산자는 모두 피연산자가 모두 true여야 true를 반환합니다. if(check1&amp;&amp;check2){ document.write(userEmail); }else{ alert(\"이메일 형식이 잘못되었습니다.\"); }","link":"/2020/03/02/String%20%EB%AC%B8%EC%9E%90%20%EA%B0%9D%EC%B2%B4%20-JavaScript/"},{"title":"String 오브젝트 -ECMAScript","text":"String 오브젝트 Unicode fromCodePoint(): 코드 포인트 문자 반환 codePointAt(): 코드 포인트 값 반환 includes(): 문자열 포함 여부 startsWith(): 문자열 시작 여부 endsWith(): 문자열 종료 여부 repeat(): 문자열 복제 normalize(): 유니코드 정규화 형식 변환 Unicode 유니코드는 “U+”를 작성하고 이어서 코드 포인트(codepoint)를 작성합니다. 코드 포인트는 4자리 이상의 UTF-16 진수 형태로 U+0000 에서 U+10FFFF까지 약 110만 개 정도를 사용할 수 있습니다. 코드 포인트 전체는 17개 평면(plane)으로 나누어져 있으며, 하나의 평면은65535(U+FFFF)개 입니다. 첫 번째 평면을 BMP(Basic Multilingual Plane)라고 부르며 일반적인 문자가 이 평면에 속합니다. (ex 한글) BPM를 제외한 코드 포인트가 속한 평면을 Supplementary plane 또는 Astral plane이라고 부릅니다. 5자리 이상의 코드 포인트가 여기에 속합니다. Unicode123456789101112131415// 16진수 이스케이프 시퀀스 1. console.log(\"1:\", \"\\x31\\x32\\x33\"); // 유니코드 이스케이프 시퀀스 2. console.log(\"2:\", \"\\u0031\\u0032\\u0033\"); // 유니코드 코드포인트 이스케이프 3. console.log(\"3:\", \"\\u{34}\\u{35}\\u{36}\"); // U+FFFF보다 큰 코드 포인트: 코끼리 //http://unicode-table.com/en/1F418/ 4. console.log(\"4:\", \"\\u{1f418}\"); //서로게이트 페어(Surrogate pair) 5. console.log(\"5:\", \"\\uD83D\\uDC18\"); “\\x31\\x32\\x33”를 변환하면 123이 반환됩니다. \\에 이어서 16진수로 값을 작성합니다. 이 형태를 16진수 이스케이프 시퀀스(Escape Sequence)라고 합니다. “\\x31\\x32\\x33” 를 유니코드로 작성하면 “\\u0031\\u0032\\u0033” 형태가 됩니다.이를 유니코드 이스케이프 시퀀스라고 합니다. UTF-16 진수 형태로 U+0000에서 U+FFFF까지 사용할 수 있습니다. U+FFFF 보다 큰 코드 포인트 (유니코드 이스케이프 시퀀스 범위를 넘어가는)는ES6에서 “\\u{34}”와 같이 중괄호 안에 코드 포인트를 작성합니다.이를 유니코드 코드 포인트 이스케이프라고 합니다.\\u{1f418}과 같이 5자리로도 작성할 수 있습니다. 코끼리 이모지를 출력하는 유니코드 코드 포인트 이스케이프 값 입니다.브라우저 마다 이모지 모습이 조금씩 차이가 있을 수 있습니다. \\u{1F418} 형태는 ES5에서 사용할 수 없습니다.ES5에서 사용할 수 있는 형태를 Surrogate pair 라고 하며 “\\uD83D\\uDC18”와 같이 두 개의 유니코드 이스케이프 시퀀스를 사용 합니다. fromCodePoint(): 코드 포인트 문자 반환유니코드의 코드 포인트에 해당하는 문자를 반환합니다. String.fromCodePoint(param); 1234567891011121314151617181920// #$%&amp; console.log(\"1:\", String.fromCodePoint(35, 36, 37)); // 16진수로 지정, 49, 50, 51로 지정한 것과 같음 console.log(\"2:\", String.fromCodePoint(0x31, 0x32, 0x33)); // 44032 = 가, 44033 = 각 = 가각 console.log(\"3:\", String.fromCodePoint(44032, 44033)); // 코끼리 이모지 //http://unicode-table.com/en/1F418/ console.log(\"4:\", String.fromCodePoint(0x1F418)); /* fromCharCode는 ES5 함수이며, 4자리 까지만 작성할 수 있으므로 코끼리 이모지가 표시되지 않음 */ console.log(\"5:\", String.fromCharCode(0x1f418)); /* fromCharCode를 사용하려면 Surrogate pair 형태로 값을 두 개 작성해야됨. */ console.log(\"6:\", String.fromCharCode(0xD83D, 0xDC18)); codePointAt(): 코드 포인트 값 반환문자열에서 파라미터에 지정한 인덱스 번째 문자의 코드 포인트 값을 반환합니다.파라미터의 디폴트 값은 0 입니다.해당 인덱스에 문자가 없으면 undefined를 반환합니다. 12345678910console.log(\"가\".codePointAt(0)); // \"가\"의 코드 포인트 값 44032 반환 let values = \"ABC\"; for (var value of values){ console.log(value, value.codePointAt(0)); // A 65 // B 66 // C 67 }; includes(): 문자열 포함 여부 str.includes(searchString[, position]) 매개변수 searchString:이 문자열에서 찾을 다른 문자열. position (선택적 파라미터)searchString을 찾기 시작할 위치. 기본값 0. 반환값문자열을 찾아내면 true. 실패하면 false. 123456let target = \"123가나다라456\"; 1. console.log(\"1: \", target.includes(2)); 2. console.log(\"2: \", target.includes(\"가나\")); 3. console.log(\"3: \", target.includes(\"12\", 5)); target.includes(2)가 숫자 값이지만 문자열로 변환하여 비교합니다. true 유니코드의 코드 포인트 값으로 체크하기 때문에 한글을 체크할 수 있습니다. true target 안에 12가 있지만 6번째 이후 부터 체크 하므로 false starsWith(): 문자열 시작 여부 startsWith() 메소드는 어떤 문자열이 특정 문자로 시작하는지 확인하여 결과를 true 혹은 false로 반환합니다. 대소문자를 구분합니다. str.starsWith(searchString[, position]) 매개변수 searchString:이 문자열에서 찾을 다른 문자열. position (선택적 파라미터)searchString을 찾기 시작할 위치. 기본값 0. 반환값문자열이 검색 문자열로 시작하면 true. 아니면 false. 123456let target = \"123가나다\"; 1. console.log(\"1:\", target.startsWith(123)); 2. console.log(\"2:\", target.startsWith(\"23\")); 3. console.log(\"3:\", target.startsWith(\"가나\", 3)); 123으로 대상 문자열이 시작하므로 true 반환.두 번째 파라미터를 작성하지 않았으므로 비교 시작 인덱스는 0 23으로 시작하지 않으므로 false 두 번째 파라미터에 인덱스 값 3을 작성하여 4 번째 부터 비교합니다.대상 문자열 4번째에 “가나”로 시작하므로 true endsWith(): 문자열 종료 여부 ndsWith() 메서드를 사용하여 어떤 문자열에서 특정 문자열로 끝나는지를 확인할 수 있으며, 그 결과를 true 혹은 false로 반환합니다. str.endsWith(searchString[, position]) searchString대상 문자열의 끝이 특정 문자열로 끝나는지를 찾기 원하는 문자열입니다. position (선택적 파라미터)찾고자 하는 문자열의 길이값이며, 기본값은 문자열 전체 길이입니다.문자열의 길이값은 문자열 전체 길이 보다 길 수 없습니다. 123456let target = \"123가나다\"; 1. console.log(target.endsWith(\"가나다\")); 2. console.log(target.endsWith(\"가나\")); 3. console.log(target.endsWith(\"가나\", 5)); 대상 문자열이 “가나다”로 끝나므로 true “가나”로 끝나지 않으므로 false 두 번째 파라미터에 길이 값 5를 지정했으므로 대상 문자열의 5번째 까지만 비교합니다. “가나”로 끝나게 되므로 true 반환 repeat(): 문자열 복제 repeat() 메서드는 문자열을 주어진 횟수만큼 반복해 붙인 새로운 문자열을 반환합니다. str.repeat(count); count문자열을 반복할 횟수. 0과 양의 무한대 사이의 정수([0, +∞)). 반환값현재 문자열을 주어진 횟수만큼 반복해 붙인 새로운 문자열. 예외RangeError: 반복 횟수는 양의 정수여야 함.RangeError: 반복 횟수는 무한대보다 작아야 하며, 최대 문자열 크기를 넘어선 안됨. 123456let target = \"123\"; 1. console.log(\"1:\", target.repeat(3)); 2. console.log(\"2:\", target.repeat(0)); 3. console.log(\"3:\", target.repeat(2.7)); “123” 문자열을 3번 반복하여 123123123 반환 파라미터에 0을 작성하면 빈 문자열을 반환합니다. “” 2.7과 같이 소수를 작성하면 소수를 버리고 정수만 사용하여 복제합니다.123123 이 반환됩니다. normalize(): 유니코드 정규화 형식 변환 대상 문자열을 파라미터에 작성한 유니코드 정규화 형식으로 변환하여 반환합니다.만약 주어진 값이 문자열이 아닐 경우에는 우선 문자열로 변환 후 정규화합니다. str.normalize([form]) form유니코드 정규화 방식을 지정합니다. “NFC”, “NFD”, “NFKC”, “NFKD” 중 하나이며, 생략되거나 undefined 일 경우 “NFC”가 디폴트 값 입니다. NFC — 정규형 정준 결합(Normalization Form Canonical Composition). NFD — 정규형 정준 분해(Normalization Form Canonical Decomposition). NFKC — 정규형 호환성 결합(Normalization Form Compatibility Composition). NFKD — 정규형 호환성 분해(Normalization Form Compatibility Decomposition). 반환 값주어진 문자열을 유니코드 정규화 방식에 따라 정규화된 문자열로 반환합니다. form이 위에서 명시된 값 중 하나가 아닐 경우 RangeError 에러가 발생합니다. normalize() 메서드는 문자열을 유니코드 정규화 방식에 따라 정규화된 형태로 반환합니다. 문자열의 값 자체에는 영향을 주지 않습니다. 12345678910111213console.log(\"1:\", \"ㄱ\".charCodeAt(0)); // 12593 = (0x3131) console.log(\"2:\", \"ㅏ\".charCodeAt(0)); // 12623 = (0x314F) // \"ㄱ\" 과 \"ㅏ\"의 코드 포인트값을 연결 하여 작성 let jamo = \"\\u3131\\u314F\"; 1. console.log(\"3:\", jamo.normalize(\"NFC\")); console.log(\"4:\", jamo.normalize()); 2. console.log(\"5:\", jamo.normalize(\"NFD\")); 3. console.log(\"6:\", jamo.normalize(\"NFKD\")); console.log(\"7:\", jamo.normalize(\"NFKC\")); “ㄱ” 과 “ㅏ” 가 연결된 “가” 모습이 아닌 “ㄱㅏ” 형태가 됩니다.파라미터에 형식 값을 작성하지 않아도 디폴트 값 NFC 변환 형식이 적용됩니다. NFC와 같이 NFD도 “ㄱㅏ” 형태로 출력됩니다. NFKD 와 NFKC는 “가” 와 같이 글자 하나로 출력됩니다.","link":"/2020/03/29/String%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"Symbol 메서드 -ECMAScript","text":"Symbol 메서드 for(): Symbol 값 저장 글로벌(전역) Symbol 레지스트리 Symbol의 대표적 사용 형태 세 가지 keyFor(): key 값 변환 toString(): 문자열로 변환 valueOf(): Symbol 프리미티브 값 getOwnPropertySymbols(): Symbol 프로퍼티 반환 JSON.stringify(): JSON 형태로 변환 주석을 프로퍼티 key 값으로 활용 for(): Symbol 값 저장 글로벌 Symbol 레지스트리(registry)에 Symbol 값을 저장합니다. Symbol.for(key); keyString, 필수. 심볼의 키 (심볼의 설명을 위해서도 쓰입니다). 반환 값해당 키에 해당하는 심볼이 있다면 반환, 없으면 새로운 심볼을 만들고 반환합니다. Symbol은 두 개의 스코프에 저장될 수 있습니다.앞에서 다루었던 Symbol()은 Symbol을 생성한 스코프에 Symbol 값이 설정됩니다. 반면, Symbol.for()은 글로벌 Symbol 레지스트리에 {key: value} 형태로 저장됩니다.파라미터에 지정한 문자열이 key가 되고 생성한 Symbol 값이 value가 됩니다. Symbol.for()는 매 호출마다 새로운 심볼을 만들지 않고 현재 레지스트리에 해당 키를 가진 심볼이 있는지 먼저 검사를 합니다. 레지스트리에 key가 있다면 그 심볼(value)을 반환합니다. 만약 key에 해당하는 심볼이 없다면 Symbol.for()는 새로운 전역 심볼을 만들어 반환합니다. 글로벌 Symbol 레지스트리는 Symbol 값을 공유하기 위한 영역입니다.다른 자바스크립트 프레임워크에서도 공유할 수 있습니다. 글로벌(전역) Symbol 레지스트리글로벌(전역) Symbol 레지스트리는 다음과 같은 가진 기록 구조를 가진 리스트입니다.초기 값은 비어 있습니다. [[[key]] 심볼을 구분하기 위해 사용되는 문자열 키 [[[symbol]] 전역으로 저장되는 심볼 Symbol의 대표적 사용 형태 세 가지 Symbol() : Symbol 값을 생성하여 스코프 안에서 사용합니다. Symbol.for() : 글로벌 Symbol 레지스트리에 저장되며 전체 프로그램에서 사용합니다. Well-Known Symbol : 빌트인 Symbol 프로퍼티로 오버라이드하여 기능을 추가 및 변경 합니다. Symbol.for()1234567891011121. console.log(Symbol.for(\"sports\")); //새로운 전역심볼 생성 2. console.log(Symbol.for(\"sports\"));// 이미 만들어진 심볼을 검색 3. console.log(Symbol.for(\"ABC\") === Symbol.for(\"ABC\")); //전역심볼 4. console.log(Symbol.for(\"DEF\") === Symbol(\"DEF\")); //지역 심볼 5. console.log(Symbol.for(true)); // 문자열이 아님 // Symbol(sports) // Symbol(sports) // true // false // Symbol(true) Symbol 값을 생성하여 글로벌 Symbol 레지스트리에 {key: value} 형태로 저장됩니다.key: 파라미터로 넘겨준값 (“sports”)value: 생성한 Symbol 값 ( Symbol.for(“sports”) )생성한 Symbol을 출력하면 for을 제외하고 Symbol(“sports”)로 출력됩니다. 바로 위에서 sports를 글로벌 Symbol 레지스트리에 저장했으므로저장된 sports 키의 value를 검색하여 반환합니다.마찬가지로 for을 제외한 Symbol(“sports”) 형태로 출력됩니다. Symbol 값을 생성하여 “ABC”를 프로퍼티 키로 글로벌 Symbol 레지스트리에 저장합니다.오른쪽 Symbol.for(“ABC”)에서 글로벌 Symbol 레지스트리에 프로퍼티 키 “ABC”를 검색하여생성되있는 Symbol 값을 반환합니다. 왼쪽과 오른쪽 Symbol 값이 같으므로 true가 반환됩니다. Symbol.for()은 글로벌 Symbol 레지스트리에 저장되고Symbol()은 스코프에 저장되면서 둘은 공유되지 않습니다. false가 반환됩니다. 파라미터에 true 와 같이 문자열이 아닌 값을 던져주면 문자열로 변환하여 프로퍼티 키로 사용합니다.key: “true”value: Symbol.for(“true”)출력시 Symbol(true)로 출력됩니다. keyFor(): key 값 변환 글로벌 Symbol 레지스트리에서 프로퍼티 키 값을 반환합니다. Symbol.keyFor(Symbol) 파라미터에 글로벌 Symbol 레지스트리에 저장한 Symbol을 지정합니다.Symbol이 아니면 TypeError가 발생합니다.글로벌 Symbol 레지스트리에 Symbol이 존재하면 프로퍼티 키를 반환합니다.Symbol이 존재하지 않으면 undefinded를 반환합니다. keyFor()12345let globalSym = Symbol.for('foo'); // 글로벌 Symbol 레지스트리에 Symbol 값을 생성합니다. console.log(Symbol.keyFor(globalSym)); // \"foo\" let localSym = Symbol(); console.log(Symbol.keyFor(localSym)); // undefined Symbol()은 글로벌 스코프에서 생성하더라도 글로벌 Symbol 레지스트리에는 등록되지 않습니다.undefined가 반환됩니다. toString(): 문자열로 변환 Symbol을 문자열로 변환하여 반환합니다.Symbol 값이 아닌 Symbol 값을 생성한 Symbol() 형태를 문자열로 반환합니다.Well-Known Symbol, 글로벌 Symbol 레지스트리도 변환됩니다. Symbol.prototype.toString() 생성한 Symbol 값을 문자열에 연결하면 TypeError가 발생하지만, toString으로 변환하여 연결하면 에러가 나지 않고 문자열로 연결됩니다. toString() 메서드가 Symbol.prototype에 연결되어 있으므로 Symbol() 또는 Symbol.for()로 생성한 Symbol을 사용합니다. toString()12345678console.log(\"1:\", Symbol(\"123\").toString()); // 1: Symbol(123) console.log(\"2:\", Symbol.for(\"ABC\").toString()); // 2: Symbol(ABC) console.log(\"3:\", Symbol.iterator.toString()); // 3: Symbol(Symbol.iterator) Symbol 값이 아닌 Symbol 값을 생성할 때의 형태를 문자열로 반환합니다.Symbol.for()도 Symbol()과 같지만 출력할 때 for을 제외시킵니다. Well-Known Symbol을 문자열로 반환합니다. Symbol 값을 생성할 때의 형태Symbol.iterator가 Symbol()의 파라미터에 표시됩니다. valueOf(): Symbol 프리미티브 값 valueOf () 메서드는 Symbol 오브젝트의 프리미티브 값을 반환합니다. Symbol.prototype.valueOf() 모든 빌트인 오브젝트에 valueOf() 메소드가 있으며 프리미티브 값을 반환합니다.예시로 New Number(123)으로 생성한 인스턴스를 valueOf()로 실행하면 123이 반환됩니다. Symbol도 빌트인 오브젝트이지만 반환 값 형태가 다릅니다.Symbol(123)으로 생성한 Symbol로 valueOf()를 실행하면 Symbol 값이 반환되지 않고,Symbol 값을 생성할 때의 “Symbol(123)”이 반환됩니다. getOwnPropertySymbols(): Symbol 프로퍼티 반환 getOwnPropertySymbols()는 반환 대상이 Symbol인 Object 오브젝트 메서드 입니다.배열로 반환합니다. Object.getOwnPropertySymbols() 파라미터추출 대상 Object 반환지정한 Object 에서 Symbol 이외의 프로퍼티는 반환하지 않고 오직 Symbol만 배열로 반환합니다. getOwnPropertySymbols123456789101112131415161718192021let bookObj = {book: 123}; bookObj[Symbol(\"one\")] = 10; bookObj[Symbol.for(\"two\")] = 20; let names = Object.getOwnPropertyNames(bookObj); console.log(\"1:\", names); // 1: [\"book\"] let symbolList = Object.getOwnPropertySymbols(bookObj); console.log(\"2:\", symbolList); // 2: [Symbol(one), Symbol(two)] for (let sym of symbolList){ console.log(sym.toString(), bookObj[sym]); // Symbol(one) 10 // Symbol(two) 20 } let emptyList = Object.getOwnPropertySymbols({}); console.log(\"5:\", emptyList.length); // 5: 0 {book:123}으로 Object 오브젝트를 생성하여 bookObj에 할당합니다.Symbol(“one”)으로 Symbol을 생성하고, bookObj 오브젝트의 symbol-keyed 프로퍼티로 사용하여 10을 할당합니다.이때 bookObj 오브젝트는 {book: 123, Symbol(“one”): 10} 형태가 됩니다.글로벌 Symbol 레지스트리에 “two”를 프로퍼티 키로 Symbol 값을 등록하고, bookObj 오브젝트에 symbol-keyed 프로퍼티로 사용하여 20을 할당합니다.이때 bookObj 오브젝트는 {book: 123, Symbol(“one”): 10, Symbol(“two”): 20} 형태가 됩니다. getOwnPropertyNames() 파라미터에 지정한 bookObj 오브젝트에서 프로퍼티 이름을 배열로 반환합니다.이때 Symbol은 반환되지 않습니다. 즉 [“book”]만 출력됩니다.for-in문으로 전개해도 Symbol은 열거되지 않습니다. getOwnPropertySymbols() 파라미터에 지정한 bookObj 오브젝트에서Symbol-keyed 프로퍼티를 배열로 반환합니다. Symbol이 아닌 프로퍼티는 반환하지 않습니다.[Symbol(one), Symbol(two)]가 반환됩니다. getOwnPropertySymbols()에서 배열로 반환해 줌으로 for-of문으로 전개할 수 있습니다.Symbol이 sym 변수에 설정되어 String으로 변환되어 출력됩니다. getOwnPropertySymbols() 파라미터에 빈 Object 를 지정하면 빈 배열로 반환합니다.length 값이 0 이 됩니다. JSON.stringify(): JSON 형태로 변환 자바스크립트 형태를 JSON 형태의 문자열로 변환합니다. JSON.stringify(value[, replacer[, space]]) valueJSON 문자열로 변환할 값. replacer 선택적 파라미터문자열화 동작 방식을 변경하는 함수, 혹은 JSON 문자열에 포함될 값 객체의 속성들을 선택하기 위한 화이트리스트(whitelist)로 쓰이는 String 과 Number 객체들의 배열. 이 값이 null 이거나 제공되지 않으면, 객체의 모든 속성들이 JSON 문자열 결과에 포함된다. space 선택적 파라미터가독성을 목적으로 JSON 문자열 출력에 공백을 삽입하는데 사용되는 String 또는 Number 객체. Number 라면, 공백으로 사용되는 스페이스(space)의 수를 나타낸다; 이 수가 10 보다 크면 10 으로 제한된다. 1 보다 작은 값은 스페이스가 사용되지 않는 것을 나타낸다. String 이라면, 그 문자열(만약 길이가 10 보다 길다면, 첫번째 10 개의 문자)이 공백으로 사용된다. 이 매개 변수가 제공되지 않는다면(또는 null 이면), 공백이 사용되지 않는다. 반환 값주어진 값과 대응하는 JSON 문자열. JSON.stringify()로 자바스크립트 형태의 {key: value}를 JSON 형태의 문자열로 변환하면,Symbol-keyed 프로퍼티로 작성한 Symbol은 변환에서 제외됩니다.Symbol 값을 외부에 노출시키지 않으려는 의도이지만, 에러 역시 나지 않으므로 주의해야 합니다. JSON.stringify12345678let result = JSON.stringify({[Symbol(\"one\")]: \"1\"}); console.log(result); console.log(typeof result); console.log(JSON.stringify({[Symbol.for(\"two\")]: \"2\"})); // \"{ }\" // string // \"{ }\" 위와 같이 Symbol(“one”)으로 생성한 Symbol을 Object 오브젝트의 symbol-keyed 프로퍼티로 사용한 것을JSON.stringify()로 변환하면, Symbol이 변환에서 제외되어 중괄호 {}만 문자열로 반환됩니다. 주석을 프로퍼티 key 값으로 활용Symbol 주석을 프로퍼티 키로 활용하여 JSON.stringify()에서 Symbol이 제외되는 것을 방지하기 위한하나의 코드작성 법입니다. JSON.stringify() Symbol 제외 방지12345678910111213141516171819202122let bookObj = {}; bookObj[Symbol(\"one\")] = 10; bookObj[Symbol.for(\"two\")] = 20; 1. let symbolList = Object.getOwnPropertySymbols(bookObj); console.log(symbolList); let first, second, key, keyValue = {}; 2. for (let sym of symbolList){ 3. key = Symbol.keyFor(sym); 4. if (key){ keyValue[key] = bookObj[sym]; } 5. else { //Symbol(one) first = /^Symbol[(]/[Symbol.replace](sym.toString(), \"\"); second = /[)]$/[Symbol.replace](first, \"\"); 6. keyValue[second] = bookObj[sym]; } }; 7. console.log(JSON.stringify(keyValue)); // [Symbol(one), Symbol(two)] // {\"one\": 10, \"two\": 20} 빈 오브젝트 bookObj에 Symbol(one) 과 Symbol.for(two)로 생성한 Symbol을Symbol-keyed 프로퍼티로 사용하여 프로퍼티 값을 설정해 줬습니다.{Symbol(“one”): 10, Symbol(“two”): 20} 형태가 됩니다. getOwnPropertySymbols() 파라미터의 bookObj 오브젝트에서 반환받으면[Symbol(one), Symbol(two)]가 출력됩니다. symbolList 변수에 할당합니다. for-of 문으로 symbolList를 반복하면 배열의 순서대로 sym 변수에 할당됩니다. Symbol.keyFor(sym)을 실행하면 글로벌 Symbol 레지스트리에 등록한 Symbol 키를 반환받습니다.따라서 Symbol(one)은 undefined를 Symbol.for(two)는 “two”를 반환합니다. Symbol.for(“two”)가 for-of 문의 sym에 설정될때 실행됩니다.bookObj 오브젝트의 sym으로 값을 구하면 20이 반환되며, 글로벌 Symbol 레지스트리에 “two”가 프로퍼티 키로 등록되어 있으므로 {two: 20}형태가 됩니다.Symbol.for()로 생성한 Symbol은 프로퍼티 키와 값을 갖고 있으므로 {key: value}형태를 만들수 있습니다. Symbol(“one”)이 for-of 문의 sym에 설정될 때 실행됩니다.“one”을 프로퍼티 키로 사용하기 위해 정규 표현식으로 “one”이외의 문자를 빈 문자열로 대체합니다. bookObj 오브젝트에서 Symbol(“one”)으로 생성한 값으로 프로퍼티 값을 구하면 10이 반환되며,second 변수 값이 “one”이므로 {one: 10}형태가 됩니다. for-of문 반복을 완료하면{one: 10, two: 20} 형태가 됩니다. 파라미터에 keyValue를 지정하여 JSON.stringify()를 실행하면 {“one”: 10, “two”: 20}으로 변환됩니다.Symbol() 주석을 유일하게 지정하면 {key: value} 형태로 Symbol을 변환할 수 있습니다.Symbol()로 생성한 값을 오브젝트의 프로퍼티 키로 사용하고 이를 서버로 전송하려면 계획적인 접근이 필요합니다.","link":"/2020/04/09/Symbol%20%EB%A9%94%EC%84%9C%EB%93%9C%20-ECMAScript/"},{"title":"Symbol 오브젝트 -ECMAScript","text":"Symbol Object primitive Symbol() Symbol 값 변경 Symbol 오브젝트 생성 오브젝트에서 Symbol 사용 Symbol 사용 형태 primitive 자바스크립트에 프리미티브(primitive) 개념이 있습니다. 이는 오브젝트가 아닌 값 입니다.ES5에 string, number, boolean, null, undefined가 있으며ES6에 Symbol이 추가되었습니다. (var num = 123;)을 실행하면 num에 123이 할당됩니다.123은 number 타입의 프리미티브 값입니다. string, number, boolean 은 래퍼(Wrapper) 오브젝트가 있습니다.각각 String, Number, Boolean 오브젝트가 래퍼 오브젝트 입니다.ES6에서 symbol의 Symbol 오브젝트가 추가되었습니다.undefined, null은 래퍼 오브젝트가 없습니다. valueOf()로 래퍼 오브젝트의 프리미티브 값을 구할 수 있습니다.단, Symbol은 값을 반환하지 않습니다. Symbol() let sym = Symbol(); 형태로 작성하며 Symbol 값을 생성하여 sym에 할당합니다. new 연산자는 사용할 수 없습니다. Symbol()로 생성된 값은 프로그램 전체를 통해 유일하며 값을 변경할 수 없습니다. 생성한 Symbol에 프로퍼티를 설정할 수 없으며 strict mode에서 TypeError가 발생합니다. Symbol()로 반환된 값이 오브젝트가 아니므로 오브젝트를 생성한다고 할 수 없습니다.Symbol을 생성한다는 것은 뉘앙스에 차이가 있습니다. Symbol 값을 생성한다는 표현이 적절합니다. Symbol은 String””, Array[], Object{}, Boolean(true/false)와 같이 오브젝트를생성하는 리터럴이 없습니다. undefined, null과 같이 그 자체가 값이 되는 것도 아닙니다. Symbol()과 같이 함수로 호출해야 값을 생성하며 반환합니다. 12345678910const sym = Symbol(); console.log(\"1:\", sym); console.log(\"2:\", typeof sym); console.log(\"3:\", Symbol(\"주석\")); console.log(\"4:\", sym == Symbol()); // 1: Symbol() // 2: symbol // 3: Symbol(주석) // 4: false Symbol()을 호출하면 Symbol 값을 생성하여 반환합니다.생성한 값은 변경할 수 없으므로 const 변수에 할당해도 됩니다. Symbol()로 값을 생성했는데 값이 출력되지 않고 실행 결과 Symbol()이 출력됩니다.Symbol 값을 구하면 Symbol()로 생성한 값을 반환하지 않고,Symbol값을 생성했던 형태를 반환합니다. 브라우저 개발자 도구에서도 값을 볼 수 없습니다.이것이 Symbol의 특징입니다. Symbol()로 생성한 값의 typeof는 symbol 입니다. Symbol()의 파라미터는 선택사항으로 Symbol()로 생성한 값의 설명이나 주석을 문자열로 작성합니다. Symbol 값을 생성하는데 영향을 미치지 않습니다. Symbol 값을 외부에 제공하지 않으므로 디버깅할 때 유용합니다.파라미터를 작성하지 않으면 undefined로 인식합니다. Symbol(“주석”)형태로 반환됩니다. 앞에서 Symbol()로 생성한 값(sym)과 다시 Symbol()로 생성한 값을 비교하면false가 반환됩니다.Symbol()을 실행할 때마다 프로그램 전체를 통해 유일한 값을생성하므로 값이 같을 수 없습니다. 이것이 Symbol의 특징입니다. Symbol 값 변경 Symbol()로 생성한 Symbol 값을 변경할 수 없습니다. Symbol 값에 문자열을 연결할 수 있으나String() 또는 toString()을 사용해야 합니다. 이 형태는 Symbol 값이 연결되는 것은 아니며Symbol 값을 생성할 때의 형태를 연결합니다. Symbol 값을 템플릿에 사용할 수 없고, + 연산자로 문자열을 연결하면 에러가 발생합니다. Symbol +연산자, or연산자 사용불가1234567891011121314let sym = Symbol(); try { +sym; } catch (e) { console.log(\"+sym 사용 불가\"); }; try { sym | 0; } catch (e) { console.log(\"sym | 0 사용 불가\"); }; // +sym 사용 불가 // sym | 사용 불가 단항 + 연산자를 사용하여 Number 타입으로 변환하면 에러가 발생합니다.Symbol과 비트 or 연산자를 함께 사용하면 에러가 발생합니다. Symbol 문자열 연결123456789101112let sym = Symbol(); try { sym + \"문자열\"; } catch (e) { 1. console.log(\"문자열 연결 불가\"); }; 2. console.log(String(sym) + \"연결\"); 3. console.log(sym.toString() + \"연결\"); // 문자열 연결 불가 // Symbol() 연결 // Symbol() 연결 Symbol()로 생성한 값에 + 연산자로 문자열을 연결하면 에러가 발생합니다. String(sym) 으로 Symbol을 문자열로 변환하면 문자열을 연결할 수 있습니다.Symbol 값이 문자열로 연결되지는 않고 Symbol 값을 생성한 형태인“Symbol()”이 연결됩니다. “Symbol() 연결”이 출력됩니다. toString()으로 Symbol()을 문자열로 변환하면 문자열을 연결할 수 있습니다.String()과 마찬가지로 Symbol()을 생성한 형태가 문자열에 연결됩니다. Symbol 템블릿1234567let sym =Symbol(\"123\"); try { `${sym}`; } catch (e) { console.log(\"`${sym} 불가`\"); } // `${sym} 불가` 템블릿에서 Symbol 값을 사용하면 에러가 발생합니다.Symbol 값이 템플릿에 반영되면 문자열 값으로 변환되어 외부에 노출되기 때문입니다.(Symbol 값을 생성한 형태도 반영되지 않습니다. Symbol 값을 외부에 노출시키지 않는 것이 Symbol의 특징입니다.) Symbol 오브젝트 생성 Object()에 Object(123)처럼 파라미터 값 123을 작성하면 Number 오브젝트를 반환합니다.마찬가지로 Object()의 파라미터에 Symbol 값일 작성하면 Symbol 오브젝트를 반환합니다. Symbol 오브젝트에 Symbol 메서드, Symbol.prototype, prototype에 연결된 프로퍼티가 설정됩니다. Symbol Object1234567891011121314151. let sym = Symbol(\"123\"); const obj = Object(sym); console.log(obj); 2. console.log(obj == sym); console.log(obj === sym); /* Symbol description: (...) &gt;__proto__: Symbol [[PrimitiveValue]]: Symbol(123) */ // true // false Symbol(“123”)으로 Symbol 값을 생성하고 이를 Object(sym) 파라미터에 지정합니다.Symbol 오브젝트를 생성하여 반환하게 됩니다. 다음은 생성한 Symbol 오브젝트 구성 입니다. Symbol.prototype에 연결된 프로퍼티가 __proto__에 첨부됩니다.이를 통해 Symbol.prototype의 메서드와 프로퍼티를 확인할 수 있습니다. [[PrimitiveValue]]에 Symbol 값을 생성한 형태인 Symbol(“123”)이 설정됩니다.Symbol 값이 설정되지 않고 값을 생성한 형태가 설정됩니다.__proto__에 있는 valueOf()로 [[PrimitiveValue]]에 설정된 값을 반환받을 수 있습니다. Symbol(“123”)으로 생성한 값 sym 과 Object()의 파라미터에 지정하여 생성한 obj를 비교하면 true를 반환합니다. === 연산자로 타입까지 비교하면 false를 반환합니다. 값은 [[PrimitiveValue]] 값으로 비교하여 true를 반환하지만 타입은 Symbol 과 Object 의 타입이 비교되기 때문입니다. 오브젝트에서 Symbol 사용 프로그램에서 유일한 값을 갖은 Symbol의 특징을 이용하여Symbol 값을 오브젝트의 프로퍼티 키로 사용하면 프로퍼티 키가 중복되지 않습니다. [Symbol()]형태와 같이 대괄호[] 안에 Symbol()을 작성합니다. { [Symbol()]: 123}프로퍼티 키에 작성한 Symbol()을 symbol-keyed property라고 합니다.Symbol 값은 문자열이 아니며 값이기 때문에 []안에 {“Symbol”} 형태로 작성하지 않고{Symbol} 형태로 작성합니다. 이 형태를 symbol-keyed property 라고 하는 것입니다. 12345678910111213141516171819let sym = Symbol(\"123\"); let obj = {[sym]: \"456\"}; // Symbol(\"123\")을 변수에 할당하고 []안에 변수 이름을 작성하여 // Object 의 프로퍼티 키로 사용 console.log(obj); // 프로퍼티 키에 해당하는 값 출력 console.log(obj[sym]); console.log(obj.sym); // 대괄호[]를 사용하지 않고 작성하면 에러가 발생하지 않고 // undefined가 반환됨. /* Object Symbol(123): \"456\" &gt;__proto__: Object */ // 456 // undefined Symbol 사용 형태 fon-in 문에서 symbol-keyed 프로퍼티가 열거되지 않습니다.Symbol 이 [[ Enumberable]]: false 이기 때문입니다. Symbol-keyed 프로퍼티를 열거 하려면 Object.getOwnPropertySymbols()를 사용해야 합니다. 클래스 메서드 이름으로 Symbol 사용method-name1234567891011121314151617const symbolOne = Symbol(\"symbol one\"); const symbolTwo = Symbol(\"symbol two\"); class Sports { 1. static [symbolOne]() { return \"Symbol-1\"; } 2. [symbolTwo](){ return \"Symbol-2\"; } } 3. console.log(Sports[symbolOne]()); 4. let obj = new Sports(); console.log(obj[symbolTwo]()); // Symbol-1 // Symbol-2 Symbol(“symbol one”)으로 생성한 값을 static 메서드 이름으로 사용한 형태입니다.대괄호 []안에 Symbol 값을 할당한 변수 이름을 작성하고 이어서 소괄호()를 작성합니다. Symbol(“symbol two”)로 생성한 값을 메서드 이름으로 사용한 형태입니다.static 키워드를 작성하지 않았으므로 Sports.prototype에 symbolTwo{}가 연결됩니다. symbolOne은 static 메서드 입니다. 클래스 이름에 이어 대괄호[]안에 메서드 이름을 작성하고 소괄호()를 작성하면 메서드가 호출됩니다. symbolTwo{}가 Sports.prototype에 연결되어 있으므로 호출하기 위해 인스턴스를 생성합니다. 인스턴스에 이어 대괄호[]안에 메서드 이름을 작성하고 소괄호()를 작성하면 메서드로 호출됩니다. JSON.stringify()에서 Symbol 사용JSON.stringify()는 Object 오브젝트의 프로퍼티를 {“key”: “value”}형태로 변환합니다.key는 문자열로 변환되고 value는 타입에 따라 문자열로 변환되지 않을 수도 있습니다.클라이언트에서 서버로 데이터를 JSON형태로 전송할 때 사용합니다. Symbol 값은 외부에 노출되지 않도록 조치 되어 있기 때문에 {[sym]: “값”}과 같이Symbol 값을 프로퍼티로 작성하여 JSON.stringify()를 실행하면 프로퍼티 키와 프로퍼티 값이문자열로 변환되지 않고 빈 Object {}가 반환됩니다. 이를 위한 대처방법으로 Object.getOwnPropertySymbols()를 사용하는 방법이 있습니다.","link":"/2020/04/06/Symbol%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"Symbol 프로퍼티 -ECMAScript","text":"Symbol 오브젝트에 프로퍼티들을 살펴봅니다.이 프로퍼티들은 메서드로도 사용할 수 있습니다 Symbol 프로퍼티 Well-Known Symbol toStringTag 클래스의 메서드로 사용 isConcatSpreadable Array-like 오브젝트에서 사용 unscopable species 개념 species 다른 Class 반환 null 반환 toPrimitive toPrimitive() 파라미터의 세가지 모드(mode) 이터레이터 Array.prototype[Symbol.iterator] String.prototype[Symbol.iterator] Object 이터레이션 제너레이터 asyncIterator(): 비동기 반복 match(): match 결과 반환 matchAll() Well-Known Symbol 스펙에서 @@iterator 형태로 작성된 것을 볼 수 있으며@@는 Symbol 대신 사용한 것입니다.따라서 @@iterator는 Symbol.iterator와 같습니다.@@iterator 형태는 스펙에서 사용하며 Symbol.iterator 형태는 내부 프로퍼티인[[Description]]에 저장되는 형태입니다.개발자 코드에서는 Symbol.iterator 형태를 사용합니다. Spec name [[Description]] @@asyncIterator Symbol.asyncIterator @@hasInstance Symbol.hasInstance @@isConcatSpreadable Symbol.isConcatSpreadable @@iterator Symbol.iterator @@match Symbol.match @@matchAll Symbol.matchAll 참고용 프로퍼티 Symbol.prototype.description @@replace Symbol.replace @@search Symbol.search @@species Symbol.species @@split Symbol.split @@toPrimitive Symbol.toPrimitive @@toStringTag Symbol.toStringTag @@unscopables Symbol.unscopables Well-Known Symbol은 스펙에서 처리 알고리즘(Algorism)을 구분하기 위해 부여한 이름입니다. 즉, 자바스크립트 엔진이 디폴트로 처리하는 알고리즘 유형 이름입니다. 자바스크립트 프로그램에 같은 이름의 Well-Known.Symbol을 작성하면엔진의 디폴트 처리를 실행하지 않고 프로그램에 작성한 코드를 실행합니다(오버라이딩)Well-Known Symbol이 오버라이드되는 것과 같으므로 프로그램에 같은 이름을작성하여Well-Known Symbol기능을 대체할 수 있습니다. 이런 가변성과 유용성을 제공하는 것이 Well-Known Symbol의 목적입니다. toStringTag [object Object] 형태에서 Object를 Symbol.toStringTag 값으로 표시합니다.객체의 기본 문자열 설명을 만드는 데 사용되는 문자열 값 속성입니다.Object.prototype.toString() 메소드에 의해 내부적으로 액세스됩니다. 설명많은 자바스크립트 타입들은 기본적으로 tag를 가지고 있습니다. tag default1234567891011121314Object.prototype.toString.call('foo'); // \"[object String]\" Object.prototype.toString.call([1, 2]); // \"[object Array]\" Object.prototype.toString.call(3); // \"[object Number]\" Object.prototype.toString.call(true); // \"[object Boolean]\" Object.prototype.toString.call(undefined); // \"[object Undefined]\" Object.prototype.toString.call(null); // \"[object Null]\" // ... and more 기본적으로 toStringTag symbol이 정의되어 있는 것도 있습니다. 12345678Object.prototype.toString.call(new Map()); // \"[object Map]\" Object.prototype.toString.call(function* () {}); // \"[object GeneratorFunction]\" Object.prototype.toString.call(Promise.resolve()); // \"[object Promise]\" // ... and more class를 생성하면 자바스크립트는 기본값으로 Object tag를 설정합니다. 1234class ValidatorClass {} Object.prototype.toString.call(new ValidatorClass()); // \"[object Object]\" toStringTag를 이용하여 자신만의 맞춤 태그를 설정할 수 있습니다. 1234567class ValidatorClass { get [Symbol.toStringTag]() { return 'Validator'; } } Object.prototype.toString.call(new ValidatorClass()); // \"[object Validator]\" toStringTag 예제12345678let Sports = function(){}; let sportsObj = new Sports; 1. console.log(sportsObj.toString()); 2. Sports.prototype[Symbol.toStringTag] = \"Sports-Function\"; 3. console.log(sportsObj.toString()); // [object Object] // [object Sports-Function] new Sports로 생성한 인스턴스로 toString()을 실행하면 [object Object]가 반환됩니다.Object 오브젝트도 [object Object]를 반환하므로 구분이 어렵습니다.한편 new Sports()의 파라미터 값이 없을때 new sports; 로 사용할 수 있습니다. Sports.prototype[Symbol.toStringTag] = “Sports-Function”;Sports.prototype[Symbol.toStringTag]에 [object Object] 의 Object에 표시할 문자열을 지정합니다. sportsObj.toString()을 실행하면 엔진에서 디폴트 toStringTag 값을 반환하기 전에sportsObj에서 Symbol.toStringTag의 작성 여부를 체크합니다.값이 작성되어 있다면 디폴트 값이 아닌 작성된 값을 반환합니다.따라서 [object Sports-Function] 이 출력됩니다.[object Sports-Function]을 정규표현식으로 분리하면 Sports-Function을 구할 수 있습니다. 클래스의 메서드로 사용Symbol.toStringTag를 클래스의 getter로 작성할 수 있습니다. 12345678910111213141516class Book {}; let bookObj = new Book(); 1. console.log(bookObj.toString()); 2. class Sports { get [Symbol.toStringTag]() { return \"Sports-class\"; } }; 3. let sportsObj = new Sports(); console.log(sportsObj.toString()); 4. console.log(Map.prototype[Symbol.toStringTag]); //[object Object] //[object Sports-class] //Map toString()을 실행하면 [object Object]가 반환됩니다.따라서 Function 오브젝트, Object 오브젝트와 구분할 수 없습니다. 클래스에 Symbol.toStringTag를 getter로 선언했습니다.return 문에 [object Object]에서 Object에 표시될 문자열을 작성했습니다.Sports-class가 반환됩니다.getter로 작성하지 않고 메서드로 작성하면 [object Object]가 반환되므로 getter로 작성해야 합니다. 인스턴스로 toString()을 호출하면 sportsObj 인스턴스에 작성된 getSymbol.toStringTag가 호출됩니다.호출된 메서드에서 “Sports-class”를 반환하므로 [object Sports-class]가 출력됩니다. Map 같이 Symbol.toStringTag를 기본값(빌트인)으로 가지고 있는 것들이 있습니다.Map.prototype[Symbol.toStringTag]를 실행하면 “Map”이 출력됩니다.개발자 코드로 Symbol.toStringTag에 표시될 문자열을 작성하거나 getter를 사용하지 않아도 됩니다. isConcatSpreadable Symbol.isConcatSpreadable는Array.prototype.concat() 메서드를 사용할 때 객체를 배열 요소에 병합해야하는지 구성하는 데 사용됩니다. [Symbol.isConcatSpreadable] = true / false 프로퍼티의 기본값은 true 입니다.false로 설정시 배열을 펼처서 합치지 않고 배열의 끝에 배열을 추가합니다.사용시 true/false 에 따라 생성되는 배열의 length값이 달라집니다. 1234567891011121314151617181920212223242526272829303132333435363738394041424344451. let one = [11, 12], two = [21, 22]; let result = one.concat(two); console.log(result, result.length); /* Array(4) 0: 11 1: 12 2: 21 3: 22 length: 4 __proto__: Array(0) 4 */ 2. two[Symbol.isConcatSpreadable] = false; result = one.concat(two); console.log(result, result.length); /* Array(3) 0: 11 1: 12 2: Array(2) 0: 21 1: 22 length: 2 Symbol(Symbol.isConcatSpreadable): true __proto__: Array(0) length: 3 __proto__: Array(0) 3 */ 3. two[Symbol.isConcatSpreadable] = true; result = one.concat(two); console.log(result, result.length); /* Array(4) 0: 11 1: 12 2: 21 3: 22 length: 4 __proto__: Array(0) 4 */ one 배열의 [11, 12]에 concat()의 파라미터에 지정한 two 배열 [21, 22]를 결합하면,21 과 22가 각각 분리되어 one 배열 끝에 추가됩니다.[11, 12, 21, 22] length: 4 가 반환됩니다.Array.prototype에 [Symbol.isConcatSpreadable]을 작성하지 않았으므로 디폴트 true값 입니다.일반적인 concat()메서드 사용입니다. two[Symbol.isConcatSpreadable]에 false 값을 할당했습니다.concat() 메서드로 one 배열과 two 배열을 결합하면 two 배열의 [21, 22]를 분리하지 않고배열 자체를 첨부합니다. [11, 12, Array[2]] 형태로 결합되어 length 값은 3을 갖습니다.개발자 도구에서 Array[2]를 살펴보면 [21, 22] length: 2 가 할당되어 있고Symbol(Symbol.isConcatSpreadable): true로 isConcatSpreadable = false 가 적용된 것을 볼 수 있습니다. 기본값 isConcatSpreadable = true 인 경우 프로퍼티에 나타나지 않습니다. two[Symbol.isConcatSpreadable]에 true를 할당하였으며 디폴트 값 true와 같습니다.one 배열에 two 배열의 [21, 22]가 분리되어 끝에 첨부됩니다.[11, 12, 21, 22] 형태가 됩니다. Array-like 오브젝트에서 사용유사 배열(Array-like) 오브젝트도 concat()을 사용할 수 있습니다. 하지만 유사 배열 오브젝트는 isConcatSpreadable = true 값을 가지지 않습니다. concat()으로 배열을 하나씩 분리하여 추가 병합하고 싶다면 isConcatSpreadable를 사용하여 true로 설정해줍니다. isConcatSpreadable > Array-like123456789101112131415161718192021222324252627282930313233343536373839let one = [11, 12]; 1. let fiveSix = { 0: \"five\", 1: \"six\", length: 2 }; let result = one.concat(fiveSix); console.log(result, result.length); /* Array(3) 0: 11 1: 12 2: Object{ 0: \"five\", 1: \"six\", length: 2} length: 3 __proto__: Array(0) 3 */ 2. let arrayLike = { [Symbol.isConcatSpreadable]: true, 0: \"five\", 1: \"six\", length: 2 }; result = one.concat(arrayLike); console.log(result, result.length); /* Array(4) 0: 11 1: 12 2: \"five\" 3: \"six\" length: 4 __proto__: Array(0) 4 */ one은 배열 [11, 12]이고 fiveSix는 Array-like {0: “five”, 1” “six”, length:2}입니다.이 상태에서 concat()을 실행하면 [11, 12, Object] 형태가 됩니다.오브젝트 형태가 분리되어 첨부되지 않습니다. Array-like 오브젝트에 [Symbol.isConcatSpreadable]: true를 작성하여,concat()을 실행하면 Array-like 오브젝트의 각 프로퍼티를 분리하여 배열 끝에 첨부합니다. unscopable with문에서 사용하며 값이 true 이면 프로퍼티를 전개 하지 않습니다. [Symbol.unscopables] = true/false Symbol.unscopables 값이 true일 때, with 문에서 프로퍼티를 전개하지 않으므로Object 오브젝트의 프로퍼티 키를 사용하면 에러가 발생합니다. ES5 에서 “use strict” 범위에 with 문을 사용하면 에러가 발생합니다.ES6도 마찬가지 입니다. ES6에서 stirct모드는 보편적인 환경이므로 Symbol.unscopables를 사용할 빈도가 그다지 높지 않습니다. Symbol.unscopables123456789101112131415161718192021222324// \"use strict\" 를 선언하면 with 에서 에러 발생 let sports = { soccer: \"축구\", baseball: \"야구\" }; 1. with(sports){ console.log(soccer, baseball); }; 2. sports[Symbol.unscopables] = { baseball: true }; try { 3. with (sports) { console.log(soccer); let value = baseball; } } catch (e) { console.log(e.message); }; // 축구 야구 // 축구 // baseball is not defined with 문을 실행하면 파라미터에 작성한 sports 오브젝트의 프로퍼티가 펼쳐진(spread)형태가 됩니다.따라서 프로퍼티 값을 구할 때 sports[“soccer”]형태로 작성하지 않고 soccer만 작성합니다.soccer의 프로퍼티 값인 “축구”가 반환되고 baseball의 프로퍼티 값도 마찬가지로 반환되어“축구” “야구”가 출력됩니다. with(sports)를 실행할 때 sports 오브젝트에서 전개하지 않을 프로퍼티를 작성합니다.baseball: true를 설정해줬으므로 with 문에서 baseball 프로퍼티가 전개되지 않습니다.그러므로 soccer의 프로퍼티 값인 “축구”만 출력됩니다. with(sports) 문에서 baseball 프로퍼티가 전개되지 않으므로 baseball을 변수에 할당하면에러가 발생합니다. species 개념 Symbol.species는 constructor를 반환합니다.constructor를 반환한다는 것은 constructor로 인스턴스를 생성하여 반환하는 것과 같습니다.Symbol.species를 오버라이드 할 수 있으며, 개발자 코드로 반환되는 인스턴스를 변경할 수 있습니다. species의 개념을 살펴 봅니다. species 개념1231. let arrayObj = [1, 2, 3]; 2. let sliceOne = arrayObj.slice(1, 3); 3. let sliceTwo = sliceOne.slice(1, 2); let arrayObj = [1, 2, 3]을 실행하면 Array 오브젝트(인스턴스)를 생성하고 엘리먼트 값으로1, 2, 3을 설정합니다. 아래는 [1, 2, 3]이 할당된 arrayObj 인스턴스 구조입니다. arrayObj 구성을 보면 prototype이 없으며 __proto__만 있습니다.__proto__에는 Array 오브젝트의 prototype에 연결된 프로퍼티가 첨부되어 있습니다.Array의 오브젝트 프로퍼티가 연결되어 있지만 arrayObj에는 연결된 프로퍼티가 없습니다.따라서 arrayObj는 Array 오브젝트가 아닌 Array 인스턴스입니다. arrayObj.slice(1, 3) 코드는 자바스크립트에서 일반적으로 사용하는 [1, 2, 3].slice(1, 3)형태와 다릅니다.[1, 2, 3]으로 Array 인스턴스를 생성하여 arrayObj에 할당하고, arrayObj에 있는 slice()를 호출하는 형태 입니다. 실행하면 [1, 2, 3]에서 2와 3이 반환되어 sliceOne 변수에 할당될 것으로 생각할 수 있습니다.하지만, sliceOne변수에 할당되는 것은 Array 인스턴스 입니다. 2 와 3이 인스턴스 값으로 설정됩니다.arrayObj 와 sliceOne 둘다 Array 오브젝트 인스턴스 입니다. 배열의 엘리먼트 값이 달라집니다. 여기서 중요한 점은 Array 인스턴스(arrayObj)의 slice()를 호출하면 slice()실행 결과가 반영된Array 인스턴스가 반환된다는 점입니다. Array 인스턴스가 반환되므로 sliceOne 인스턴스를 지정하여 slice()를 호출할 수 있습니다. sliceOne 인스턴스를 지정하여 slice()를 호출하고 마찬가지로 Array 인스턴스가 반환됩니다.Symbol.species를 이해하려면 먼저 이에 대한 이해가 필요합니다. species Symbol.species는 constructor를 반환합니다. Symbol.species는 static 액세서 프로퍼티로 getter만 있고 setter는 없습니다.Array, Map, Set, Promise, RegExp, ArrayBuffer, TypedArray 오브젝트에 Symbol.species가 빌트인으로 포함되어 있습니다. 위에 거론된 빌트인 오브젝트를 상속받는 클래스에 Symbol.species를 작성하면, 빌트인 오브젝트의 Symbol.species가 오버라이드됩니다. 이를 통해 클래스의 Symbol.species에서 다른 오브젝트를 반환할 수 있습니다. 예를 들어 인스턴스의 slice()를 호출하면 slice()를 호출한 인스턴스를 반환하지만, 클래스에 Symbol.species를 작성하여 인스턴스가 아닌 Array 오브젝트를 반환할 수 있습니다. (인스턴스 대신 인스턴스의 부모 오브젝트 반환) 123456789101112131415161. class ExtendArray extends Array { static get [Symbol.species]() { return Array; } }; 2. let oneInstance = new ExtendArray(1, 2, 3); 3. let twoInstance = oneInstance.slice(1, 2); 4. console.log(oneInstance instanceof ExtendArray); 5. console.log(twoInstance instanceof Array); 6. console.log(twoInstance instanceof ExtendArray); //true //true //false instanceof 연산자는 생성자의 프로토 타입 속성이 객체의 프로토 타입 체인에 나타나는지 테스트하여 true/false값을 반환합니다. ExtendArray 클래스에서 Array 오브젝트를 상속받습니다. 클래스에 static 메서드이면서 getter를 사용하여 Symbol.species를 작성하였습니다. Array 오브젝트의 Symbol.species가 오버라이드 됩니다.인스턴스의 Array 오브젝트 메서드를 호출하면 오버라이드된 Symbol.species가 호출됩니다.그리고 return Array;를 하므로 메서드를 호출한 인스턴스가 반환되지 않고 Array 인스턴스가 반환됩니다. return Array가 Array 오브젝트의 constructor를 반환하지만, return 문은 오른쪽의 표현식을 평가하고 평가 결과를 반환하므로 Array 오브젝트의 constructor를 호출하고 그 결과인 Array 인스턴스를 반환합니다. new 연산자로 ExtendArray()룰 호출하면서 파라미터로 1, 2, 3을 넘겨줬습니다.ExtendArray 클래스에서 Array 오브젝트를 상속받았으므로 생성한 인스턴스는 Array 오브젝트 특성을 갖습니다. oneInstance 인스턴스에 상속받은 Array 오브젝트가 존재하므로 slice()를 호출할 수 있습니다.slice()가 호출되면 ExtendArray 클래스에 getter로 작성된 Symbol.species()가 호출되며,oneInstance가 반환되지 않고 Array 인스턴스를 생성하여 반환합니다. new ExtendArray(1, 2, 3)으로 생성한 인스턴스를 oneInstance에 할당했으므로 true가 출력됩니다. oneInstance.sliceOne(1, 2)를 실행하면 클래스에 작성한 Symbol.species()가 호출됩니다.return Array로 생성한 인스턴스를 twoInstance에 할당했으므로 true가 출력됩니다. new ExtendArray()로 생성한 인스턴스를 twoInstance에 할당한 것이 아니라, Array 오브젝트로 생성한 인스턴스(oneInstance)를 할당했으므로 false가 출력됩니다.이처럼 Symbol.species로 반환되는 인스턴스를 변경할 수 있습니다. 다른 Class 반환 위 에서 return 문에서 상속받은 Array 오브젝트를 반환하는 형태를 살펴봤습니다.여기서는 다른 클래스를 반환하는 형태를 살펴봅니다. other-Class12345678910111213141516171819202122232425262728291. class ExtendOne extends Array{ showOne(){ console.log(\"ExtendOne\"); } }; 2. class ExtendTwo extends Array{ static get [Symbol.species]() { return ExtendOne; } showTwo(){ console.log(\"ExtendTwo\"); } }; 3. let twoInst = new ExtendTwo(10, 20, 30); let threeInst = twoInst.filter(value =&gt; value &gt; 10); console.log(threeInst); 4. threeInst.showOne(); console.log(threeInst.showTwo); /* ExtendOne(2) 0: 20 1: 30 length: 2 __proto__: Array */ // ExtendOne // undefined ExtendOne 클래스에서 Array 오브젝트를 상속받습니다.이 클래스를 아래에 작성한 2. ExtendTwo 클래스의 [Symbol.species]에서 반환합니다. [Symbol.species] ( )에서 ExtendOne을 return 하므로 클래스를 반환하는 것처럼 보입니다만,클래스의 constructor를 반환하므로 인스턴스로 생성하여 반환하게 됩니다.이와 같이 [Symbol.species] ( )를 호출한 인스턴스가 아닌 다른 인스턴스로 반환할 수 있습니다. twoInst.filter()가 호출되면, 우선 twoInst 인스턴스를 생성한 ExtendTwo 클래스에서 [Symbol.species] 작성 여부를 체크합니다. 존재하면 클래스의 [Symbol.species] ()를 호출하고 존재하지 않으면 상속받은 Array 오브젝트의 [Symbol.species] ()를 호출합니다. 호출된 [Symbol.species] ()에서 ExtendOne 인스턴스를 반환하여 ExtendTwo 클래스에서 Array 오브젝트를 상속받았으므로 filter() 메서드를 호출할 수 있습니다.ExtendOne 클래스에서 filter() 메서드를 지원하지 않는 오브젝트를 상속받으면 Error가 발생합니다. filter() 실행 결과 twoInst에 설정하지 않고 반환할 인스턴스에 할당합니다. 즉 threeInst 인스턴스에 할당됩니다. 따라서 twoInst 인스턴스 값 [10, 20, 30]이고 threeInst 인스턴스 값은 [20, 30]입니다. return ExtendOne으로 인해 ExtendOne 인스턴스가 threeInst에 설정되므로,threeInst 인스턴스의 showOne()을 호출할 수 있습니다. showTwo는 존재하지 않으므로 undefined가 출력됩니다. null 반환 [Symbol.species] ()에서 null을 반환하면 디폴트[Symbol.species] ()가 호출됩니다. 123456789101112class ExtendOne extends Array{ static get [Symbol.species]() { return null; } }; 1. let oneInst = new ExtendOne(10, 20, 30); let arrayInst = oneInst.filter(value =&gt; value &gt; 10); 2. console.log(arrayInst instanceof Array); 3. console.log(arrayInst instanceof ExtendOne); // true // false oneInst.filter()를 호출하면 ExtendOne 클래스의 [Symbol.species] ()가 호출되며 null를 반환합니다.null이 반환되면 디폴트 [Symbol.species] ()가 호출됩니다.ExtendOne 클래스에 작성하지 않았지만 상속받은 Array 오브젝트에 있으므로 [Symbol.species] ()가 호출되며Array 인스턴스를 생성하여 반환합니다. 따라서 filter()를 실행할 수 있습니다. oneInst.filter()를 실행하면 [Symbol.species] ()에서 Array 인스턴스를 반환하여 arrayInst에 할당하므로 true값이 출력됩니다. [Symbol.species] ()에서 Array 인스턴스를 반환하므로 arrayInst는 ExtendOne 클래스의 인스턴스가 아닙니다.false toPrimitive 오브젝트를 프리미티브(원시값) 타입으로 변환합니다. 자바스크립트의 프리미티브 값은 number, string, boolean, undefined, null 그리고 symbol입니다.+연산자는 앞뒤의 값 타입에 따라 값을 더하거나 연결합니다. (1+2)는 3이되지만 (1+”2”)는 12가 됩니다.반면 곱하기(*), 나누기(/), 빼기(-)는 연산만 하고 연결은 하지 않습니다. 연산 대상이 Number 타입이 아닐 경우 엔진의 ToPrimitive 모듈을 기준으로 값을 변환합니다. 예를 들어, 숫자에 true를 더하면 1로 변환하여 더하고, 문자열에 true를 더하면 “true”로 변환하여 연결합니다. 이때 Symbol.toPrimitive()로 ToPrimitive를 오버라이드하여 엔진의 변환 기준을 변경할 수 있습니다.(엔진의 디폴트 변환 값을 개발자 코드로 변경) 세 가지 모드Symbol.toPrimitive() 에서 값을 변환하는 기준은 이를 호출하는 형태에 따라 결정됩니다. 엔진은 호출한 곳의 형태에 따라 Symbol.toPrimitive(hint) 파라미터에 세 가지 모드(Mode)를 설정합니다.개발자가 작성하는 것이 아니라 엔진이 다음 기준으로 설정하는 것입니다. Number 환경이면 “number”를 toPrimitive(hint) 파라미터에 설정합니다. String 환경이면 “string”을 toPrimitive(hint) 파라미터에 설정합니다. Number 와 String 환경이 아니면 toPrimitive(hint) 파라미터에 “default”를 설정합니다. 1234567891011121314151617let obj = { [Symbol.toPrimitive](hint){ if (hint === \"number\"){ return 30; }; if (hint === \"string\"){ return \"문자열\"; }; return \"디폴트\"; } }; 1. console.log(\"1:\", 20 + obj); // 1: 20디폴트 2. console.log(\"2:\", 20 * obj); // 2: 600 3. console.log(\"3:\", obj + 50); // 3: 디폴트50 4. console.log(\"4:\", +obj + 50);// 4: 80 5. console.log(\"5:\", `${obj}` + 123); // 5: 문자열123 (20 + obj)와 같이 오브젝트가 연산 대상이면, 자동으로 obj 오브젝트의 [Symbol.toPrimitive] ()가 호출됩니다. 파라미터에 “default”가 설정됩니다. 함수에서 “디폴트”를 반환하여 문자열을 연결하는 형태가 되어 “20디폴트”가 출력됩니다. 곱하기(*)를 사용하였으므로 파라미터에 “number”가 설정됩니다. 함수에서 30을 반환하며 20을곱해 600이 출력됩니다. (20 + obj)에서 파라미터에 “default”가 설정되듯이 마찬가지로 “default”가 설정됩니다.함수에서 “디폴트”를 반환하여 50을 연결하므로 “디폴트50”이 출력됩니다. +obj 에서 +는 단항+연산자로 피연산자를 Number 타입으로 변환합니다.함수에서 30을 반환하며 50을더해 80이 출력됩니다. 템플릿을 사용한 형태로 파라미터에 “string”이 설정됩니다. 함수에서 “문자열”을 반환하여${obj}가 “문자열”로 변환됩니다. 123을 연결하여 “문자열123”이 출력됩니다. 이터레이터 Symbol.iterator()는 이터레이터 오브젝트를 생성하여 반환합니다. Symbol.iterator는 String, Array, Map, Set, TypedArray 오브젝트의 prototype에 연결되어 있습니다.오브젝트의 [Symbol.iterator]를 호출하면 이터레이터 오브젝트를 생성하여 반환합니다. Object 오브젝트에는 Symbol.iterator가 없습니다만, 개발자 코드로 구현할 수 있습니다. Array.prototype[Symbol.iterator]배열 처리를 위한 이터레이터 오브젝트를 생성하여 반환합니다. 배열 엘리먼트를 하나씩 처리할 수 있습니다. iterator-Array1234567891011121314151617181920212223let numberArray = [10, 20]; for (let value of numberArray){ console.log(value); }; let iteratorObj = numberArray[Symbol.iterator](); console.log(iteratorObj.next()); console.log(iteratorObj.next()); console.log(iteratorObj.next()); //10 //20 /*Object value: 10 done: false __proto__: Object*/ /*Object value: 20 done: false __proto__: Object*/ /*Object value: undefined done: true __proto__: Object*/ numberArray는 Array 오브젝트 인스턴스 구조입니다.Symbol.iterator()를 호출할 수 있습니다. numberArray[Symbol.iterator] ()는 numberArray 인스턴스의 Symbol.iterator()를 호출하는 것으로 이터레이터 오브젝트를 생성하여 반환합니다. 이터레이터 오브젝트를 사용하여 배열 엘리먼트를 하나씩 처리할 수 있습니다. next()를 호출할 때마다 배열 엘리먼트 값을 {value: 10, done:false} 형태로 반환합니다. String.prototype[Symbol.iterator]문자열 처리를 위한 이터레이터 오브젝트를 반환합니다. 문자열을 문자 단위로 하나씩 처리할 수 있습니다. iterator-string12345678910111213141516let stringValue = \"1A\"; for (let value of stringValue) { console.log(value); } let iterObj = stringValue[Symbol.iterator](); console.log(iterObj.next()); console.log(iterObj.next()); console.log(iterObj.next()); // 1 // A // Object {value: \"1\", done: false} // Object {value: \"A\", done: false} // Object {value: undefined, done: true} “1A”를 1과 A로 분리하여 for-of문을 실행합니다. 문자 단위로 반복할 수 있는 것은String.prototype에 Symbol.iterator가 있기 때문입니다.for-of문에서 stringValue를 String 오브젝트로 생성하고 그 안에 Symbol.iterator()를 사용합니다. stringValue[Symbol.iterator] ();형태로 호출하면 이터레이터 오브젝트를 반환합니다.이터레이터 오브젝트를 사용하여 문자열을 문자 단위로 하나씩 처리할 수 있습니다. next()를 호출할 때마다 문자열의 문자를 value 프로퍼티에 설정하고 {value: “1”, done: false}형태로 반환합니다. Object 이터레이션Object 오브젝트에는 기본적으로 Symbol.iterator를 갖고 있지 않습니다. (for-of 등 반복처리불가.) Object 오브젝트에 Symbol.iterator를 작성하면 반복 처리를 할 수 있습니다. iterator-Object123456789101112131415161718191. let obj = { [Symbol.iterator](){ 2. return { maxCount: 2, count: 0, next(){ if (this.count &lt; this.maxCount){ return {value: this.count++, done: false}; } return {value: undefined, done: true}; } } } }; 3. let iteratorObj = obj[Symbol.iterator](); console.log(iteratorObj.next()); console.log(iteratorObj.next()); console.log(iteratorObj.next()); Object 오브젝트를 반복처리 하기 위해서 [Symbol.iterator] ()를 obj prototype에 작성해줬습니다. 호출된 obj[Symbol.iterator] ()의 return으로 반환된 오브젝트를 iteratorObj에 할당합니다. iteratorObj에 next()가 있으므로 iteratorObj.next() 형태로 호출할 수 있습니다. 제너레이터 Object 오브젝트에 Symbol.iterator를 제너레이터 함수로 작성하면, 이터레이터로 반복할 때 마다 yield를 수행합니다. 123456781. obj[Symbol.iterator] = function*(){ yield 10; yield 20; yield 30; }; 2. let result = [...obj]; console.log(result); //[10, 20, 30] obj 오브젝트의 [Symbol.iterator]를 제너레이터 함수로 작성하였습니다.이터레이터로 반복할 때 마다 yield 표현식을 평가하여 값을 반환합니다. 대괄호 [] 안에 spread 연산자로 obj 오브젝트를 작성했습니다. […obj]를 시작하면엔진에서 obj에 [Symbol.iterator] 작성 여부를 체크합니다. 작성되있으므로[Symbol.iterator] ()가 호출되며 이터레이터 오브젝트를 생성하여 반환합니다.이터레이터가 반복될 때마다 yield에서 반환한 값을 배열에 첨부합니다.반복이 끝나면 생성된 배열을 반환합니다. asyncIterator(): 비동기 반복 Symbol.asyncIterator는 오브젝트의 asyncIterator 기본 값을 지정합니다.asyncIterator 프로퍼티가 오브젝트에 설정되면 await for of 루프(loop)에서 비동기 반복할 수 있습니다. 오브젝트가 비동기 반복이 가능하려면 Symbol.asyncIterator 프로퍼티 키가 존재해야합니다. 12345678910111213141516const myAsyncIterable = { async* [Symbol.asyncIterator]() { yield \"hello\"; yield \"async\"; yield \"iteration!\"; } }; (async () =&gt; { for await (const x of myAsyncIterable) { console.log(x); // \"hello\" // \"async\" // \"iteration!\" } })(); 오브젝트의 [Symbol.asyncIterator] 속성을 설정해줌으로써 비동기 이터러블을 커스텀하여 정의할 수 있습니다. 현재 기본적으로 [Symbol.asyncIterator] 프로퍼티가 built-in 되어 있는 JavaScript 오브젝트는 없습니다. 하지만 WHATWG(Web Hypertext Application Technology Working Group, WHATWG)에서는최근에 [Symbol.asyncIterator]가 스펙에 기준에 도달함으로써 비동기 반복이 가능한 첫 번째 built-in 오브젝트로 설정되었습니다. WHATWG 위키WHATWG 공식홈페이지 match(): match 결과 반환 String 오브젝트에서 정규 표현식을 사용할 수 있는 메서드match(), replace(), search(), split() 에 대응하는 Symbol 오브젝트 Symbol.match(), Symbol.replace(), Symbol.search(), Symbol.split()이 있습니다. String.prototype.match()가 호출되면 먼저 오브젝트에서 Symbol.match 작성 여부를 체크합니다.작성돼있다면 오브젝트의 Symbol.match()를 호출합니다. String.prototype.match()는 호출되지 않습니다. 12345678910111213141. console.log(\"1\", \"Sports\".match(/s/)); // 1: [0: \"5\", index: 5, input: \"Sports\"] class MatchCheck { constructor(base) { this.base = base; } 2. [Symbol.match](target) { return this.base.indexOf(target) &gt;= 0; } } 3. let instMatch = new MatchCheck(\"sports\"); 4. console.log(\"2:\", \"po\".match(instMatch)); // 2: true “Sports”에 패턴/s/를 매치하면 매치 결과를 배열로 반환합니다. “Sports”가 문자열이므로엔진이 String.prototype에 연결된 프로퍼티로 String 인스턴스를 생성합니다.생성한 인스턴스에 “Sports”를 설정한 후 match()를 호출하면서 /s/를 파라미터로 넘겨줍니다. Symbol.match()의 target 파라미터에 설정된 문자열이 this.base에 포함되어 있으면 true를 반환하고, 아니면 false를 반환합니다. new MatchCheck(“sports”);를 실행하면 constructor가 호출되고 파라미터로 넘겨 준 “sports”가 this.base에 설정됩니다. “po”.match(instMatch)가 호출되면 파라미터에 작성한 instMatch 인스턴스에서 Symbol.match의 작성 여부를 체크합니다. 존재하므로 Symbol.match(target)을 호출하면서 “po”를 파라미터 값으로 넘겨줍니다.Symbol.match()에서 “sports” 와 “po”로 match를 행하며, “po”가 있으므로 true를 반환합니다. matchAll() Symbol.matchAll 은 String 오브젝트를 정규표현식으로 평가하여반환결과를 이터레이터 오브젝트로 반환합니다. Symbol.matchAll은 String.prototype.matchAll()메서드에 의해 호출 됩니다. +참고 RegExp.prototype[@@matchAll] ( ) 123456let re = /[0-9]+/g; let str = '2016-01-02|2019-03-07'; let result = re[Symbol.matchAll](str); console.log(Array.from(result, x =&gt; x[0])); // expected output: Array [\"2016\", \"01\", \"02\", \"2019\", \"03\", \"07\"]","link":"/2020/04/06/Symbol%20%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%20-ECMAScript/"},{"title":"WeakMap 오브젝트 -ECMAScript","text":"WeakMap 오브젝트 개요 GC(Garbage Collection) new WeakMap 인스턴스 생성 set(): key, value 설정 get(): key가 같은 value 반환 has(): key 존재 여부 delete(): 엘리먼트 삭제 개요 WeakMap는 약한(weak) Map 오브젝트 입니다.Map 오브젝트와 작성 방법과 형태는 같지만, 약한 점이 있습니다. WeakMap 오브젝트는 key에 Object만 작성할 수 있으며 string, numbers, symbol 등의 (원시 데이터형)은 허용되지 않습니다. value는 타입에 제한이 없습니다. key에 오브젝트만 지정할 수 있는 것이 중요하며, 그 이유를 이해하는 것이 WeakMap 오브젝트의 사용 핵심입니다. ex) let music = {title: “음악”} 코드를 실행하면 music 변수에 Object 오브젝트를 생성하여 할당합니다.다시 music 변수에 {singer: “가수”}를 할당하면 {title: “음악”}을 사용할 수 없게 됩니다.당연한 예시지만, 이로 인해 발생하는 문제를 해결하기 위한 것이 WeakMap 오브젝트의 목적입니다. GC(Garbage Collection)GC121. let music = {title: \"음악\"}; 2. let music = {singer: \"가수\"}; 생성된 Object 오브젝트가 메모리에 설정되며, 메모리 주소가 music 변수에 할당됩니다.music을 전개하면 {title: “음악”}이 전개됩니다.music을 전개하다는 것은 music 변수에 설정된 메모리 주소의 오브젝트를 전개하는 것입니다. music = {singer: “가수”}도 Object 오브젝트를 생성하여 메모리에 설정합니다. 생성한 Object 오브젝트를 music 변수에 할당하므로 music 변수의 메모리 주소가 바뀌게 됩니다.즉, {title: “음악”}을 사용할 수 없게 됩니다. 이때 엔진은 사용하지 않는 {title: “음악”}을 메모리에서 지웁니다.이를 GC(Garbage Collection)라고 하고, GC를 수행하는 것을 Garbage Collector라고 합니다.GC를 하지 않으면 사용하지 않는 메모리가 쌓이게 됩니다. 즉 메모리 릭(Memory Leak)이 발생합니다. GC가 사용하지 않게 된 오브젝트를 메모리에서 지우면, WeakMap 인스턴스의 key에서 오브젝트를 참조할 수 없게됩니다. 메모리에 존재하지 않는 오브젝트를 참조하는 것은 문제가 됩니다. 이때, 엔진이 WeakMap 인스턴스의 key 와 value를 삭제합니다. 개발자 코드로 삭제하지 않아도 됩니다. 이런 점을 반영한 것이 WeakMap 오브젝트입니다. WeakMap 오브젝트에서 제공하는 메서드는 간단합니다.set(), get(), has(), delete()만 있습니다. WeakMap 인스턴스에 [key, value]를 CRUD(Create, Read, Update, Delete)하기 위한 기본적인 메서드만 있습니다.WeakMap 인스턴스는 열거할 수 없습니다. 그러므로 forEach(), entries() 메서드가 없습니다. Map 오브젝트는 size 프로퍼티가 있어 현재의 [key, value] 수를 알 수 있으나, WeakMap 오브젝트는 size 프로퍼티가 없어서 현재의 [key, value] 수를 알 수 없습니다. length 프로퍼티도 개발자 도구에서는 표시되나 실제로 사용하면 undefined를 반환합니다. new WeakMap 인스턴스 생성 WeakMap 인스턴스를 생성하여 반환합니다. new WeakMap() 선택적 파라미터Object, 이터러블 오브젝트안에 작성 [key, value] 형태 반환생성한 WeakMap 인스턴스 123456const emptyWeakMap = new WeakMap(); let obj = {}; const newWeakMap = new WeakMap([ [obj, \"오브젝트\"] ]); WeakMap()에 파라미터를 작성하지 않아도 WeakMap 인스턴스를 생성할 수 있습니다.이는 상황에 따라 엘리먼트를 추가하려는 의도입니다. WeakMap() 파라미터에 이터러블 오브젝트를 작성하고 그 안에 [key, value] 형태로 작성합니다.key에 오브젝트 이름을 지정하고 value에 값을 작성합니다. key인 오브젝트 자체에 프로퍼티가 있으므로 value는 오브젝트에 대한 주석(설명)이라고 볼 수 있습니다. set(): key, value 설정 WeakMap 인스턴스에 key 와 value를 설정합니다. WeakMap.prototype.set() 파라미터 Object (key, Object/Function 등의 오브젝트) any (value) 반환key, value가 추가된 WeakMap 인스턴스 첫 번째 파라미터에 key로 설정될 Object, Function과 같은 오브젝트를 지정합니다.string, numbers, boolean, null, undefined, symbol을 지정하면 에러가 발생합니다.두 번째 파라미터에 임의의 값을 작성합니다. set-112345678910111213141516171819202122\"use strict\"; debugger; const newWeakMap = new WeakMap(); 1. (function(){ var obj = {item: \"weakmap\"}; newWeakMap.set(obj, \"GC\"); }()); const newMap = new Map(); 2. (function(){ var obj = {item: \"map\"}; newMap.set(obj, \"Keep\"); }()); 3. setTimeout(function() { 4. console.log(\"1:\", newWeakMap); 5 .console.log(\"2:\", newMap); }, 1000); // 1: WeakMap {Object {item: \"weakmap\"} =&gt; \"GC\"} // 2: Map {Object {item: \"map\"} =&gt; \"keep\"} 위 코드는 상황에 따라 실행 결과가 다르게 출력될 수 있습니다.개발자 도구에서 Sources로 들어가 .js파일을 선택해 소스 코드를 화면에 표시하고F5를 눌러 새로고침 합니다. 소스 코드 두 번째 줄에 debugger를 작성했으므로 이 앞에서 멈추게 됩니다.debugger로 멈춘 시점에서 한 줄씩 소스 코드를 이동하면, 실행 결과의 1번 형태로 출력되지 않고, “WeakMap {}” 형태가 출력될 수 있습니다. 이는 소스 코드를 한 줄씩 따라 가는 동안 GC가 실행되어 WeakMap 인스턴스의 [key, value]를 삭제하기 때문입니다. (function(){코드}); 형태는 자동으로 함수가 실행됩니다. 함수를 저장하지 않고 한 번만 사용하려는 것이 목적입니다. 함수 실행이 끝나 함수를 빠져나오면 함수에서 선언한 변수가 저장되지 않으므로 다시 사용할 수 없습니다. 이렇게 사용하지 않게 된 것을 Garbage Collector가 메모리에서 삭제합니다.newWeakMap.set(obj, “GC”)을 실행하면, obj 오브젝트를 참조하는 메모리 주소가 newWeakMap 인스턴스의 key에 설정됩니다. 함수 실행이 끝나 함수를 빠져나오면 함수블록의 obj 변수가 메모리에서 삭제됩니다. 따라서 newWeakMap 인스턴스의 key에서 obj 오브젝트를 참조할 수 없게 됩니다.이때, obj 변수에서 참조하는 {item: “weakmap”}이 메모리에서 지워지면 newWeakMap 인스턴스의 [key, value]를 삭제합니다. 이것이 WeakMap 오브젝트의 목적입니다. 위의 1번 코드와 같은 형식이며 WeakMap이 아닌 Map을 사용한 것이 다릅니다.함수를 빠져나오면 obj 오브젝트를 참조하는 Map 인스턴스 [key, value]를 삭제하지 않고 유지합니다.이점이 WeakMap 과 Map의 차이입니다. 1초 후에 setTimeout 콜백 함수를 실행하게 됩니다. 1초 간격을 둔 것은 GC의 실행 여부에 따른 상태를 출력하기 위해서 입니다. console.log()로 newWeakMap을 찍으면 두 가지 형태로 출력될 수 있습니다.newWeakMap 인스턴스의 key로 등록한 오브젝트가 메모리에서 삭제되면 newWeakMap 인스턴스의 [key, value]가 삭제되므로 빈 Object 오브젝트 {}가 출력됩니다. 메모리에서 삭제되지 않은 상태라면, newWeakMap 인스턴스에 [key, value]가 남아 있으므로 1: WeakMap {Object {item: “weakmap”} =&gt; “GC”} 형태로 출력됩니다. newMap 인스턴스는 GC의 영향을 받지 않으므로 항상 Map {Object {item: “map”} =&gt; “keep”} 형태로 출력됩니다. set-212345678910111213const newWeakMap = new WeakMap(); 1. let sportsObj = {}; newWeakMap.set(sportsObj, \"Object-1\"); 2. sportsObj = {}; 3. newWeakMap.set(sportsObj, \"Object-2\"); 4. setTimeout(function() { console.log(newWeakMap); }, 1000); // WeakMap {Object { } =&gt; \"Object-2\"} 또는 // WeakMap {Object { } =&gt; \"Object-2\"}, WeakMap {Object { } =&gt; \"Object-1\"} sportsObj 변수에 Object 오브젝트를 생성하여 할당하고, set( )의 첫 번째 파라미터에 sportsObj를 지정하여 추가합니다. 새로운 Object 오브젝트를 생성하여 sportsObj 변수에 할당하므로 sportsObj가 참조하는 메모리 주소가 변경됩니다. newWeakMap 인스턴스에 key로 설정된 sportsObj가 참조하는 Object 오브젝트는 GC 대상이 됩니다. set( )의 첫 번째 파라미터에 sportsObj를 지정하여 설정합니다. newWeakMap 인스턴스에 sportsObj가 있지만, sportsObj가 참조하는 메모리 주소가 다르므로 추가됩니다. 따라서 newWeakMap 인스턴스에는 sportsObj가 참조하는 Object 오브젝트가 두 개 존재하게 됩니다. 개발자 도구에서 소스 코드에 중단점(Break Point)를 걸어 newWeakMap 인스턴스를 펼치면 두 개의 Object 오브젝트가 표시됩니다. set-312345678const newWeakMap = new WeakMap(); let fn = function(){}; newWeakMap.set(fn, \"함수\"); newWeakMap.set(fn, \"value 변경\"); console.log(newWeakMap); // WeakMap {function =&gt; \"value 변경\"} function 오브젝트를 생성하여 변수 fn에 할당한 후, set()에서 key로 지정하여 newWeakMap에 추가합니다.function 오브젝트도 오브젝트이므로 WeakMap 인스턴스에 설정할 수 있습니다. set( )의 첫 번째 파라미터에 fn을 지정하여 newWeakMap 인스턴스에 설정합니다. fn이 참조하는 메모리 주소가 같으므로 추가하지 않고 두 번째 파라미터 값으로 value를 변경합니다. newWeakMap 인스턴스에 [key, value]가 하나만 존재합니다. get(): key가 같은 value 반환 WeakMap 인스턴스에서 지정한 key의 value를 반환합니다. WeakMap.prototype.get() 파라미터WeakMap 인스턴스의 key와 비교할 오브젝트를 지정합니다. 반환 값key가 존재하면 value를 반환하고, 존재하지 않으면 undefined를 반환합니다. get()1234567const newWeakMap = new WeakMap(); let obj = {}; newWeakMap.set(obj, \"오브젝트\"); console.log(newWeakMap.get(obj)); // 오브젝트 obj 변수에 Object 오브젝트를 생성하여 할당하고, 이를 key로 하여 newWeakMap 인스턴스에 추가합니다. value 값은 “오브젝트”입니다.get() 파라미터에 오브젝트를 지정합니다. newWeakMap 인스턴스에 파라미터로 지정한 obj 오브젝트가 존재하므로 [key, value]에서 value를 반환합니다. has(): key 존재 여부 WeakMap 인스턴스에서 key 존재 여부를 반환합니다. true/false WeakMap.prototype.has() 파라미터에 WeakMap 인스턴스의 key와 비교할 오브젝트를 지정합니다. 오브젝트가 존재하면 true, 아니면 false를 반환합니다. has()1234567const newWeakMap = new WeakMap(); let obj = {}; newWeakMap.set(obj, \"오브젝트\"); console.log(newWeakMap.has(obj)); // true Object 오브젝트를 생성하여 obj 변수에 할당하고, 이를 key로 하여 newWeakMap 인스턴스에 설정합니다. value값은 “오브젝트”입니다.newWeakMap 인스턴스에 has()파라미터에 지정한 obj 오브젝트가 존재하므로 true가 출력됩니다. delete(): 엘리먼트 삭제 WeakMap 인스턴스에서 key가 같은 엘리먼트를 삭제합니다. WeakMap.prototype.delete() 파라미터의 WeakMap 인스턴스의 key와 비교할 오브젝트를 지정합니다. key가 존재하면 [key, value]를 삭제하고 true를 반환합니다. 존재하지 않으면 false를 반환합니다. delete()1234567const newWeakMap = new WeakMap(); let obj = {}; newWeakMap.set(obj, \"오브젝트\"); console.log(newWeakMap.delete(obj)); // true Object 오브젝트를 생성하여 obj 변수에 할당하고, 이를 key로 하여 newWeakMap에 추가한 상태에서 위 코드를 실행합니다. delete() 파라미터에 key로 등록된 obj 오브젝트를 지정했으므로 [key, value]가 삭제됩니다. 또한, 삭제에 성공했으므로 true를 반환합니다. newWeakMap 인스턴스에서 삭제하는 것이지 obj에서 참조하는 메모리의 Object 오브젝트{}가 삭제되는 것은 아닙니다.","link":"/2020/04/13/WeakMap%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"Template 리터널 -ECMAScript","text":"템플릿 리터럴(Template Literal)은 문자열 처리를 위한 템플릿을 제공합니다. 구문12345`string` `string text line 1 string text line 2` `string ${expression} string` tag `string ${expression} text` 역따옴표(``) 안에 AB${표현식}과 같이 문자열과 표현식을 작성할 수있습니다.AB는 문자열 그대로 출력되고 ${표현식}은 표현식을 평가하고 결과를 문자열로출력합니다. 문자열과 표현식의 결과를 연결하여 문자열로 표현하는 것이 템플릿 리터널입니다. 12345678910111213141516console.log(\"1:\", `123ABC가나다`); console.log(\"2:\", '라인 1\\n라인 2'); console.log(\"3:\", `첫 번째 줄 두 번째 줄`); let one = 1, two = 2; console.log(\"4:\", `1 + 2는 ${one + two}이다`); /* 1: 123ABC가나다 2: 라인 1 라인 2 3: 첫 번째 줄 두 번째 줄 4: 1 + 2는 3이다 */ \\n이 작성된 위치에서 줄을 바꿉니다. \\n을 사용하지 않고 에디터에서 줄을 바꾸면 됩니다.줄 바꿈을 한 다음 앞에 공백을 작성하면 공백이 삽입됩니다. “1 + 2는” 그대로 출력되고 ${one + two} 표현식을 평가합니다.one 변수 값 1이 one 에 할당되고 변수 값 2가 two에 할당되고one + two 의 값을 계산합니다.{1 + 2 는 3이다} 가 반환됩니다. tagged Template템플릿 앞에 tag를 작성한 형태를 태그드(tagged)템플릿 이라고 합니다. tag string ${expression} text tag 위치에 호출할 함수 이름을 작성합니다. 함수를 호출하기 전에 템플릿에서 문자열과 표현식을 분리하고 이를 파라미터 값으로 넘겨줍니다. 함수 이름이 작성된 템플릿을 테그드 템플릿이라고 하고 호출되는 함수를 태그 함수라고 합니다. 12345678let one = 1, two = 2; 2. function tagFunction(text, value) { 3. console.log(\"1:\", text[0]); 4. console.log(\"2:\", value); 5. console.log(\"3:\", text[1]); 6. console.log(\"4:\", typeof text[1]); } 1. tagFunction `1+2=${one + two}`; 템플릿에서 문자열과 표현식을 분리합니다. 1+2는 문자열이고 ${one + two}는 표현식입니다. tagFunction()을 호출하면서 분리된 문자열을 배열로 넘겨줍니다.표현식은 평가 결과인 3을 넘겨줍니다. 표현식 다음에 문자열이 없으면 빈 문자열을 배열에 추가합니다. 호출받는 함수 파라미터에 문자열과 표현식 값을 분리하여 작성합니다.배열로 넘겨 받은 문자열 [“1+2=”,””]가 text에 설정되고 표현식 값인 3이 value에 설정됩니다. text의 첫 번째 엘리먼트 값 1+2= 이 출력됩니다. value는 표현식 값 3이 출력됩니다. text[1]은 빈 문자열(“”)이며 표현식 다음에 문자열이 없을때 엔진이 빈 문자열을 추가 시킨 값입니다. text[1]의 type인 string이 출력됩니다. 호출하는 함수에서 문자열을 배열로 넘겨주므로 태그 함수의 파라미터 이름은 하나만 작성하면 됩니다.표현식 평과 결과 값은 배열이 아닌 개별로 넘겨주므로 이에 맞춰 파라미터 이름을 작성해야 합니다. 다수의 파라미터 형태123456let one = 1, two = 2; function tagFunction(text, plus, minus) { 1. console.log(text[0], plus, text[1]); 2. console.log(minus, text[2], text[3]); } tagFunction `1+2=${one + two}이고 1-2=${one - two}이다`; 표현식을 분리하여 평가하면 ${one + two}는 3이고,${one - two}는 -1 입니다.따라서 호출 받는 함수의 파라미터 형태가 ([“1+2=”,”이고 1-2=”,이다],3,-1)형태가 됩니다. text에 호출한 함수에서 문자열을 배열로 넘겨준 값이 설정됩니다. plus에 표현식 값 3이 설정됩니다. minus에 표현식 값 -1이 설정됩니다. text에 배열로 넘겨준 값 인덱스0번과 plus에 넘겨준 표현식 값 3그리고 text에 배열로 넘겨준 값 인덱스1 번이 연결되어 출력됩니다.1+2= 3 이고 1-2= minus에 넘겨준 표현식값 -1 과 text에 배열로 넘겨준 인덱스 2 번과 3번이 연결되어 출력됩니다. text[3]인덱스는 없으므로. undefined값이 출력됩니다.//-1 “이다” undefined String.raw템플릿의 표현식은 변환하지만 특수 문자와 유니코드는 문자열로 인식합니다. String.raw를 작성하고 이어서 템플릿 리터럴을 작성합니다.가급적 템플릿을 적용하지 않고 문자열로 표현하려는 경향이 강합니다. 12345678910111213141516let one = 1, two = 2; console.log(\"1:\", String.raw`1+2=${one + two}`); console.log(\"2:\", `줄 바꿈-1\\n줄 바꿈-2`); console.log(\"3:\", String.raw`줄 바꿈-1\\n줄 바꿈-2`); console.log(\"4:\", `Unicode \\u0031\\u0032`); console.log(\"5:\", String.raw`Unicode \\u0031\\u0032`); /* 1: 1+2=3 2: 줄 바꿈-1 줄 바꿈-2 3: 줄 바꿈-1\\n줄 바꿈-2 4: Unicode 12 5: Unicode u0031\\u0032 */ 템플릿 앞에 String.raw를 작성하면 문자열과 표현식 평가 결과를 연결하여 반환합니다. 템플릿에 \\n을 작성하면 줄 바꿈을 하는 것과 달리String.raw 템플릿에 \\n을 작성하면 \\n을 문자열로 출력합니다. \\u0031과 같이 템플릿에 유니코드를 작성하면 코드 포인트 값으로 변환하여 사용합니다. 변환값인 12가 출력됩니다. String.raw 템플릿에 유니코드를 작성하면 코드 포인트로 변환하지 않고 문자열로 사용합니다. \\u0031\\u0032 가 출력됩니다. String.raw(): 문자열 전개, 조합첫 번째 파라미터의 raw 프로퍼티 값인 문자열을 문자 하나씩 전개하면서 두 번째 이후의 파라미터를 조합하며 반환합니다. 첫 번째 파라미터에 {raw: “문자열”}형태로 작성합니다.raw가 아닌 다른 이름을 사용할 수 없습니다.두 번째 파라미터에 {raw: “문자열”}에 “문자열”과 조합할 값을 작성합니다.String.raw()를 템플릿의 태그 함수로 사용합니다. 1234let one = 1, two = 2; let result = String.raw({raw: \"ABCDE\"}, one, two, 3); console.log(result); // A1B2C3DE String.raw() 의 두 번째 파라미터인 one 변수에 1이 할당됩니다. String.raw() 의 세 번째 파라미터인 two 변수에 2가 할당됩니다. {raw: “ABCDE”}에서 A를 반환할 버퍼에 추가합니다. //A String.raw() 의 두 번째 파라미터 one 변수 값 1을 반환 버퍼 끝에 추가합니다. //A1 {raw: “ABCDE”}에서 B를 반환 버퍼 끝에 추가합니다. //A1B String.raw() 의 세 번째 파라미터 two 변수 값 2을 반환 버퍼 끝에 추가합니다. // A1B2 {raw: “ABCDE”}에서 C를 반환 버퍼 끝에 추가합니다. //A1B2C String.raw() 의 네 번째 파라미터 값 3을 반환 버퍼 끝에 추가합니다. //A1B2C3 {raw: “ABCDE”}에서 D를 반환 버퍼 끝에 추가합니다. //A1B2C3D String.raw() 의 다섯 번째 파라미터가 없으므로 추가하지 않습니다. {raw: “ABCDE”}에서 E를 반환 버퍼 끝에 추가합니다. // A1B2C3DE String.raw() 의 여섯 번째 파라미터가 없으므로 추가하지 않습니다. 반환 버퍼를 반환합니다. // A1B2C3DE","link":"/2020/03/29/Template%20%EB%A6%AC%ED%84%B0%EB%84%90%20-ECMAScript/"},{"title":"WeakSet 오브젝트 -ECMAScript","text":"value로 오브젝트만 사용하는 WeakSet WeakSet 개요 new WeakSet(): WeakSet 인스턴스 생성 add(): value 추가 has(): value 존재 여부 delete(): 엘리먼트 삭제 개요 WeakSet 오브젝트는 value로 오브젝트만 사용할 수 있으며, string, number, symbol과 같은 값을 사용할 수 없습니다. key는 사용하지 않습니다. WeakMap 인스턴스와 마찬가지로 GC(Garbage Collection)가 발생하면 WeakSet 인스턴스의 value가 삭제됩니다.WeakMap 오브젝트는 key가 기준이고 WeakSet 오브젝트는 value가 기준입니다. new WeakSet(): WeakSet 인스턴스 생성 WeakSet 인스턴스를 생성하여 반환합니다. new WeakSet() 파라미터는 선택으로 이터러블 오브젝트를 작성하고, 그 안에 오브젝트를 지정합니다.지정한 오브젝트가 value에 설정됩니다. new WeakSet123456789101. let newString = new String(\"문자열\"); let newNumber = new Number(12345); const newWeakSet = new WeakSet([newString, newNumber]); 2. try { new WeakSet([\"ABC\", 345]); } catch (e) { console.log(\"object 이외 지정 불가\"); }; // object 이외 지정 불가 String 인스턴스와 Number 인스턴스를 생성합니다. WeakSet 인스턴스를 생성하면서 파라미터에 이터러블 오브젝트를 작성하고, 그 안에 String 인스턴스와 Number 인스턴스를 지정합니다. 각 인스턴스의 메모리 주소가 WeakSet 인스턴스의 value로 설정됩니다. newWeakSet() 파라미터에 문자열(“ABC”) 또는 숫자(345)를 작성하면 에러가 발생합니다.Object, Function과 같은 오브젝트만 지정할 수 있습니다. add(): value 추가 WeakSet 인스턴스에 value 를 추가합니다. WeakSet.prototype.add() 파라미터에 value로 설정될 오브젝트를 지정합니다. Object, Function과 같은 오브젝트를 지정할 수 있습니다.string, number, boolean, null, undefined, symbol을 작성하면 에러가 발생합니다. add()123456789101112131415161718192021222324252627282930const newWeakSet = new WeakSet(); 1. let newString = new String(\"문자열\"); newWeakSet.add(newString); 2. let obj = {sports: \"스포츠\"}; newWeakSet.add(obj); ``` 1. &lt;mark&gt;new String()으로 인스턴스를 생성하여 변수에 할당한 후, add() 파라미터에 지정하면 newWeakSet 인스턴스에 value로 추가됩니다.&lt;/mark&gt; 문자열을 String 인스턴스로 생성하여 지정하였습니다.2. Object 오브젝트를 생성하여 변수에 할당하고 add() 파라미터에 지정하면 newWeakSet 인스턴스에 value로 추가됩니다.* * *&lt;h2 id=\"WeakSet_has\"&gt;has(): value 존재 여부&lt;/h2&gt;WeakSet 인스턴스x에서 value 존재 여부를 체크하여 반환합니다.&gt; WeakSet.prototype.has()* 파라미터에 WeakSet 인스턴스의 value와 비교할 오브젝트를 지정합니다. 오브젝트가 존재하면 true를 반환하고, 존재하지 않으면 false를 반환합니다.```js has()let newString = new String(\"문자열\"); const newWeakSet = new WeakSet([newString]); console.log(newWeakSet.has(newString)); //true has() 파라미터에 지정한 newString 인스턴스가 newWeakSet 인스턴스의 value에 있으므로 true를 반환합니다. delete(): 엘리먼트 삭제 WeakSet 인스턴스에서 value가 같은 엘리먼트를 삭제합니다. WeakSet.prototype.delete() 파라미터에 WeakSet 인스턴스에서 삭제할 오브젝트를 지정합니다. 오브젝트가 존재하면 value를 삭제하고 true를 반환합니다. 존재하지 않으면 false를 반환합니다. delete()1234567let newString = new String(\"문자열\"); const newWeakSet = new WeakSet([newString]); console.log(newWeakSet.delete(newString)); console.log(newWeakSet.has(newString)); // true // false new String()으로 인스턴스를 생성하여 newWeakSet 인스턴스에 추가한 상태입니다.delete() 파라미터에 newWeakSet 인스턴스에 존재하는 newString 인스턴스를 지정해 줬으므로 삭제하고 true를 반환합니다. 삭제가 완료되었으므로 has()로 존재 여부를 체크해보면 당연히 false를 반환하게 됩니다.","link":"/2020/04/14/WeakSet%20%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8%20-ECMAScript/"},{"title":"function (함수) -JavaScript","text":"데이터를 저장할 때는 변수를 선언하여 저장했습니다.하지만 변수에는 데이터만 저장할 수 있고,실행문을 저장할 수 없습니다.함수를 사용하면 실행문을 메모리에 저장했다가필요할 때 마다 호출하여 사용할 수 있습니다. 함수 정의문함수를 사용하여 실행문을 저장한 것을 함수 정의문이라고 합니다. 함수를 정의하는 여러 방법이 있습니다: 1.1 함수 선언 (function 문) function name([param[, param[, … param]]]) {statements} name함수 이름. param함수에 전달되는 인수의 이름. 함수는 255개까지 인수를 가질 수 있습니다. statements함수의 몸통을 구성하는 문. 세미콜론은 실행 가능한 JavaScript 문을 분리하는 데 사용됩니다. 함수 선언은 실행 문이 아니므로 세미콜론으로 끝나는 것은 일반적이지 않습니다. 1.2 표현식표현식을 사용하여 정의 할 수도 있습니다.함수 표현식은 변수에 저장 될 수 있습니다 var x = function (a, b) {return a * b};var z = x(4, 3); // 12 함수 표현식이 변수에 저장된 후에는 변수를 함수로 사용할 수 있습니다. 위의 함수는 실제로 익명 함수 (이름이없는 함수)입니다.변수에 저장된 함수는 함수 이름이 필요하지 않습니다.변수 이름을 사용하여 항상 호출됩니다. 위의 함수는 실행 가능한 명령문의 일부이므로 세미콜론으로 끝납니다. Self-invoking functions함수 표현식은 자기 호출을 할수 있습니다.자체 호출 표현식은 호출되지 않고 자동으로 호출 (시작)됩니다.표현식 뒤에 ()가 있으면 함수 표현식이 자동으로 실행됩니다. 함수 선언을 자체 호출 할 수 없습니다. 함수 주위에 ()괄호를 추가하여 함수 표현식임을 표시해야합니다. (function () {var x = “Hello!!”; // 자체 호출되어 실행됩니다.})(); Function HoistingHoisting은 변수 선언 및 함수 선언에 적용됩니다.이 때문에 JavaScript 함수는 선언되기 전에 호출 할 수 있습니다. myFunction(5); function myFunction(y) {return y * y;} Arrow FunctionsArrow 함수는 함수 표현식 작성을위한 짧은 구문을 허용합니다.function(함수) 키워드,return(반환) 키워드 및 {}중괄호가 필요하지 않습니다. // ES5var x = function(x, y) {return x * y;}// ES6const x = (x, y) =&gt; x * y; Arrow 함수는 hoisting 되지않습니다.반드시 사용하기 전에 정의해야합니다.또한 IE 11 이전 버젼에서는 사용할 수 없습니다. 함수 표현식은 항상 상수 값이므로const를 사용하는 것이 var를 사용하는 것보다 안전합니다. 내장 함수내장 함수는 자바스크립트 엔진에 내장된 함수 정의문을 말합니다.정의문 선언 없이 단지 함수 호출만으로 사용 가능합니다. 종류 설명 예시 parseInt() 문자형 데이터를 정수형 데이터로 바꿉니다 pareInt(“5.12”) = 5 parseFloat() 문자형 데이터를 실수형 데이터로 바꿉니다 parseFloat(“5.12”) = 5.12 String() 문자형 데이터로 바꿉니다 String(5) =”5” Number() 숫자형 데이토로 바꿉니다 Number(“5”) = 5 Boolean() 논리형 데이터로 바꿉니다 Boolean(5) = true isNaN() 데이터에 숫자가 아닌 문자를 포함하면 true값 반환 eval() 문자형 데이터를 “”가 없는 스크립트 코드로 처리합니다 eval(“15+5”) = 20","link":"/2020/03/09/function%20%ED%95%A8%EC%88%98%20-JavaScript/"},{"title":"return 문,재귀 함수 호출 -JavaScript","text":"return 문 이란 함수에서 결과값을 되돌려 줄 때 사용합니다.함수에서 return 문이 실행되면반복문에 break문과 비슷하게 실행문이 강제 종료됩니다. 기본형 function 함수명(){ 실행문; return 데이터(값); }예시1123456function calc(){ var result=100+200 return result; // calc값에 300을 반환합니다. } var num = calc(); document.write(num); 예시21234567function test(){ document.write(\"html\"); return; // 다음 실행문은 실행되지 않습니다. document.write(\"javascript\"); } myFnc(); 재귀 함수 호출함수 정의문 내에서 실행문으로 함수를 다시 호출하는 것을재귀 함수 호출 이라고 합니다.함수를 반복문 처럼 여러번 호출하기 위해 사용합니다. 기본형 function myFnc(){ 실행문; myFnc(); } myFnc();예제123456789var num=0; function testFnc(){ num++; //num의 데이터가 1씩 증가됩니다. document.write(num, \"&lt;br /&gt;\"); //출력 if(num==10) return; // num값이 10이라면 종료됩니다. testFnc(); // 아니라면 다시 testFnc함수를 호출합니다. } testFnc(); //testFnc 함수를 호출합니다.","link":"/2020/03/09/return%20%EB%AC%B8,%20%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98%20%ED%98%B8%EC%B6%9C%20-JavaScript/"},{"title":"jQuery 이벤트 핸들러 -jQuery","text":"jQuery에서의 이벤트 사용 기본형 1234&lt;a href=\"#\" id=\"btn\"&gt;버튼&lt;a&gt; &lt;script&gt; $(\"#btn\").click(function(){...}) &lt;/script&gt; $(“#btn”)이벤트 대상 click()이벤트 등록 메서드 function(){…}이벤트가 발생 했을 때 (이벤트 대상이 클릭되었을 때)실행되는 이벤트 핸들러 ready() / load() 메서드HTML 문서를 불러올 때 지정된 객체의 로딩이 완료되면실행되는 이벤트 핸들러. 1. $(문서 객체).ready(function)(){...}); 2. $(&quot;이미지 또는 프레임&quot;).load(function(){...}); 문서의 로딩이 완료된 후 실행됩니다. HTML 문서 로딩이 완료되더라도이미지나 프레임 소스는 그 이후에 로딩됩니다.load() 메서드는 이런 이미지나 프레임에 연동된 소스가 로딩이완료된 후 실행됩니다.이미지나 프레임을 제외한 객체에는 사용할 수 없습니다. click() / dbclick() 메서드 $(“요소 선택”).click(function(){…}); $(“요소 선택”).click(); 선택한 요소를 클릭할 때 마다 실행문을 실행합니다. 선택한 요소에 강제로 click이벤트가 발생, 유저가 클릭하지 않아도 실행됩니다. $(“요소 선택”).on(“dbclick”,function(){…}); $(“요소 선택”).dbclick(); 선택한 요소를 두번 연속으로 클릭했을 때 실행됩니다. 강제로 더블클릭 이벤트가 발생합니다. 이벤트 대상이 &lt; a&gt; 태그일 때&lt; a&gt;태그의 경우 클릭할 때 마다 링크된 주소로 이동됩니다. 링크된 주소로 이동되지 않도록 만드는 방법 return false return false를 이용하여 a 태그를 클릭 했을 때 링크된 주소로 이동되는 것을 막을 수 있습니다. 단 return은 function 실행문을 강제로 종료시키므로 함수의 마지막 부분에 작성합니다. 1234$(\"a\").click(function(){ ...실행문... return false; }); preventDefault() function 매개변수에 .preventDefalut() 메서드를 사용하면 링크된 주소로 이동되는 것을 막을 수 있습니다. 1234$(\"a\").click(function(x){ x.preventDefalut(); //...실행문... }); mouseover() / mouseout() / hover() / mousemove()123456789101112131. $(\"요소 선택\").mouseover(function(){...}); 2. $(\"요소 선택\").mouseover(); 3. $(\"요소 선택\").mouseout(function(){...}); 4. $(\"요소 선택\").mouseout(); 5. $(\"요소 선택\").hover( function() {실행문1}, function() {실행문2} ); 6. $(\"요소 선택\").mousemove(function(){...}); 7. $(\"요소 선택\").mousemove(); mouseover() 선택한 요소에 마우스를 올릴 때 마다 실행됩니다. 선택한 요소에 강제로 mouseover 이벤트를 발생시킵니다. mouseout() 선택한 요소에서 마우스가 벗어날 때마다 실행됩니다. 선택한 요소에 강제로 mouseout 이벤트를 발생시킵니다. hover() 마우스를 올릴 때 마다 {실행문1}을 실행시키고,마우스가 벗어날 때 마다 {실행문2}를 실행시킵니다. mousemove() 선택한 요소의 영역에서 마우스를 움직일 때 마다 실행됩니다. 선택한 요소에 강제로 mousemove 이벤트를 발생시킵니다. mousemove() 마우스 좌표값 구하기1234567$(function(){ $(document).mousemove(function(e){ // document 영역내에서 마우스를 움직일때 마다 실행 var x=e.pageX; // X 좌표값 구하기 var y=e.pageY; // Y 좌표값 구하기 $(\"p\").text(\"x좌표값:\"+x+\"y좌표값:\"+y); // x,y 좌표값을 출력 }); }); change() / index()1234561. $(\"요소 선택\").change(function(){...}); 2. $(\"요소 선택\").change(); 3.$(\"요소 선택\").이벤트(function(){ $(\"요소 선택\").index(this); }); 요소의 값이(value) 새 값으로 바뀌고 포커스가 다른 요소로 이동되었을 때 실행됩니다. 강제로 change 이벤트 메서드를 발생시킵니다. 이벤트를 등록한 요소 중에서 이벤트가 발생한 요소의 인덱스 값을 반환합니다. 그룹 이벤트 등록 및 삭제 종류 설명 on() 여러 개의 이벤트를 등록할 때 사용합니다. 이벤트를 등록한 이후에 동일한 태그가 생성되어도 같이 이벤트 실행됩니다. bind() 선택 요소에 한 개 이상의 이벤트를 등록. delegate() 선택 요소의 하위 요소에 여러 개의 이벤트 등록. 등록 이후 생성된 동일한 요소에도 같이 이벤트 생성됩니다. one() 한번 이벤트가 발생되면 자동으로 등록된 이벤트가 제거되어 한 번만 실행됩니다. off() 선택한 요소에 등록된 이벤트를 제거합니다. unbind() 선택한 요소에 등록된 이벤트를 제거합니다. 사용 ex)12345678910111213$(function(){ $(\"#btn\").on({ \"mouseover focus\":function(){ $(this).css(\"background-color\",\"yellow\"); }, // id 값 btn에 마우스가 올라가거나 포커스되면 배경색을 바꿉니다. \"mouseout blur\":function(){ $(this).css(\"background-color\",\"red\"); } // id 값 btn에 마우스가 벗어나거나 포커스아웃 되면 배경색을 바꿉니다. }); $(\"#btn\").append(\"&lt;a href='#'&gt;버튼2&lt;/a&gt;\"); //id값 btn의 마지막에 새 요소 (a태그로 감싼 버튼2)를 추가했습니다. // .on 이벤트로 적용된 이벤트가 그대로 적용됩니다. });","link":"/2020/03/12/jQuery%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%ED%95%B8%EB%93%A4%EB%9F%AC/"},{"title":"this Keyword -JavaScript","text":"javascript this 키워드는 속한 객체를 나타냅니다. 사용 위치에 따라 다른 값을 갖습니다. method메소드에서 this는 메소드의 소유자 오브젝트를 나타냅니다. 12345678var person = { firstName: \"Han\", lastName : \"Dongwon\", id : 2020, fullName : function() { return this.firstName + \" \" + this.lastName; } }; this는 person 객체를 나타냅니다.person 오브젝트는 fullName 메소드의 소유자입니다. Alonethis 혼자 사용되면 전역 객체를 나타냅니다.브라우저 창에서 전역 개체는 [object Window]입니다. function함수에서 this는 전역 객체를 나타냅니다.함수에서 엄격 모드에서(in strict mode)는 정의되지 않습니다.(undefined) event이벤트에서 this는 이벤트를 받은 HTML요소(element)를 나타냅니다. 123&lt;button onclick=\"this.style.display='none'\"&gt; display none &lt;/button&gt; this는 이벤트를 받는 HTML요소 button을 나타냅니다. call() 및 apply()와 같은 메소드는 this를 모든 객체에 참조 할 수 있습니다. 12345678910var person1 = { fullName: function() { return this.firstName + \" \" + this.lastName; } } var person2 = { firstName:\"Han\", lastName: \"Dongwon\", } person1.fullName.call(person2); person2를 인수로 사용하여 person1.fullName을 호출하는 경우person1의 메소드 인 경우에도 this가 person2를 참조합니다.","link":"/2020/03/10/this%20Keyword%20-JavaScript/"},{"title":"객체 조작 메서드 -jQuery","text":"속성 조작 메서드 html() 메서드 $(“요소 선택”).html(); $(“요소 선택”).html(“새 요소”); 선택한 요소에 하위 요소들을 불러옵니다. 선택한 요소에 하위 요소를 모두 지우고 “새 요소”로 바꿉니다 text() 메서드 $(“요소 선택”).text(); $(“요소 선택”).text(“새 택스트”); 선택한 요소에 포함하는 모든 텍스트을 불러옵니다. 선택한 요소에 있는 텍스트를 제거하고 “새 텍스트”로 바꿉니다 css() 메서드 $(“요소 선택”).css(“속성”); $(“요소 선택”).css(“속성”,”값”); 선택한 요소에 스타일(css)속성을 불러옵니다. 선택한 요소에 스타일(css)속성을 바꾸거나 새 스타일(css)을 추가합니다. attr() 메서드 $(“요소 선택”).attr(“속성”); $(“요소 선택”).attr(“속성”,”새 값”); 선택한 요소에 지정한 속성 값을 불러옵니다. 선택한 요소에 지정한 속성 값을 새로 생성하거나 변경합니다. removeAttr() 메서드 $(“요소 선택”).revomeAttr(“속성”); 선택한 요소에 지정한 속성을 제거합니다. addClass() 메서드 $(“요소 선택”).addClass(“클래스 값”); 선택한 요소에 새 클래스(class)를 생성합니다. removeClass() 메서드 $(“요소 선택”).removeClass(“클래스 값”); 선택한 요소에 지정한 클래스를 삭제합니다. toggleClass() 메서드 $(“요소 선택”).toggleClass(“클래스 값”); 선택한 요소에 지정한 클래스의 존재 여부에 따라존재 하지않으면 생성하고, 존재 하면 삭제합니다. hasClass() 메서드 $(“요소 선택”).hasClass(“클래스 값”); 선택한 요소에 지정한 클래스 존재 여부의 따라존재할 시 true 아닐시 false를 반환합니다. val() 메서드 $(“입력 요소 선택”).val(); $(“입력 요소 선택”).val(“새 값”); 선택한 입력 요소의 value 속성 값을 가져옵니다. 선택한 입력 요소의 value 속성에 새 값을 입력하거나 변경합니다. prop() 메서드 $(“요소 선택”).prop(“속성”); $(“요소 선택”).prop(“속성”,”새 값”); $(“요소 선택”).prop(“[tagname | nodeType | selectedIndex]”); 선택한 요소의 속성 값을 반환합니다. 선택한 요소에 새 속성과 새 값을 생성하거나 기존 속성을 변경합니다. 선택한 요소에 태그명, 노드타입, 선택상자의 선택된 옵션의 인덱스를 반환합니다. 수치 조작 메서드 종류 설명 height() 순수 요소의 높이 값 (margin,padding,border 제외) width() 순수 요소의 너비 값 (margin,padding,border 제외) innerHeight() 여백(padding)을 포함한 높이 값 (margin,border 제외) innerWidth() 여백(padding)을 포함한 너비 값 (margin,border 제외) outerHeight() 여백(padding)과 선(border) 포함한 높이 값 (margin제외) outerWidth() 여백(padding)과 선(border) 포함한 너비 값 (margin제외) position() 선택한 기준 요소(position:relative)위치로 부터 (position:absolute) 위치 값을 반환합니다. offset() 선택한 요소가 문서(document)에서 수평/수직으로 얼마나 떨어져 있는지 떨어져있는 값을 반환 scrollLeft() 브라우저 수평 스크롤 이동 높이 값 반환 scrollTop() 브라우저 수직 스크롤 이동 너비 값 반환 객체 편집 메서드 before() / after() 메서드 $(“요소 선택”).before(새 요소); $(“요소 선택”).after(새 요소); 선택한 요소의 이전 위치에 새 요소 생성 선택한 요소의 다음 위치에 새 요소 생성 append() / appendTo() / prepend() / prependTo() 메서드 $(“요소 선택”).append(“새 요소”);// 선택한 요소 내의 마지막 위치에 새 요소를 추가합니다. $(“새 요소”).appendTo(“요소 선택”);// 새 요소를 선택한 요소 내의 마지막 위치에 추가합니다. $(“요소 선택”).prepend(“새 요소”);// 선택한 요소 내의 앞 위치에 새 요소를 추가합니다. $(“새 요소”).prependTo(“요소 선택”);// 새 요소를 선택한 요소 내의 앞 위치에 추가합니다. to : ~을 ~에게영어 뜻을 잘생각하여 사용해야 합니다. inserBefore() / inserAfter() / clone() 메서드 $(“새 요소”).inserBefore(“요소 선택”); $(“새 요소”).inserAfter(“요소 선택”); $(“요소 선택”).clone(ture); $(“요소 선택”).clone(false); 선택한 요소의 이전 위치에 새 요소를 생성합니다. 선택한 요소의 다음 위치에 새 요소를 생성합니다. 선택한 요소의 하위 요소까지 복제합니다. ()값 작성안할시 기본 true값 입니다. 선택한 요소의 하위 요소를 제외하고 복제합니다. empty() / remove() 메서드 $(“요소 선택”).empty(); $(“요소 선택”).remove(); 선택한 요소에 모든 하위 요소를 비웁니다. 선택한 요소를 삭제 합니다. replaceAll() / replaceWith() 메서드 $(“새 요소”).replaceAll(“요소 선택”); $(“요소 선택”).replaceWith(“새 요소”); replaceAll() 메서드는 선택한 요소를 새 HTML 요소로 바꿉니다. replaceWith() 메서드는 선택한 요소를 새 내용으로 바꿉니다. unwrap() / wrap() / wrapAll() / wrapInner() 메서드 $(“요소 선택”).unwrap(); $(“요소 선택”).wrap(“새 요소”); $(“요소 선택”).wrapAll(“새 요소”); $(“요소 선택”).wrapInner(“새 요소”); 선택한 요소의 부모 요소를 삭제합니다. 선택한 요소를 새 요소로 각각 감쌉니다. 선택한 요소를 새 요소로 한꺼번에 감쌉니다. 선택한 요소에 하위 요소를 새 요소로 감쌉니다. jQuery선택자 정리 예제style , body ex)1234567891011121314151617&lt;style type=\"text/css\"&gt; div{background-color:yellow;} .tit{background-color:orange;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 align=\"center\"&gt;&lt;strong&gt;내용1&lt;/strong&gt;&lt;/h1&gt; &lt;h2&gt;&lt;strong&gt;내용2&lt;/strong&gt;&lt;/h2&gt; &lt;h2&gt;내용3&lt;/h2&gt; &lt;h2 class=\"tit\"&gt;내용4&lt;/h2&gt; &lt;ul class=\"myList\"&gt; &lt;li&gt;리스트1&lt;/li&gt; &lt;li id=\"two\"&gt;리스트2&lt;/li&gt; &lt;li class=\"three\"&gt;리스트3&lt;/li&gt; &lt;li&gt;리스트4&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; JavasSript-jQuery123456789101112131415161718192021222324252627282930313233343536&lt;script type=\"text/javascript\" src=\"경로/jQuery-버전.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; $(function(){ $(\"h1\").attr(\"align\",\"left\"); // h1 태그의 align 속성값을 left로 적용합니다 $(\"li:first\").text(\"첫 번째 리스트\"); // li 태그 첫 번째 요소의 텍스트를 \"첫 번째 리스트\"로 바꿉니다. $(\"h2 &gt; strong\").css(\"color\",\"red\"); // h2 태그 안에 있는 strong 태그에 css적용하여 빨간색으로 적용합니다. $(\"#two\").prev().css(\"color\",\"blue\"); // id값 two인 요소 이전 요소에 css적용하여 파란색으로 적용합니다. $(\"#two\").next().css(\"color\",\"purple\"); // id값 two인 요소 다음 요소에 css적용하여 보라색으로 적용합니다. $(\"#two\").parent().css(\"border\",\"2px dashed navy\"); // id값 two인 요소의 부모 요소를 선택하고 css로 border값, 속성을 적용합니다. $(\".myList\").prepend(\"&lt;li&gt;Front&lt;/li&gt;\"); //class명 myList 요소 내의 가장 앞 위치에 \"&lt;li&gt;Front&lt;/li&gt;\" 요소를 추가합니다. $(\".myList\").append(\"&lt;li&gt;Back&lt;/li&gt;\"); //class명 myList 요소 내의 마지막 위치에 \"&lt;li&gt;Back&lt;/li&gt;\" 요소를 추가합니다. $(\"&lt;li&gt;앞에 생성&lt;/li&gt;\").insertBefore(\".three\"); //\"&lt;li&gt;앞에 생성&lt;/li&gt;\"요소를 class명 \"three\"인 요소의 이전 위치에 생성합니다. $(\"&lt;li&gt;뒤에 생성&lt;/li&gt;\").insertAfter(\".three\"); //\"&lt;li&gt;뒤에 생성&lt;/li&gt;\"요소를 class명 \"three\"인 요소의 다음 위치에 생성합니다. $(\"h2\").eq(1).wrap(\"&lt;div/&gt;\"); //h2 태그중 인덱스(1) 즉 2번째 h2요소를 div 태그로 감쌉니다. $(\"h2:has('strong')\").addClass(\"tit\"); //strong 태그를 가지고 있는 h2태그에 class \"tit\"를 추가합니다. $(\"h2:last\").removeClass(\"tit\"); //h2 태그중 마지막 요소에 class \"tit\"속성을 제거합니다. }); &lt;/script&gt;","link":"/2020/03/10/%EA%B0%9D%EC%B2%B4%20%EC%A1%B0%EC%9E%91%20%EB%A9%94%EC%84%9C%EB%93%9C%20-jQuery/"},{"title":"Date(날짜) 객체 -JavaScript","text":"날짜 정보를 가져올 때 (GET) 날짜 정보를 수정할 때 (SET) getFullYear() 연도 정보를 가져옴 setFullYear() 연도 정보만 수정 getMonth() 월 정보를 가져옴(현재 월-1) setMonth() 월 정보만 수정(월-1) getDate() 일 정보를 가져옴 setDate() 일 정보만 수정 getDay() 요일 정보를 가져옴(일:0~토:6) 요일은 날자를 바꾸면 자동으로바뀌므로 setDate없음 getHours() 시 정보를 가져옴 setHours() 시 정보만 수정 getMinutes() 분 정보를 가져옴 setMinutes() 분 정보만 수정 getSeconds() 초 정보를 가져옴 setSeconds() 초 정보만 수정 getMilliseconds() 밀리초 정보를 가져옴 setMilliseconds() 밀리초 정보만 수정 getTime() 1970년 1월1일부터 경과된 시간을 밀리초로 표기함 setTime() 1970년 1월 1일부터 경과된 시간을 밀리초로 수정 toGMTString(); GMT 표준 표기 방식으로 문자형 데이터로 반환 toLocaleString(); 운영 시스템 표기 방식으로 문자형 데이터로 반환 날짜 정보 받아오기123456789101112131415161718var t =new Date(); // 변수 t에 오늘 날짜 객체 생성 var nowMonth=t.getMonth(); // 현재 월 정보 반환하여, 현제 월보다 한달 적게나옴 var nowDate=t.getDate(); // 현재 일자 정보 반환 var nowDay=t.getDay(); // 현재 요일 정보 반환 (0:일요일 ~ 6:토요일) document.write(\"현재 월:\"+nowMonth,\"&lt;br /&gt;\"); document.write(\"현재 일:\"+nowDate,\"&lt;br /&gt;\"); document.write(\"현재 요일:\"+nowDay,\"&lt;br /&gt;\"); var m=new Date(2002,5,31); // 변수 m에 특정 날짜 객체 생성 (월드컵) var theMonth=m.getMonth(); // 날짜 객체에서 월 정보만 가져옴 var theDate=m.getDate(); // 날자 객체에서 일 정보만 가져옴 var theDay=m.getDay(); // 날짜 객체에서 요일 정보만 가져옴 document.write(\"2002월드컵 몇 월:\"+theMonth,\"&lt;br /&gt;\"); document.write(\"2002월드컵 몇 일:\"+theDate,\"&lt;br /&gt;\"); document.write(\"2002월드컵 무슨 요일:\"+theDay,\"&lt;br /&gt;\"); 현재 날짜부터 특정 날짜까지 몇일 남았는지 구하기연말까지 얼마남았는지 구하기 예제 1234567891011121314var t=new Date(); // 오늘 날짜 객체 var nowYear=t.getFullYear(); // 현재 연도 정보를 받아옴 //현재 연도 12월 31일 날짜 객체를 생성 var theDate=new Date(nowYear,11,31); //연말까지 남은 기간(밀리초msc) = 연말 날짜 - 현재 날짜 var diffDate=theDate-t //밀리초를 일로 계산, 1일=86,400,000밀리초 var result=Math.ceil(diffDate /(60 * 1000 * 60 * 24)); //결과 값 출력 document.write(\"현재일로 부터 올해 말일 까지는 \"+result+\"일 남았습니다.\"); 남은일수(밀리 초)= 특정 날짜 객체 - 현재 날짜 객체 1초 = 1000(msc) 1분(60초) = 1000 * (60) // 60,000(msc) 1시간(60분) = 1000 * 60 * (60) // 3,600,000(msc) 1일(24시간) = 1000 * 60 * 60 * (24) // 86,400,000(msc)","link":"/2020/03/02/%EB%82%A0%EC%A7%9C%20%EA%B0%9D%EC%B2%B4%20%EB%A9%94%EC%84%9C%EB%93%9C/"},{"title":"데이터 타입 -Core JavaScript","text":"자바스크립트가 데이터를 처리하는 과정을 살펴봄으로써기본형 타입과 참조형 타입이 서로 다르게 동작하는 이유를 이해하고이를 적절히 활용할 수 있게 되는 것을 목표로 합니다.나아가 데이터 타입과 관련된 중요한 개념 몇 가지를 추가로 살펴봅니다. 데이터 타입의 종류 데이터 타입에 관한 배경 지식 메모리와 데이터 식별자와 변수 변수 선언과 데이터 할당 변수 선언 데이터 할당 기본형 데이터와 참조형 데이터 불변값 가변값 변수 복사 비교 불변 객체 불변 객체를 만드는 간단한 방법 얕은 복사와 깊은 복사 undefined 와 null 데이터 타입의 종류 자바스크립트의 데이터 타입에는 크게 두 가지가 있습니다. 바로 기본형과 참조형 입니다. 기본형(원시형, primitive type)number, string, boolean, null, undefined, Symbol 참조형(reference type)object, Array, Function, Date, RegExp, Map, WeakMap, Set, WeakSet 등이 객체의 하위 분류에 속합니다. https://tutorial.eyehunts.com/js/javascript-data-types-and-examples 일반적으로 기본형은 할당이나 연산시 복제되고 참조형은 참조된다고 알려져 있습니다.엄밀히 말하면 둘 모두 복제를 하긴 합니다.다만 기본형은 값이 담긴 주소값을 바로 복제하는 반면 참조형은 값이 담긴 주소값들로 이루어진 묶음을 가리키는 주소값을 복제한다는 점이 다릅니다. 기본형은 불변성(immutability)을 뜁니다.언뜻 생각해 보면 혼란스러울 수 있습니다.불변성을 잘 이해하려면 메모리와 데이터에 대한 지식이 필요하고, 식별자와 변수의 개념을 구분할 수 있어야합니다.메모리 영역에서 자바스크립트의 데이터가 처리되는 과정을 알아봅시다. 데이터 타입에 관한 배경 지식 메모리와 데이터컴퓨터는 모든 데이터를 0 또는 1로 기억합니다.0 또는 1만 표현할 수 있는 하나의 메모리 조각을 비트(bit)라고 합니다. 각 비트는 고유한 식별자(unique identifier)를 통해 위치를 확인할 수 있습니다. 1byte = 8 bit 입니다. 메모리 용량이 과거보다 월등히 커진 영향으로 자바스크립트에서는 숫자의 경우 정수형인지 부동소수형인지 구분하지 않고 64비트 (8바이트)를 확보합니다. 모든 데이터는 바이트 단위의 식별자, 즉 메모리 주소값(memory address)을 통해 서로 구분하고 연결할 수 있습니다. 식별자와 변수변수는 “변할 수 있는 데이터” 입니다. (숫자,문자열,객체,배열 모두가 데이터 입니다.) 식별자는 어떤 데이터를 식별하는데 사용하는 이름. 즉 변수명 입니다. 변수 선언과 데이터 할당 변수 선언변수 선언의 동작 원리를 알아봅니다. var a; 위 코드를 말로 해석하자면 변할 수 있는 데이터를 만들고, 식별자 이름을 a로 설정합니다. 즉, 엔진에서는 메모리에서 비어있는 공간을 확보하고 이 메모리 영역의 이름(식별자)을 a로 설정합니다. 여기까지가 변수 선언 과정입니다. 이후에 a에 접근하고자 하면 엔진은 메모리 영역에서 a라는 이름을 가진 주소를 검색해 해당 영역에 담긴 데이터를 반환합니다. 데이터 할당 var a = ‘abc’; a라는 이름의 주소를 검색해서 그곳에 문자열 ‘abc’를 할당할 것 같지만,실제로 해당 위치에 문자열을 직접 저장하지는 않습니다. 엔진에서는 데이터를 저장하기 위한 별도의 메모리 공간을 확보하여 문자열 ‘abc’를 저장하고,그 주소를 변수 영역에 저장하는 식으로 이뤄집니다.메모리 공간은 변수영역 과 데이터 영역을 구분지어 값을 저장한다고 생각하면 됩니다. 데이터 할당과 변수 선언 흐름 1234567891011var a = 'abc'; // 위 코드는 아래 코드와 동일 합니다. var a; a = 'abc'; // 즉 엔진의 흐름은 1. 변수 영역에서 빈 공간을 확보하고 2. 확보한 공간의 식별자를 a로 지정합니다. 3. 변수 영역이 아닌 데이터 영역의 빈 공간에 문자열 'abc'를 저장합니다. 4. 변수 영역에서 a 식별자를 검색합니다. 5. 데이터 영역에서 생성한 문자열의 주소를 a 식별자로 검색한 변수 영역에 대입합니다. 이러한 방식은 데이터를 변경(or 삭제/추가)등의 작업을 할때변경된 데이터의 주소들을 다시 식별자에 연결하여 저장하지 않아도 됩니다.(엔진이 처리할 연산을 최소한으로 해줍니다.)효율적으로 문자열 데이터의 변환을 처리하려면 변수와 데이터를 별도의 공간에 나누어 저장하는 것이 최적입니다. 예를 들어 다수의 변수를 생성하여 모든 변수에 숫자 5를 할당한다면,변수의 개수만큼 변수의 메모리 공간마다 5를 할당해야 합니다.하지만 5를 별도의 공간(메모리 공간 중 변수 영역이 아닌 데이터 영역)에 한 번만 저장하고 그 주소를 연결한다면? 엔진의 중복 연산 처리 효율이 높아집니다. 기본형 데이터와 참조형 데이터 불변값변수 와 상수의 차이는 “변경 가능성”입니다. 변수는 변할 수 있는 데이터, 상수는 바뀌지 않습니다.이 “변경 가능성”의 기준은 변수 영역의 메모리 입니다.한 번 데이터 할당이 이뤄진 변수 공간에 다른 데이터를 재할당할 수 있는지 여부가 관건입니다. 반면 상수 와 불변값을 구분짓는 “변경 가능성”의 기준은 데이터 영역 메모리 입니다. 1234561. var a = 'abc'; a = a + 'def'; 2. var b = 5; var c = 5; 3. b = 7; 변수 a 에 문자열 ‘abc’를 할당했다가 아래 코드로 ‘def’를 추가하면기존의 ‘abc’가 ‘abcdef’로 바뀌는 것이 아니라 새로운 문자열 ‘abcdef’를 만들어그 주소를 변수 a에 저장합니다. ‘abc’와 ‘abcdef’는 완전히 별개의 데이터 입니다. 변수 b 에 데이터 영역을 만들어 5를 설정하고 그 주소를 b에 저장합니다.다음 코드에서 c에 5를 할당하려고 하면 엔진은 데이터 영역에서 5를 찾습니다.이미 만들어진 주소가 있으므로 그 주소를 재활용하여 c에 저장합니다. 변수 b 의 값을 7로 바꾸려고 합니다. 기존에 저장된 5를 7로 바꾸는 것이 아니라데이터 영역에서 7을 찾아 있으면 그 주소를 재활용하고 없다면 새로 만들어 b에 저장합니다.결국 5 와 7 모두 다른 값으로 변경할 수 없습니다. 이처럼 문자열 값 과 숫자 값 모두 한 번 만든 값을 바꿀 수 없고, 다른 값으로 변경할 수 없습니다. 변경은 새로 만드는 동작을 통해서만 이뤄집니다. 한 번 만들어진 값은 GC(Garbage Collection) 당하지 않는 한 영원히 변하지 않습니다. 이것이 바로 불변값의 특징입니다. 기본형(원시값, primitive)데이터인 number, string, boolean, null, undefined, Symbol은 모두 불변값입니다. 가변값참조형(reference) 데이터의 기본적인 성질은 가변값인 경우가 많지만 설정에 따라 변경 불가능한 경우도 있고, 아예 불변값으로 활용하는 방법도 있습니다. 참조형 데이터를 변수에 할당하는 과정부터 확인해 봅니다. 참조형 데이터의 할당1234var obj1 ={ a: 1, b: 'bbb' }; 엔진은 우선 변수 영역의 빈공간을 확보하고, 그 주소의 이름을 obj로 지정합니다. {} 내부의 프로퍼티들을 저장하기 위해 별도의 변수 영역을 마련하고, 주소 이름으로 각각 a 와 b라는 프로퍼티 이름을 지정합니다. 데이터 영역에서 숫자 1을 검색합니다. 검색 결과가 없으므로 데이터 영역에 저장하고 이 주소를 a 주소에 저장합니다. 문자열 ‘bbb’역시 데이터 영역에 저장하고 이 주소를 b 주소에 저장합니다. 기본형 데이터와의 차이는 “객체의 변수(프로퍼티) 영역”이 별도로 존재한다는 점입니다.객체가 별도로 할애한 영역은 변수 영역일 뿐 “데이터 영역”은 기존의 메모리 공간을 그대로 활용하고 있습니다.데이터 영역에 저장된 값은 모두 불변값입니다. 그러나 변수에는 얼마든지 다른 값을 대입할 수 있습니다.바로 이 부분 때문에 흔히 참조형(reference)데이터는 가변값이라고 하는 것입니다. 참조형 데이터의 프로퍼티 재할당12345var obj1 ={ a: 1, b: 'bbb' }; obj.a = 2; obj1의 a 프로퍼티에 숫자 2를 할당하려고 합니다. 데이터 영역에서 숫자 2를 검색합니다.존재하지 않으므로 데이터 영역을 새로만들어 2를 저장합니다. 이 주소를 프로퍼티 영역의 a 주소에 저장합니다.변수 obj1이 바라보고 있는 주소는 데이터 영역으로 변하지 않았습니다. 즉 새로운 Object가 만들어진 것이 아니라 Object 내부의 프로퍼티 영역 a의 값만 바뀐 것 입니다. 다음은 참조형 데이터의 프로퍼티에 다시 참조형 데이터를 할당하는 경우 입니다.이러한 경우를 중첩객체 (nested object)라고 합니다. 중첩된 참조형 데이터(객체)의 프로퍼티 할당1234var obj = { x : 3, arr : [ 3, 4, 5 ] }; 엔진은 우선 변수 영역의 빈공간을 확보하고, 그 주소의 이름을 obj로 지정합니다. 데이터 저장 공간에 데이터를 저장하려는데( {} ), 이 데이터는 여러개의 프로퍼티와 값들을 모아놓은 그룹(객체)입니다. 각 프로퍼티들을 저장하기 위해 별도의 프로퍼티 영역을 마련하고 그 주소를 {}의 주소에 저장합니다. 각 프로퍼티 영역에 x 와 arr 를 주소 이름으로 지정합니다. 데이터 영역에서 숫자 3을 검색합니다. 없으므로 새로 만들고 이 주소를 프로퍼티 영역 x의 주소에 저장합니다. 데이터 영역에 arr 로 저장할 값은 Array로써 별도의 Array 영역을 만들어 저장하고 프로퍼티 영역 arr의 주소에 저장합니다. 배열의 요소가 총 3개 이므로 Array 영역에 공간을 확보하고 각각 인덱스를 부여하고 주소이름으로 사용합니다. 데이터 영역에서 숫자 3을 검색하여 그 주소를 인덱스 0의 주소에 저장합니다. 데이터 영역에 숫자 4가 없으므로 새로운 데이터 영역을 만들고 그 주소를 인덱스 1의 주소에 저장합니다. 데이터 영역에 숫자 5도 없으므로 생성한 주소를 인덱스 2의 주소에 저장합니다. 이제 obj.arr[1]을 검색하고자 하면 엔진의 메모리에서는 다음과 같은 과정을 거칩니다. 1. obj라는 식별자를 가진 주소를 찾습니다. 2. obj 주소에 연결된 데이터 영역의 주소로 이동합니다. 3. 데이터 영역에 연결된 프로퍼티 영역의 주소로 이동합니다. 4. 프로퍼티 영역에서 arr이라는 식별자를 가진 주소를 찾습니다. 5. arr 주소에 연결된 Array 영역의 주소로 이동합니다. 6. Array 영역에서 인덱스 1(==식별자 이름)을 검색하여 해당하는 주소로 이동합니다. 7. 해당하는 주소의 값 숫자형 데이터 4를 반환합니다.만약 이 상태에서 다음과 같이 재할당을 하면 다음과 같은 과정을 거칩니다. obj.arr = “str”; 데이터 영역에 문자열 “str”을 저장하고, 그 주소를 프로퍼티 영역에 저장합니다.(재할당)그러면 기존에 있던 Array 영역의 인덱스 주소를 저장하던 데이터 영역(공간)은 자신의 주소를 참조하는 변수가 하나도 없게 됩니다. (프로퍼티 영역인 arr 주소의 값이 재할당 되므로 데이터 영역의 str을 주소로 갖음)참조 카운트(자신을 참조하는 변수의 개수)가 0인 메모리는 garbage collector의 수거 대상이 됩니다.즉, Array 영역의 주소를 저장하던 데이터 영역은 GC의 수거 대상이며,GC가 처리되는 과정에서 연쇄적으로 Array 영역의 참조 카운트도 0이 되고 GC의 대상이되어 제거됩니다. 제거된 메모리 영역은 다시 새로운 값을 할당할 수 있는 빈 공간이 됩니다. 변수 복사 비교변수를 복사할 때기본형(원시값, primitive) 데이터 와 참조형(reference) 데이터의 차이 변수 복사1234567// primitive var a = 10; var b = a; // reference var obj1 = { c: 10, d: 'ddd' }; var obj2 = obj1; 변수 영역의 빈 공간을 확보하고 식별자를 a로 지정합니다.숫자 10을 데이터 영역에서 검색하여, 없으면 데이터 영역에 새로 만들어 저장하고 주소를 a의 주소에 저장합니다. 변수 영역의 빈 공간을 확보하고 식별자를 b로 지정합니다. 그 후에 변수 영역에서 a식별자를 검색해 a에 저장된 데이터 주소(10)를 b 변수 영역에 저장합니다. 변수 영역의 빈 공간을 확보하고 식별자를 obj1로 지정합니다. 데이터 영역을 새로 만들고 데이터 그룹을 담을 프로퍼티 영역을 만들어 이 주소를 데이터 영역에 저장합니다.각각의 프로퍼티 영역에 식별자 이름으로 c , d으로 사용하고 각각의 값 (10, ‘ddd’)을 데이터 영역에서 검색합니다. 10은 이미 있으므로 기존의 주소를 프로퍼티 영역에 연결하고, ‘ddd’는 새로 만들어 프로퍼티 영역에 연결합니다. 변수 영역의 빈 공간을 확보하고 식별자를 obj2로 지정합니다. 그 후에 변수 영역에서 식별자 obj1을 검색해 obj1에 저장된 데이터 주소를 obj2 변수 영역에 저장합니다. 변수를 복사하는 과정은 기본형 데이터와 참조형 데이터 모두 같은 주소를 바라보게 되는 점에서 동일합니다. 복사 과정은 동일하지만 데이터 할당 과정에서 이미 차이가 있기 때문에 변수 복사 이후의 동작에서 큰 차이가 발생합니다. 1234567891011121314// 변수 복사이후 값 변경 결과 비교(1) // object 프로퍼티 변경 시 // primitive var a = 10; var b = a; // reference var obj1 = { c: 10, d: 'ddd' }; var obj2 = obj1; // 프로퍼티 값 변경 b = 15; obj2.c = 20; b = 15 코드는 데이터 영역에 15가 없으므로 새로운 데이터 영역에 저장하고 그 주소를 변수 영역 식별자 b인 주소에 저장합니다. obj.c = 20 코드는 데이터 영역에 20이 없으므르 새로운 데이터 영역에 저장하고 그 주소를 변수 영역 식별자 obj2의 주소를 찾고 이어서 obj2에 저장되있는 프로퍼티 영역의 c주소를 찾아 그 곳에 주소를 저장합니다. 기본형(원시값, primitive) 데이터를 복사한 변수b의 값을 바꾸면 데이터영역 b 주소의 값이 달라집니다.참조형(reference) 데이터를 복사한 변수 obj2의 프로퍼티 값을 바꾸면 바라보는 obj2의 프로퍼티 주소는 달라지지 않습니다. 값만 변합니다. 즉, 변수 a와 b는 서로 다른 주소를 바라보게 됐으나, 변수 obj1 과 obj2는 여전히 같은 객체를 바라보고 있는 상태입니다. (a !== b), (obj1 === obj2) 이 결과가 바로 기본형과 참조형 데이터의 가장 큰 차이점 입니다. 대부분의 자바스크립트 책에서 ‘기본형은 값을 복사하고 참조형은 주솟값을 복사한다’고 설명하고 있지만, 사실은 어떤 데이터 타입이든 변수에 할당하기 위해서는 주솟값을 복사해야 하기 때문에 엄밀히 따지면 자바스크립트의 모든 데이터 타입은 참조형 데이터일 수 밖에 없습니다. 다만 기본형은 주솟값 복사 과정이 한 번만 이뤄지고, 참조형은 한 단계를 더 거치게 된다는 차이가 있는 것입니다. Object 자체를 변경 시12345678910111213// 변수 복사이후 값 변경 결과 비교(2) // object 변경 시 // primitive var a = 10; var b = a; // reference var obj1 = { c: 10, d: 'ddd' }; var obj2 = obj1; b = 15; obj2 = { c: 20, d: 'ddd' }; //object 자체를 변경 obj2에도 새로운 객체를 할당함으로써 값을 직접 변경했습니다.데이터 영역에 새로운 공간에 새 객체가 저장되고 그 주소를 변수 영역의 obj2 주소에 저장하게 됩니다.즉, 기본형 데이터의 값 변경처럼 참조형 데이터가 바라보는 주소가 달라지게 되는 것입니다.따라서 참조형 데이터가 “가변값”이라고 설명할 때의 “가변”은 참조형 데이터 내부의 프로퍼티 값을 변경할 때의 성질입니다. 참조형 데이터 자체를 변경하는 경우는 성립되지 않습니다. 불변 객체 불변 객체를 만드는 간단한 방법참조형 데이터의 “가변”은 데이터 자체가 아닌 내부 프로퍼티를 변경할 때 성립되므로내부 프로퍼티를 변경할 필요가 있을 때 마다 매번 새로운 객체를 만들어 재할당하기로 규칙을 정하거나자동으로 새로운 객체를 만드는 도구를 활용하면 객체 역시 불변성을 확보할 수 있습니다.대표적으로 immutable.js, immer.js, immutability-helper 등의 라이브러리가 있고,ES6의 spread operator, Object.assign 메서드 등도 새로운 객체를 만드는 도구 목적으로 활용할 수 있습니다. ex)값으로 전달받은 객체를 변경하더라도 원본 객체는 변하지 않게 하고 싶을 경우 불변 객체가 필요합니다. 가변성의 문제점123456789101112131415161718var user = { name: 'Jaenam', gender: 'male', }; var changeName = function(user, newName) { var newUser = user; newUser.name = newName; return newUser; }; var user2 = changeName(user, 'Jung'); if (user !== user2) { console.log('유저 정보가 변경되었습니다.'); } console.log(user.name, user2.name); // Jung Jung console.log(user === user2); // true user 객체의 name 프로퍼티를 ‘Jung’으로 바꾸는 함수를 호출해 반환 값을 user2 변수에 담습니다.그 결과 user 와 user2의 name 프로퍼티가 모두 ‘Jung’으로 출력되고 (user === user2)가 true로 같다는 것을 알 수 있습니다. 원본 데이터를 변경하고 싶지 않은 경우 각 변수마다 다른 객체를 바라보게 만들어야겠습니다. 서로 다른 객체를 바라보게12345678910111213141516171819var user = { name: 'Jaenam', gender: 'male', }; var changeName = function(user, newName) { return { name: newName, gender: user.gender, }; }; var user2 = changeName(user, 'Jung'); if (user !== user2) { console.log('유저 정보가 변경되었습니다.'); // 유저 정보가 변경되었습니다. } console.log(user.name, user2.name); // Jaenam Jung console.log(user === user2); // false changeName() 함수가 새로운 Object를 반환하도록 한 간단한 예시 입니다.user 와 user2는 서로 다른 Object가 됩니다. 얕은 복사와 깊은 복사얕은 복사(shallow copy)는 바로 아래 단계의 값만 복사하는 방법이고,깊은 복사(deep copy)는 내부의 모든 값들을 하나하나 찾아서 전부 복사하는 방법입니다. 얕은 복사는 중접된 object에서 참조형 데이터가 저장된 프로퍼티를 복사할 때 그 주솟값만 복사합니다.그러므로 해당 프로퍼티에 대해 원본과 사본이 모두 동일한 참조형 데이터 주소를 가리키게 됩니다.즉, 얕은 복사는 사본을 바꾸면 원본도 바뀌고, 원본을 바꾸면 사본도 바뀝니다. 중첩된 객체에 대한 얕은 복사123456789101112131415161718192021222324252627//복사해서 새로운 object를 반환하는 함수var copyObject = function(target) { var result = {}; for (var prop in target) { result[prop] = target[prop]; } return result;};var user = { name: 'Jaenam', urls: { portfolio: 'http://github.com/abc', blog: 'http://blog.com', facebook: 'http://facebook.com/abc', },};var user2 = copyObject(user);1. user2.name = 'Jung';console.log(user.name === user2.name); // false2. user.urls.portfolio = 'http://portfolio.com';console.log(user.urls.portfolio === user2.urls.portfolio); // true3. user2.urls.blog = '';console.log(user.urls.blog === user2.urls.blog); // true 사본인 user2의 name 프로퍼티 값을 바꿔도 원본 user의 name 프로퍼티 값은 바뀌지 않습니다. 2번 과 3번 코드는 원본과 사본 어느 쪽을 바꾸더라도 다른 한쪽의 값 역시 바뀐 것을 확인할 수 있습니다.즉, user 객체에 직접 속한 프로퍼티에 대해서는 복사하여 새로운 데이터가 만들어진 반면,한 단계 더 들어간 urls object의 내부 프로퍼티들은 기존 데이터를 참조합니다.이런 현상을 막기 위해서는 한 단계 더 들어가는 프로퍼티들도 불변 객체로 만들 필요가 있습니다. 중첩된 객체에 대한 깊은 복사1234567891011121314151617181920212223242526//복사해서 새로운 object를 반환하는 함수var copyObject = function(target) { var result = {}; for (var prop in target) { result[prop] = target[prop]; } return result;};var user = { name: 'Jaenam', urls: { portfolio: 'http://github.com/abc', blog: 'http://blog.com', facebook: 'http://facebook.com/abc', },};var user2 = copyObject(user);1. user2.urls = copyObject(user.urls);user.urls.portfolio = 'http://portfolio.com';console.log(user.urls.portfolio === user2.urls.portfolio); // falseuser2.urls.blog = '';console.log(user.urls.blog === user2.urls.blog); // false 사본 user2의 urls프로퍼티에 copyObject() 함수를 실행하여 원본 user의 urls프로퍼티의 내부까지 복사하여 새로운 object를 만들어 할당했습니다. 그 결과 원본과 사본의 참조형 데이터 프로퍼티 값이 서로 다른 결과를 얻어냈습니다. 정리정리하자면 객체를 복사할 때 객체 내부의 모든 값을 복사하여 새로운 객체를 만들고자 할때.객체의 프로퍼티가 기본형 데이터인 경우 그대로 복사하면 되지만,참조형 데이터는 내부의 프로퍼티들을 다시 복사하는 과정을 거쳐야 깊은 복사가 되는 것입니다. 아래는 이 개념을 바탕으로 원본데이터를 깊은 복사 방식으로 새로운 객체를 반환하는 코드입니다. 깊은 복사로 복사하는 방법객체의 깊은 복사를 도와주는 범용 함수1234567891011121314var copyObjectDeep = function(target) { var result = {}; /* target이 object인 경우 내부 프로퍼티들을 순회하여 copyObjectDeep 함수를 재귀적으로 호출합니다.*/ if (typeof target === 'object' &amp;&amp; target !== null) { for (var prop in target) { result[prop] = copyObjectDeep(target[prop]); } //object가 아닌 경우 target을 그대로 지정합니다. } else { result = target; } return result;}; target === object 뒤에 target !== null 조건이 붙은 이유는typeof 메서드가 null 값에 대해 ‘object’를 반환하는 일종의 버그성? 때문입니다. 이 함수를 사용해 객체를 복사하면 원본과 사본이 서로 다른 주소를 참조하게 되어 한 쪽의 프로퍼티를 변경하더라도 다른 한 쪽에 영향을 주지 않습니다. 객체를 JSON 문법으로 표현된 문자열로 변환했다가 다시 JSON객체로 바꾸는 방법도 있습니다. JSON을 이용한 간단한 깊은 복사123456789101112131415161718192021222324var copyObjectViaJSON = function(target) { return JSON.parse(JSON.stringify(target));};var obj = { a: 1, b: { c: null, d: [1, 2], func1: function() { console.log(3); }, }, func2: function() { console.log(4); },};var obj2 = copyObjectViaJSON(obj);obj2.a = 3;obj2.b.c = 4;obj.b.d[1] = 3;console.log(obj); // { a: 1. b: { c: null, d: [1, 3], func1: f() }, func2: f() }console.log(obj2); // { a: 3. b: { c: 4, d: [1, 2] } } 이 방법은 단순하고 잘 동작합니다. 하지만 메서드(함수)나 숨겨진 프로퍼티인 __proto__나 getter/setter 등과 같이 JSON으로 변경할 수 없는 프로퍼티들은 모두 무시됩니다.httpReaquest로 받은 데이터를 저장한 object를 복사할 경우 등 순수한 정보만을 다루는 object 복사에 좋은 방법입니다. undefined 와 null 자바스크립트에 “없음”을 나타내는 두 값 “undefined” 와 “null”미세하게 다른 둘의 의미와 사용하는 목적을 살펴봅시다. 자바스크립트는 다음과 같은 경우 엔진에서 undefined 값을 자동으로 부여합니다. 값을 대입하지 않은 변수,즉 데이터 영역에 메모리 주소를 지정하지 않은 식별자에 접근할 때 존재하지 않는 프로퍼티에 접근할 때 return 문이 없거나 호출되지 않는 함수의 실행 결과 엔진에서 undefined를 부여하는 경우 예시123456789101112var a;console.log(a); // (1) undefined. 값을 대입하지 않은 변수에 접근 // a 는 데이터 영역의 메모리 주소가 지정되지 않은 식별자var obj = { a: 1 };console.log(obj.a); // 1console.log(obj.b); // (2) 존재하지 않는 프로퍼티에 접근console.log(b); // c.f) ReferenceError: b is not definedvar func = function() {};var c = func(); // (3) 반환(return)값이 없으면 undefined를 반환한 것으로 간주.console.log(c); // undefined 값을 대입하지 않은 변수가 빈 배열일 경우값을 대입하지 않은 변수가 빈 배열일 경우 특이한 결과를 확인할 수 있습니다. undefined 와 빈 배열1234567891. var arr1 = [];arr1.length = 3;console.log(arr1); // [empty x 3]2. var arr2 = new Array(3);console.log(arr2); // [empty x 3]3. var arr3 = [undefined, undefined, undefined];console.log(arr3); // [undefined, undefined, undefined] 빈 배열을 만들고 배열의 length 값을 3으로 지정하고 console에 찍으니 [empty x 3]이 출력됩니다.이는 배열에 3개의 빈 배열 요소를 확보했지만 확보된 요소에 어떤 값도 할당되어 있지 않음을 의미합니다.(undefined 조차 할당되어 있지 않습니다.) new 연산자를 사용해 Array 생성자 함수를 호출하고 length 값을 3으로 지정했습니다. 위에 1번과 같은 결과를 갖습니다. 배열을 만들고 각 요소에 undefined 값을 지정했습니다. 출력시 [undefined, undefined, undefined]가 출력됩니다. 이처럼 “비어있는 요소”(empty)와 “undefined를 할당한 요소는” 출력 결과부터 다릅니다. empty !=== undefined “비어있는 요소”는 이터러블과 관련된 많은 배열 메서드들의 대상에서 제외됩니다. 사실은 Array도 object임을 생각해보면 자연스러운 현상입니다.존재하지 않는 프로퍼티를 이터러블 메서드로 순회할 수 없는 것이 당연합니다.배열은 length 프로퍼티의 개수만큼 빈 공간을 확보하고 각각의 인덱스를 이름으로 지정할 것이라고 생각할 수 있지만,실제로는 object와 마찬가지로 특정 인덱스에 값을 지정할 때 비로소 빈 공간을 확보하고 인덱스를 이름으로 지정하고 데이터의 주솟값을 저장하는 동작을 합니다.즉, 값이 지정되지 않은 인덱스는 프로퍼티값이 지정되지 않은 빈 공간입니다. 위 처럼 undefined는 엔진이 부여하는 경우와 사용자가 값으로 할당한 실존하는 데이터인 경우로 나뉠수 있습니다.이러한 방식은 혼란을 가져올 수 있습니다.사용자가 “비어 있음”을 나타내고 싶어 할당한 값과, 엔진이 부여하는 “해당 값이 없음”이 두가지를 확실히 구분하기 위해 사용하는 것이 바로 null 입니다. null 사용 뜻사용자가 “비어있음”을 뜻하는 용도로 사용하고 싶을 때는 null을 사용하도록 합니다.null을 이런 용도에 사용하는 규칙을 지킨다면, undefined가 “값을 대입하지 않은 변수에 접근할 때” 엔진이 반환해 주는 값으로만 존재할 수 있습니다. 애초에 null이 이런 용도로 만들어진 데이터 타입입니다.","link":"/2020/04/16/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%ED%83%80%EC%9E%85%20-Core%20JavaScript/"},{"title":"선택자 -jQuery","text":"제이쿼리는 자바스크립트를 이용해 만든 라이브러리 언어입니다.라이브러리 언어란 자바스크립트로 만들어진다양한 함수들의 집합을 가르킵니다. 제이쿼리는 모질라 사의 자바스크립트 개발자였던존 레식(John Resig)이 창시 하였습니다. 직접 선택자와 인접 관계 선택자 기본형$(“wrap”).css(“color”,”green”); 선택자()는 HTML 요쇼(“wrap”)를 선택해 오고선택한 요소에 스타일(css) 또는 속성(Attribute)을 적용할 메서드를 작성합니다. 직접 선택자 $(“*”)전체 선택자모든 요소를 선택합니다. *는 root 즉 HTML 전체를 의미합니다. $(“#.id”)아이디 선택자id 속성에 지정된 값을 가진 요소를 선택합니다. $(“.class”)클래스 선택자class 속성에 지정된 값을 가진 요소를 선택합니다. $(“element”)요소 선택자지정한 요소명과 일치하는 요소들만 선택합니다. $(“선택1,선택2,선택3…선택n”)그룹 선택자()안에 지정된 요소들을 한번에 선택합니다. 인접 관계 선택자 $(“요소 선택”).parent()부모 요소 선택자선택한 요소의 부모 요소를 선택합니다. $(“요소 선택”).parents()상위 요소 선택자선택한 요소의 상위 요소를 모두 선택합니다. $(“요소 선택 하위 요소”)하위 요소 선택자선택한 요소에 지정한 하위 요소를 선택합니다. $(“요소 선택&gt;자식 요소”)자식 요소 선택자선택한 요소를 기준으로 자식 관계에 지정한 요소만 선택합니다. $(“요소 선택”).children()자식 요소들 선택자선택한 요소의 모든 자식 요소를 선택합니다. $(“요소 선택”).prev()이전 요소 선택자선택한 요소 바로 이전 요소를 선택합니다. $(“요소 선택”).prevAll()이전 요소들 선택자선택한 요소 이전 요소를 모두 선택합니다. $(“요소 선택”).prevUntil(“요소명”)이전 요소 지정 선택자선택한 요소부터 지정한 요소의 이전 요소까지 모두 선택합니다. $(“요소 선택”).next()선택한 요소의 다음 요소를 선택합니다. $(“요소 선택”).nextAll()선택한 요소의 다음 요소 모두를 선택합니다. $(“요소 선택”).siblings();선택한 요소의 모든 형제 요소를 선택합니다.본인(선택한 요소)는 선택되지 않습니다. 체이닝 기법 이란? $(요소 선택).css(속성1, 값1).css(속성2, 값2).css(속성3, 값3); 제이쿼리에서는 한 객체에 다양한 메서드를 줄줄이 이어서 사용 할 수 있습니다.이를 마치 체인이 엮인 모양과 같다 하여 체이닝 기법 이라고 합니다.메서드 사용이 완료 되었으면 ;(세미콜론)을 작성해줍니다. 속성 탐색 선택자속성 탐색 선택자는선택해 온 요소를 기준으로 일치하는 속성의 포함 여부를 따져서속성(값) 까지 일치할 시 가져오는 선택자 입니다. 사용 예시 설명 $(“li[title]”) li 요소 중 title속성이 포함된 요소만 선택합니다. $(“li[title=’리스트’]”) li 요소 중 tilte 속성 값이 ‘리스트’인 요소만 선택 $(“a[href^=’http://‘]”) a 요소 중 href 속성 값이 ‘http://‘로 시작하는 요소만 선택 $(“a[href$=’.com’]”) a 요소 중 href 값이 ‘.com’으로 끝나는 요소만 선택 $(“a[href*=’easypub’]”) a 요소중 href 값이 ‘easyspub’를 포함하는 요소만 선택 $(“li:hidden”) li 요소 중 숨겨진 요소만 선택합니다. $(“li:visible”) li 요소 중 보이는 요소만 선택합니다. $(“:text”) type 속성값이 “text”인 요소만 선택합니다. $(“:selected”) selected 속성이 적용된 요소만 선택합니다. $(“:checked”) checked 속성이 적용된 요소만 선택합니다. 선택자와 함께 사용하면 편리한 메서드is()is() 메서드는 선택한 요소의 상태가 지정한 속성과 일치하면 true,그렇지 않으면 false를 반환합니다. $(요소 선택).is(“:[checked | selected | visible | hidden]”) each(), $.each()each(), $.each() 메서드는 선택한 여러 개의 요소들에 각각 순차적으로하나씩 접근할 때 사용하는 메서드 입니다. 기본형 $(요소 선택).each(function(매개 변수1, 매개 변수2){...}); 또는 $.each(요소 선택,function(매개 변수1, 매개 변수2){...});123456789$(function(){ $(\"#id li\").each(function(i,k){ //id요소 하위li 태그 만큼 아래 실행문을 반복 실행합니다. console.log(\"index:\"+i); //매개 변수 i에는 접근한&lt;li&gt;의 인덱스가 할당되어 있습니다. console.log(k); //매개 변수 k에는 접근한 &lt;li&gt; 태그가 할당됩니다. }); }); get()제이쿼리로 선택한 요소에 get()메서드를 적용하면자바스크립트에 DOM 선택자로 선택한 태그로 인식되어자바스크립트 DOM 방식을 따릅니다. $(“li”).get().style.color=”red”;","link":"/2020/03/10/%EC%84%A0%ED%83%9D%EC%9E%90%20-jQuery/"},{"title":"Math(수학) 객체 -JavaScript","text":"Javascript에서 더하기, 곱하기, 나누기 등등 은 산술연산자를 사용하면 됩니다. 하지만 최댓값, 최솟값, 반올림 값 등은 산술연산자로 구할수 없습니다 수학 객체는 이러한 수학과 관련한 작업을 처리할수 있게 해줍니다. 수학 객체의 메서드 및 상수 종류 설명 Math.abs(숫자) 숫자의 절댓값을 반환 Math.max(숫자 1, 숫자 2, 숫자 3, 숫자 4) 숫자 중 가장 큰 값을 반환 Math.min(숫자 1, 숫자 2, 숫자 3, 숫자 4) 숫자 중 가장 작은 값 반환 Math.pow(숫자, 제곱값) 숫자의 거듭제곱한 값을 반환 Math.random() 0~1 사이에 난수를 반환 Math.round(숫자) 소숫점 첫째 자리에서 반올림하여 정수 반환 Math.ceil(숫자) 소숫점 첫째 자리에서 무조건 올림해서 정수 반환 Math.floor(숫자) 소숫점 첫째 자리에서 무조건 내림해서 정수 반환 Math.sqrt(숫자) 숫자의 제곱근 값을 반환 Math.PI 원주율 상수를 반환 사용 예제 123456789var num=2.1234; var maxNum=Math.max(10, 5, 8, 30); // 최댓값 반환 (30) var minNum=Math.min(10, 5, 8, 30); // 최솟값 반환 (5) var roundNum=Math.round(num); // num에 저장된 값에 반올림 하여 반환 (2) var floorNum=Math.floor(num); // num에 저장된 값에 소수점에서 무조건 버림 (2) var ceilNum=Math.ceil(num); // num에 저장된 값에 소수점에서 무조건 올림(3) var rndNum=Math.random(num); // 0~1 사이에 난수가 발생합니다. var piNum=Math.PI; // 원주율 상수를 반환","link":"/2020/03/02/%EC%88%98%ED%95%99%20%EA%B0%9D%EC%B2%B4%20-JavaScript/"},{"title":"Number(숫자) 객체 -JavaScript","text":"기본형 var num1 = new Number(값); 또는 var num1 = 값; //new 키워드 없이 값만 입력해도 객체 생성가능. Number 객체의 속성 속성 설명 MAX_VALUE 표현 가능한 가장 큰수 MIN_VALUE 표현 가능한 가장 작은 수 POSITIVE_INFINITY 무한대 수 표기 NEGATIVE_INFINITY 음의 무한대 수 표기 NaN 숫자가 아닌 경우 표기 Number 객체의 메서드 속성 설명 toExponential(n) 지수 표기법으로 소수점 n자리만큼 문자형 데이터로 반환 toFixed(n) 소수점 n자리만큼 반올림하여 문자형 데이터로 반환 toPrecision(n) 유효 숫자 n의 개수만큼 반올림하여 문자형 데이터로 반환 toString() 숫자형 데이터를 문자형으로 반환 valueOf() 객체의 원래 값을 반환 parselnt(값) 데이터를 정수로 변환하여 반환 parseFloat(값) 데이터를 실수로 변환하여 반환 사용 예제 1234567891011121314151617181920212223242526272829303132333435363738394041// javascript로 표현가능한 최댓값을 지수 표기법으로 반환 document.write(\"표현 가능한 가장 큰 수:\"+Number.MAX_VALUE, \"&lt;br /&gt;\"); // javascript로 표현가능한 최솟값을 지수 표기법으로 반환 document.write(\"표현 가능한 가장 작은 수:\"+Number.MIN_VALUE, \"&lt;br /&gt;\"); // javascript로 숫자로 표기할 수 없을때 반환되는 값 (Not a Number) document.write(\"숫자가 아닌경우의 표기:\"+Number.NaN, \"&lt;br /&gt;\"); // javascript로 반환되는 무한댓 값 document.write(\"무한대 수 표기:\"+Number.POSITIVE_INFINITY, \"&lt;br /&gt;\"); // javascript로 반환되는 음의 무한댓값 document.write(\"음의 무한대 수 표기:\"+Number.NEGATIVE_INFINITY, \"&lt;br /&gt;\"); var num1=3.456789; var num2=700000; var num3=\"30.5px\"; var num4=40; // num2에 저장된 값에 지정된 소수점 자리만큼 지수표기법으로 반환 document.write(num2.toExponential(1), \"&lt;br /&gt;\"); // = 7.0 * 100000 = 7.0e+5 // num1에 저장된 값에 소수점 2째 자리까지 반올림하여 표기 document.write(num1.toFixed(2), \"&lt;br /&gt;\"); // 3.46 // num1에 저장된 값에 지정된 숫자 2개에 반올림하여 표기 document.write(num1. toPrecision(2), \"&lt;br /&gt;\"); // (3.4)56789 &gt; 3.5 // num1에 저장된 값을 문자형 데이터로 반환 \"\" document.write(num1.toString(), \"&lt;br /&gt;\"); // \"3.456789\" // num4에 저장된 값 반환 document.write(num4.valueOf(), \"&lt;br /&gt;\"); // 40 // num3에 저장된 \"30.5px\"에 정수만 남겨 반환하고 num4를 더합니다 document.write(parseInt(num3)+num4, \"&lt;br /&gt;\"); // 30 + 40 = 70 // num3에 저장된 \"30.5px\"에 실수만 남겨 반환하고 num4를 더합니다 document.write(parseFloat(num3)+num4, \"&lt;br /&gt;\"); // 30.5 + 40 = 70.5","link":"/2020/03/02/%EC%88%AB%EC%9E%90%20%EA%B0%9D%EC%B2%B4%20-JavaScript/"},{"title":"이벤트 -JavaScript","text":"브라우저에서 유저가 취하는 모든 동작을 이벤트라 합니다.이벤트가 발생했을 때 자바스크립트 실행문을 실행하는 것을이벤트 핸들러라 합니다. 마우스 이벤트 onmouseover마우스가 지정한 요소에 올라갔을 때 발생합니다. onmouseout마우스가 지정한 요소를 벗어났을 때 발생합니다. onmousemove마우스가 지정한 요소 영역에서 움직일 때 발생합니다. onclick마우스가 지정한 요소를 클릭했을 때 발생합니다. ondbclick마우스가 지정한 요소를 더블 클릭 했을 때 발생합니다. 키보드 이벤트 onkeypress지정한 요소에서 키보드가 눌렸을 때 발생합니다. onkeydown지정한 요소에서 키보드를 눌렀을 때 발생합니다. onkeyup지정한 요소에서 키보드를 눌렀다 떼었을 때 발생합니다. 기타 이벤트 onfocus지정한 요소에 focus 되면 발생합니다. onblur지정한 요소에 focus가 다른 요소로 이동되어 focus를 잃으면 발생합니다. onchange지정한 요소에 value 속성값이 바뀌고 focus가 이동되었을 때 발생합니다. onload지정한 요소의 하위 요소를 모두 로딩 했을 때 발생합니다. onunload문서를 닫거나 다른 문서로 이동했을 때 발생합니다. onsubmit폼 요소에 전송 버튼을 눌렀을 때 발생합니다. onreset폼 요소에 취소 버튼을 눌렀을 때 발생합니다. onresize지정된 요소의 크기가 변경되었을 때 발생합니다. onerror문서 객체가 로드되는 동안 문제가 발생되었을 때 발생합니다. 더 많은 이벤트 정보:https://www.w3schools.com/jsref/dom_obj_event.asp 지정한 요소에 이벤트를 적용하는 방법에는요소에 직접 이벤트를 등록하는 방법과,DOM을 이용하여 지정된 요소에 이벤트를 등록하는 방법이 있습니다. 직접 요소 이벤트 등록 방식 html 태그에 직접 등록합니다 1&lt;button id= \"btn\" onclick=\"alert('Event')\"&gt;버튼&lt;/button&gt; DOM을 이용한 이벤트 등록 방식 스크립트 선언문 영역에 작성하여 등록합니다. 123456&lt;button id=\"btn\"&gt;버튼&lt;/button&gt; &lt;script&gt; document.getElementByid(\"btn\").onclick=function(){ alert('Event'); } &lt;/script&gt; 키보드 접근성마우스 이벤트를 등록할 경우에는 마우스가 없어도 접근(작동)할 수 있도록 해야 하는데, 이것을 키보드 접근성 이라고 합니다. 마우스 이벤트가 등록되었을 때는 반드시 키보드로 작동할 수 있게대응 이벤트를 함께 작성해야 합니다. 마우스 이벤트 키보드 대응 이벤트 onmouseover onfocus onmouseout onblur 예시123456789/* 마우스가 없을 경우 키보드 [tab]키를 사용해 이용할 수 있도록 키보드 대응하는 이벤트 onfocus를 추가하였습니다.*/ var btn=document.getElementById(\"btn\"); btn.onmouseover=btn.onfocus=function(){ colorBg(); } /* 마우스가 없을 경우 키보드 [tab]키를 사용해 이용할 수 있도록 키보드 대응하는 이벤트 onfocus를 추가하였습니다.*/ &lt;button onmouseover=\"colorBg();\" onfocus=\"colorBg();\"&gt; 버튼3&lt;/button&gt; 한 요소에 이벤트 중복 등록잘못된 사례: 123456789&lt;button id=”btn” onclick=”alert(‘실행문1’);” onclick=”alert(‘실행문2’)”;&gt;버튼 //두번째 경고 창인 실행문2만 실행됩니다.document.getElementById(“btn”).onclick=function(){ alert(‘실행문1’); //실행 안됨 } document.getElementById(“btn”).onclick=function(){ alert(‘실행문2’); // 실행 됨 } 한 요소에 중복으로 이벤트 등록 하는 방법 IE 8 이하 이외에 브라우저 (파이어폭스,크롬,사파리 등) addEventListener document.getElementById(&quot;myBtn&quot;).addEventListener(&quot;click&quot;, myFunction); document.getElementById(&quot;myBtn&quot;).addEventListener(&quot;click&quot;, someOtherFunction);기존 이벤트를 덮어 쓰지 않고동일한 요소에 많은 이벤트를 추가 할 수 있습니다. 이 예제는 동일한 &lt; button&gt; 요소에두 개의 클릭 이벤트를 추가하는 방법을 보여줍니다. 잘못된 예시 처럼 function에 alert 실행문 1,2 가 있더라도경고문(실행문1)이 뜨고 난뒤 두번째 경고문 (실행문2)가 나타나게 합니다. IE 8 이하 브라우저에서는 attachEvent를 사용합니다. 조건문을 이용하여 (크로스 브라우징 검사)사용자 브라우저에 맞는 실행문을 나눠 사용 할수 있습니다. 123456var x = document.getElementById(\"myBtn\"); if (x.addEventListener) { // IE8 이전버젼을 제외한 브라우저 x.addEventListener(\"click\", myFunction); } else if (x.attachEvent) { // IE8 혹은 그 이전 버젼의 IE브라우저 x.attachEvent(\"onclick\", myFunction); }","link":"/2020/03/09/%EC%9D%B4%EB%B2%A4%ED%8A%B8%20-JavaScript/"},{"title":"자바스크립트 기초 문법","text":"1. 자바스크립트 선언문 1. type 속성12&lt;script type=\"text/javascript\"&gt; &lt;/script&gt; 옛날 표준인 HTML4 에는type=”text/javascript”라는 속성이 필요했습니다.HTML5부터는 사용하지 않아도 됩니다. HTML5 에선 불필요한 MIME 유형을 제공하기보다는 속성을 생략할 것을 권장합니다. 2. language 속성12&lt;script language=\"javascript\"&gt; &lt;/script&gt; 스크립트 언어를 표시하기위한 속성.이속성은 표준화되지 않았습니다. 3. 생략12&lt;script&gt; &lt;/script&gt; html5 부터는 디폴트로 script 는 js로 쓰기때문에type값을 생략한 script 로만 사용하셔도 무방합니다. 4. 외부에서 불러오기1&lt;script src=\"소스경로\"&gt;&lt;/script&gt; 2. 자바스크립트 선언문은 HTML문서 어디에 작성하나요?자바스크립트는 &lt; head&gt;태그 영역 또는 &lt; body&gt;태그 영역에 선언하면 됩니다. HTML의 &lt; head&gt; 섹션이 아니라 &lt; /body&gt; 태그 바로 앞에 두는 것이 가장 좋습니다. 그 이유는 HTML이 웹에서 로딩되는 순서가 위에서 아래로 로드되기 때문입니다.head를 먼저 로드 한 다음 body를 로드합니다.JavaScript을 헤드 영역에 넣으면 HTML을 로드하기 전에전체 JavaScript 파일이 로드되므로 몇 가지 문제가 발생할 수 있습니다. 1. HTML을 변경하는 코드가 JavaScript에있는 경우실제로 영향을 줄 수있는 HTML 요소가 없으므로 JavaScript 코드가 작동하지 않는 것처럼 보입니다. 오류가 발생할 수 있습니다. 2. JavaScript가 많은 경우HTML을 로드하기 전에 모든 JavaScript를 로드하기 때문에 페이지 로딩이 눈에 띄게 느려질 수 있습니다. 자바 스크립트 링크를 HTML &lt;/ body&gt;태그 앞에 배치하면자바 스크립트가 로드되기 전에 HTML을 로드 할수 있게 하여 오류를 방지하고웹 사이트 응답 시간을 단축 할 수 있습니다. 3. 자바스크립트 주석 처리1234567//한 줄 설명글인 경우 /* 설명글이 여러줄 인 경우 설명글이 여러줄 인 경우 */ 4. 자바스크립트 코드 입력시 주의할 점 1. 자바스크립트는 대·소문자를 가려서 씁니다.날짜 객체 생성:New date(); (X) 날짜 객체 생성:New Date(); (O)2. 실행문을 작성할 때는 한줄에 한 문장만 작성하는 것이 가독성을 위해 좋습니다.3. 문자형 데이터를 작성할 때는 큰 따옴표(“”)와 작은따옴표(‘’)을 주의12345\"\"겹침 오류 document.write(\"문자형 데이터 \"작성시 따옴표 겹침을\" 주의 합니다.\") (X) document.write('문자형 데이터 \"작성시 따옴표 겹침을\" 주의 합니다.') (O) document.write(\"문자형 데이터 \"작성시 따옴표 겹침을\" 주의 합니다.\") (O) 5. 자바스크립트 data types12345678910111213141516171819202122231. String (문자형 데이터 타입) const what = \"JS Study\" 2. Boolean (논리형 데이터 타입 true or false) const what = true; 3. Number (숫자형 데이터 타입) const what = 123; 4. Float (소숫점 데이터 타입) const what = 123.4; 5. Null (값이 없는 = 데이터를 비우고자 할때 사용) const what = null; 6. Undefined (값이 없는 = 지정 되지않음) const what; 6. 자바스크립트 변수 선언 1. ES6 이전 - varES6 이전 사용하던 변수 선언 방식으로변수 선언 방식에 있어서 큰 단점을 가지고있어ES6 이후 잘 사용되지 않는다. 12345var name = \"first\"; console.log(name); // first var name = \"second\"; console.log(name); // second 이런식으로 변수를 한 번 더 선언하게 되는 실수를 하는 경우에러가 나오지 않고 각기 다른 값이 출력 된다.이는 어디에서 어떻게 사용 될지도 파악하기 힘들뿐더러 값이 바뀔 우려가 있다. 2. ES6 이후, 이를 보완하기 위해 추가 된 변수 선언 방식 let 과 const123456let name = \"first\"; console.log(name); // first let name = \"second\"; console.log(name); // Uncaught SyntaxError: Identifier 'name' has already been declared name이 이미 선언 되었다는 에러 메세지가 나온다.const를 사용해도 마찬가지로 변수 재선언이 되지 않는다. let은 변수에 재할당이 가능123456789let name = \"first\"; console.log(name); // first let name = \"second\"; console.log(name); // Uncaught SyntaxError: Identifier 'name' has already been declared name = \"third\"; consol.log(name); // third const는 변수 재선언, 변수 재할당 모두 불가능 (상수)12345678910const name = \"first\"; console.log(name) // first; const name = \"second\"; console.log(name); // Uncaught SyntaxError: Identifier 'name' has already been declared name = \"third\"; consol.log(name); //Uncaught TypeError: Assignment to constant variable. 참고:https://www.daleseo.com/js-var-issues/https://www.daleseo.com/js-es2015-let/https://gist.github.com/LeoHeo/7c2a2a6dbcf80becaaa1e61e90091e5d https://happycording.tistory.com/entry/let-const-%EB%9E%80-%EC%99%9C-%EC%8D%A8%EC%95%BC%EB%A7%8C-%ED%95%98%EB%8A%94%EA%B0%80-ES6","link":"/2020/02/23/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EA%B8%B0%EC%B4%88%20%EB%AC%B8%EB%B2%95/"},{"title":"자바스크립트 선택문,반복문","text":"자바스크립트의 선택문(switch)와 반복문(while,for) 선택문 switch변수에 저장된 값과 switch 문에 있는 경우(case) 값을 검사하여, 일치하는 값이 있을때 해당하는 실행문을 실행합니다. 12345678910111213switch (변수){ case 1값: 실행문1; /*변수값이 case값에 일치하는 데이터가 있으면, 해당하는 실행문 실행*/ break; //반복문을 강제로 끝내는 break; case 2값: 실행문2; break; case 3값: 실행문3; break; default: 실행문4; //일치하는 값이 없을경우에 실행 if 와 switch 차이점if문은 조건이 만족할 때 와 만족하지 않을때를 확인하기 위한 작업이 필요합니다. 조건식이 많아 질수록 느려 질수 있습니다. 123456789if(){ document.write();}else if(){ document.write();}else if(){ document.write();}else{ document.write();} switch문은 조건의 수를 따지지 않고 입력된 변수 값을 보고 해당하는 특정 위치로 점프합니다. 사실 조건식이 3개 이상일시 if보다 switch 빠르다라는 효율적 측면보다.가독성과 코드의 의미를 생각하며 사용하는게 옳다고 합니다. 반복문 whilewhile문은 조건식을 만족(true)할 때까지 실행문을 여러 번 반복하여 실행시킬 수 있습니다. 조건식을 만족할때 까지 {} 내에 실행문을 반복 실행 시킵니다. while문의 실행 순서는 1.조건식을 검사. 2.조건식 만족시 {}내에 실행문과 증감식을 실행. 3.증감식 실행후 조건식을 다시 검사. --반복 4.조건식이 거짓(false)값 이면 종료됩니다.12345678910111213141516171819202122232425262728293031323334353637383940414243let i=1; // 초기값 선언 while(i&lt;=10){ // i 값이 10보다 작거나 같을때(true) 까지 반복 document.write(\"안녕하세요\"+i,\"&lt;br /&gt;\"); // 실행문 i++; // 증감식 } /* 안녕하세요1 안녕하세요2 안녕하세요3 안녕하세요4 안녕하세요5 안녕하세요6 안녕하세요7 안녕하세요8 안녕하세요9 안녕하세요10 */``` * * *20부터 10까지 숫자 중 짝수을 경우 에는 파란색으로 출력,홀수일 경우에는 빨간색으로 출력되도록 한 예제.```jslet i=20; while(i&gt;=10){ // i의 값이 10보다 클 때까지 반복문을 실행. if(i%2==0){ // i의 값을 2로 나눠서 나머지가 0일 경우 (2의 배수) document.write(\"&lt;font color='blue'&gt;\"+i+\"&lt;/font&gt;\", \"&lt;br/&gt;\"); } else{ // 2로 나눠서 나머지가 0이 아닐 경우 document.write(\"&lt;font color='red'&gt;\"+i+\"&lt;/font&gt;\", \"&lt;br/&gt;\"); } i--; // 감소 연산자 (i값을 1씩 감소 시킴.) } for 문for 문은 조건식을 만족할 때까지 실행문을 반복하여 실행합니다. while 문보다 편리해 사용 빈도가 높은 편입니다. for(초기값;조건식;증감식){ 실행문; }12345678910111213141516for (let i=1; i&lt;=10; i++){ // i=1 , i값이 10까지 1씩 증가하며 반복합니다. document.write(\"반복\"+i,\"&lt;br/&gt;\"); /* 반복1 반복2 반복3 반복4 반복5 반복6 반복7 반복8 반복9 반복10 */ } for 문을 이용하여 1~100까지 숫자에서 5의 배수일 경우 빨간색, 7의 배수일 경우 초록색, 5의 배수이며 7의 배수일 경우 아쿠아색으로 출력한 예제 123456789for(let a=1; a&lt;=100; a++){ //변수 i가 100이 될 때까지 반복 실행합니다. if(a%7==0 &amp;&amp; a%5==0){ //5의 배수이고 7의 배수가 인 경우 document.write(\"&lt;font color='aqua'&gt;\"+a+\"&lt;/font&gt;\",\"&lt;br /&gt;\"); }else if(a%5==0){ //5의 배수인 경우 document.write(\"&lt;font color='red'&gt;\"+a+\"&lt;/font&gt;\",\"&lt;br /&gt;\"); }else if(a%7==0){ //7의 배수인 경우 document.write(\"&lt;font color='green'&gt;\"+a+\"&lt;/font&gt;\",\"&lt;br /&gt;\"); } } continue 문continue 문은 반복문에서만 사용할 수 있습니다. continue 문 다음에 오는 실행문은 무시하고 실행해라는 뜻입니다. 1234567891011121314// for 예시 for(초깃값; 조건식; 증감식){ continue; //다음에 오는 실행문은 무시하고 증감식으로 이동되 실행됩니다. 실행문; } // while 예시 let 변수=초깃값; while(조건식){ 증감식; continue; //다음에 오는 실행은 무시하고 조건식으로 이동합니다. 실행문; } countinue 실행문 무시 예제 123456789for(let i=1; i&lt;=10; i++){ if(i%2==0) continue; // i가 2의 배수일때의 실행문은 무시하고 증감식으로 넘어갑니다. document.write(i,\"&lt;br /&gt;\"); // i값이 2의 배수가 아닌경우에만 실행됩니다. //1 3 5 7 9 } 중첩 for문으로 구구단 만들기1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677for(let i=2; i&lt;=9; i++){ // i는 2부터 9까지 1씩 커지게 반복시킵니다. document.write(\"&lt;h1&gt;\"+i+\"단&lt;/h1&gt;\"); // i값+\"단\" 을 h1태그로 묶어 표시합니다. for(let k=1; k&lt;=9; k++){ // k는 1부터 9까지 1씩 커지게 반복시킵니다. document.write(i+\"X\"+K+\"=\"+i*K,\"&lt;br/&gt;\"); /* i값 2부터 k값 1부터 9까지 i값 9까지 반복 실행되어 i값+\"X\"+K값+\"=\" 이 2X1 부터 순차적으로 실행되며 +i*k 는 각 값의 곱셈이 실행됩니다. */ } }``` * * *### 현재 연도와 월에 맞는 전체 일자 출력하기```js//현재 년도와 월을 입력받습니다. const year=prompt(\"현재 몇 년 입니까?\",\"0000\"); const mon=prompt(\"현재 몇 월 입니까?\",\"0\"); let last_day; /*현재 월이 몇일까지 있는지 선택문을 이용해 구합니다.*/ switch (mon){ case \"1\" : last_day=31; break; case \"2\" : last_day=28; /*현재 년도가 4년주기이고 100년 주기는 아닌경우 또는 400년 주기로 윤년이므로 2월은 29일까지 있습니다.*/ if(year % 4==0 &amp;&amp; year % 100 !=0 || year % 400 ==0){ last_day=29; } break; case \"3\": last_day=31; break; case \"4\": last_day=30; break; case \"5\": last_day=31; break; case \"6\": last_day=30; break; case \"7\": last_day=31; break; case \"8\": last_day=31; break; case \"9\": last_day=30; break; case \"10\": last_day=31; break; case \"11\": last_day=30; break; case \"12\": last_day=31; break; } for(let i=1; i&lt;=last_day; i++){ document.write(i+\" \"); } 자바스크립트 for 이용한 별 찍기직각삼각형 만들기 1234567891011121314let star=\"\"; for(let i=1; i&lt;=5; i++){ star +=\"*\"; console.log(star); } /* * ** *** **** ***** */ 역 직각 삼각형 만들기 12345678910111213141516171819let star = \"\"; for (let i = 0; i &lt; 5; i++) { for (let j = 0; j &lt; i; j++){ star += \" \"; } for (let k = 1; k &lt;= 5 - i; k++){ star += \"*\"; } star += \"n\"; } console.log(star); /* ***** **** *** ** * */ 정삼각형 만들기 123456789101112131415161718192021let star = \"\"; for (let i = 1; i &lt;= 5; i++) { for (let k = 5; k &gt;i; k--) { star += \" \"; } for (let j =1; j&lt;(i*2); j++) { star += \"*\"; } star+=\"n\"; } console.log(star); /* * *** ***** ******* ********* */ 마름모 만들기 - 1 12345678910111213141516171819202122232425262728293031323334let star = \"\"; for (let i = 1; i &lt;= 5; i++) { for (let k = 5; k &gt;i; k--) { star += \" \"; } for (let j =1; j&lt;(i*2); j++) { star += \"*\"; } star+=\"n\"; } for (let s = 1; s &lt;= 4; s++){ for(let x= 0; x &lt;s; x++){ star+=\" \"; } for(let q=9; q&gt;s*2; q--){ star+=\"*\"; } star +=\"n\"; } console.log(star); /* * *** ***** ******* ********* ******* ***** *** * */ 마름모 만들기 - 2 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950let star=\"\"; // 공백과 별이 들어갈 변수입니다. let count = 9; // 반복문을 실행시킬 총 값 입니다. let halfNum = Math.round(count/2); /* count/2 소수점 값 반올림하여 절반 값을 구합니다. (count 값에 홀수,짝수,소수점 값이 와도 일정하게 절반 값을 구합니다.) */ let space=0; for (let i = 1; i &lt;= count; i++) { // count 값 만큼 반복문을 실행합니다. for(let k=1; k&lt;=halfNum+space; k++){ /* 행값입니다 1부터 (halfNum+space)와 같거나 작은 값까지 반복하고. 열(i) 값에 따라 행 값을 1씩 늘리거나 줄일 것입니다. */ /* k&lt;= 5(halfNUm) + 0 (space) // k&lt;= 5 k&lt;= 5(halfNUm) + 1 (space) // k&lt;= 6 k&lt;= 5(halfNUm) + 2 (space) // k&lt;= 7 k&lt;= 5(halfNUm) + 3 (space) // k&lt;= 8 k&lt;= 5(halfNUm) + 4 (space) // k&lt;= 9 k&lt;= 5(halfNum) + 3 (space) // k&lt;= 8 k&lt;= 5(halfNum) + 2 (space) // k&lt;= 7 k&lt;= 5(halfNum) + 1 (space) // k&lt;= 6 k&lt;= 5(halfNum) + 0 (space) // k&lt;= 5 */ /* k 가 halfNum-spcae값 보다 작을때 true값 \" \"; false값 \"*\"을 star값에 저장합니다. */ star+= k&lt;halfNum-space ? \" \" : \"*\"; /* k&lt; 5(halfNum)-0(space) // k&lt;5 \\\\\\\\F k&lt; 5(halfNum)-1(space) // k&lt;4 \\\\\\FFF k&lt; 5(halfNum)-2(space) // k&lt;3 \\\\FFFFF k&lt; 5(halfNum)-3(space) // k&lt;2 \\FFFFFFF k&lt; 5(halfNum)-4(space) // k&lt;1 FFFFFFFFF k&lt; 5(halfNum)-3(space) // k&lt;2 \\FFFFFFF k&lt; 5(halfNum)-2(space) // k&lt;3 \\\\FFFFF k&lt; 5(halfNum)-1(space) // k&lt;4 \\\\\\FFF k&lt; 5(halfNum)-0(space) // k&lt;5 \\\\\\\\F */ } if(i&lt;halfNum){ //i값이 halfNum 값보다 작다면 space++; space++; }else{ // 아닌 경우 space--; space--; } star+=\"n\"; } console.log(star);","link":"/2020/02/25/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%84%A0%ED%83%9D%EB%AC%B8/"},{"title":"자바스크립트 연산자","text":"1. 산술 연산자+ , - , * , / , %123456789101112131415161718let num1 = 15; let num2 = 2; let result; result=num+num2; // 더하기 document.write(result,\"&lt;br /&gt;\"); // 17 result=num-num2; // 빼기 document.write(result,\"&lt;br /&gt;\"); // 13 result=num*num2; // 곱하기 document.write(result,\"&lt;br /&gt;\"); // 30 result=num/num2; // 나누기 document.write(result,\"&lt;br /&gt;\"); // 7.5 result=num%num2; // 나머지 document.write(result,\"&lt;br /&gt;\"); // 1 2. 문자 결합 연산자문자형데이터+문자형데이터 = 문자형데이터 문자형데이터+숫자형데이터 = 문자형데이터123456789let t1=\"학교종이\"; //문자형 데이터 저장 let t2=\"떙떙땡\"; //문자형 데이터 저장 let t3=8282; //숫자형 데이터 저장 let t4=\"어서 모이자\"; //문자형 데이터 저장 let result; result=t1+t2+t3+t4; document.write(result); //학교종이땡땡땡8282어서 모이자 3. 대입 연산자대입 연사자의 종류 A = B (A = B) A += B (A = A+B) A *+ B (A = A*B) A / B (A = A/B) A %= B (A = A%B)예시1234567891011let num1=10; let num2=3; num1+=num2; // num1= num1(10) + num2(3) =13; num1에 저장 document.write(num1,&quot;&lt;br/&gt;&quot;); //num1에 저장된 값 출력 num1-=num2; // num1= num1(13) - num2(3) =10; num1에 저장 document.write(num1,&quot;&lt;br/&gt;&quot;); num1*=num2; // num1= num1(10) * num2(3) =30; num1에 저장 document.write(num1,&quot;&lt;br/&gt;&quot;); num1%=num2; // num1= num1(30) % num2(3) =0 num1에 저장 document.write(num1,&quot;&lt;br/&gt;&quot;); 문자형 데이터로 저장된 HTML태그 연산자로 결합하기12345678let t =\"&lt;table border='1'&gt;\"; t+=\"&lt;tr&gt;\"; t+=\"&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;\"; t+=\"&lt;/tr&gt;\"; t+=\"&lt;/table&gt;\"; document.write(t); //t=\"&lt;table border='1'&gt;\"&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 4. 증감 연산자증감 연산자에는숫자형 데이터를 1씩 증가시키는 ++연산자가 있고1씩 감소시키는 –연산자가 있습니다. 12let a=++b // 변수 b의 값을 1 증가 시킨후 a에 저장합니다. (증가가 먼저) let a=b++ // 변수 a에 변수b값을 저장한후 변수b의 데이터를 1 증가시킵니다. (대입이먼저) 5. 비교 연산자A&gt;B A는B보다 크다. A&lt;B A는B보디 작다. A&gt;=B A는B보다 크거나 같다. A&lt;=B A는B보다 작거나 같다. A==B A와B는 같다. (데이터 형과 문자형을 상관X, A=10 B=&quot;10&quot; 이라면 true값) A!=B A와B는 다르다. (데이터 형과 문자형을 상관X, A=10 B=&quot;10&quot; 이라면 false값) A===B A와B는 같다. (데이터 형과 문자형을 구분, A=10 B=&quot;10&quot; 이라면 false값) A!==B A와B는 다르다. (데이터 형과 문자형을 구분, A=10 B=&quot;10&quot; 이라면 true값)123456789101112let a =10; //a값 10 let b =20; //b값 20 let c =10; //c값 10 let f =\"20\"; //d값 문자형\"20\" let result; result=a&gt;b; //false result=a&lt;b; //true result=a&lt;=b; //true result=b==f; //true result=a!=b; //true result=b===f; //false 6. 논리 연산자 논리 연산자에는 ||(or), &amp;&amp;(and) , !(not)가 있습니다. 1. ||or 연산자라고 부르며, 피연산자 중 값이 하나라도 true이면 true값 반환. 2. &amp;&amp;and 연산자라고 부르며, 피연산자 중 값이 하나라도 false이면 false값 반환. 3. !not 연산자라고 부르며, 단항 연산자입니다. 피연산자의 값이 true이면 반대로 false값 반환. 7. 삼향 조건 연산자조건식(true,false) 데이터 결과값에 따라 스크립트 코드를 다르게 실행할때 사용. 기본형 조건식? 실행문1 : 실행문2; true값일 시 실행문1 실행, false값일 시 실행문2 실행123456const a=10; const b=3; const result=a&gt;b? \"javascript\" : \"hello\"; document.write(result); //10&gt;3=true 값 이므로 실행문 1인 \"javascript\"를 훌력 연산자 우선순위 () 단항 연산자(–,++,!) 산술 연산자(*,/,%,+,-) 비교 연산자(&gt;,&gt;=,&lt;,&lt;=,==,===,!==) 논리 연산자(&amp;&amp;,||) 대입(복합 대입) 연산자(=,+=,-=,*=,/=,%=)","link":"/2020/02/24/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%97%B0%EC%82%B0%EC%9E%90/"},{"title":"자바스크립트 조건문","text":"if 와 elseif문은 조건식을 만족하는(true) 경우에만 실행문을 실행합니다. 기본형 if(조건식){ 실행문; } 123456let num=10; if(num&lt;500){ //조건식을 만족하면 실행문을 실행합니다. document.write(\"hello\"); // hello } 조건식에 논리형 데이터가 아닌 다른 형이 오는 경우논리형 데이터 (true,false)값이 아닌 다른 형의 데이터가 입력되더라도 true 또는 false로 인식됩니다. 다음값이 조건식에 입력되면 false를 반환하지만, 그 밖에 모든값은 true로 인식됩니다. 0, null, “”(빈 문자), undefined else 문은 조건식이 true일 경우와 false일 경우에 따라 실행되는 실행문이 달라집니다. prompt 사용 예 (사용자로 부터 값을 입력받는 메서드) 질의응답 1234567const num=prompt(\"당신이 좋아하는 숫자는?\",\"0\"); if (num%2)==0{ //짝수일 경우 document.write(\"당신이 좋아하는 숫자는 짝수입니다.\"); }else{//홀수일 경우 document.write(\"당신이 좋아하는 숫자는 홀수입니다.\"); } confirm 사용 예 (확인/취소 창) 12345678const result=confirm(\"정말로 회원을 탈퇴하시겠습니까?\"); //확인 버튼시 true, 취소 버튼시 false if(result){ //true값일 때 실행문 실행 document.write(\"탈퇴 처리되었습니다.\"); }else{ //false값일 때 실행문 실행 document.write(\"탈퇴 취소되었습니다.\"); } else ifelse if 문은 두 가지 이상의 조건식과 조건을 만족하지 않은 경우 실행되는문으로 이루어져 있습니다. 1234567891011const mon=prompt(\"현재는 몇 월입니까?\",\"0\"); if(mon&gt;=3 &amp;&amp; mon&lt;=5){ //3월~5월 이라면, document.write(\"봄이네요\"); }else if(mon&gt;=6 &amp;&amp; mon&lt;=8){ //6월~8월 이라면 document.write(\"여름이군요\"); }else if(mon&gt;=9 &amp;&amp; mon&lt;=11){ //9월~11월 이라면 document.write(\"가을이네요\"); }else{ //그 밖에 값이라면 document.write(\"겨울인가요?\"); } 중첩 if 문조건문 안에 조건문이 오는 것을 중첩if 문이라고 합니다. 일반적으로 바깥쪽 조건문 조건식1을 만족해야만 안쪽에 있는 조건문인 조건식2를 검사합니다. 조건식2를 만족하지 않는다면, 조건식1의 실행문만 실행하고 종료됩니다. 1234567891011121314151617181920const id=\"hdw0903\"; const pw=\"1004\"; var id = \"1\" const user_id=prompt(\"아이디를 입력하세요\",\"\"); if(id==user_id){ //id가 일치했을 경우 안쪽 if문 실행 const user_pw=prompt(\"비밀번호를 입력하세요\",\"\"); if(pw==user_pw){ //pw도 일치했을 경우 실행문 실행 document.write(user_id+\"님 로그인 되었습니다\"); } else{ //pw 일치하지 않는경우 alert(\"비밀번호가 일치하지 않습니다.\"); location.reload(); //페이지 새로고침 }// 안쪽 if문 종료 } else{ //아이디가 일치하지 않는 경우 alert(\"아이디가 일치하지 않습니다.\"); location.reload(); // 안쪽 if문 실행되지 않음, 페이지 새로고침 }// 종료","link":"/2020/02/24/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%A1%B0%EA%B1%B4%EB%AC%B8/"},{"title":"키워드, 블록 스코프 -ECMAScript","text":"글로벌 변수 오해글로벌 오브젝트에 작성한 변수는 글로벌 오브젝트가 스코프입니다.글로벌 오브젝트에 작성하여 글로벌 변수라고 부르는 것이지,글로벌 오브젝트에서 보면 로컬 변수입니다. var 키워드를 작성하지 않으면 글로벌 변수로 간주한다는 점으로 인해var키워드를 작성하지 않을 뿐이지 글로벌 변수는 var 키워드를 사용하지 않는다는것이 아닙니다. 글로벌 변수도 var 키워드를 사용하여 var global = “”; 형식으로 작성하는 것이 정확한 작성법입니다. 글로벌 변수는 객체지향 관점에서 보면 단점이라고 할 수 있습니다.function 안에서 글로벌 오브젝트에 작성된 글로벌 변수를 사용할 수는 있지만,다른 프로그램에서 글로벌 변수 값을 변경 하거나 재사용 할 수도 있는위험이 있습니다.이러한 경우는 자칫 오류를 만들게 되어 객체 지향 기본에서 어긋나는 행동입니다. let 키워드let 키워드 변수 선언 형태 let sports = “축구”; let 키워드는 var 키워드의 문제점을 해결하기 위한 것으로다음과 같은 특징이 있습니다. 함수 안에 작성한 let 변수는 함수가 스코프 입니다. 함수 안에 if(a=b) {let sports = “축구”} 형태의 코드를 작성했을 때,sports 변수는 함수가 스코프가 아니라 if문의 블록{}이 스코프입니다. 블록{} 밖에 같은 이름의 변수가 있어도 스코프가 다르므로 변수 각각에 값을 설정할 수 있고 그 변수 값이 유지됩니다. 블록{} 안에 블록{}을 계층적으로 작성하면 각각의 블록이 스코프입니다. 같은 스코프 안에서 같은 이름의 let 변수는 허용되지 않습니다. 블록 스코프let 변수를 선언하는 가장 큰 목적은 스코프이며 그중에서도 블록 스코프가 돋보입니다.블록{} 안과 밖에 변수 이름이 같더라도 스코프가 다르므로변수가 선언되고 각 변수에 할당된 값이 대체되지 않고 유지됩니다. 123456let sports = \"축구\"; if (sports){ let sports = \"농구\"; 1. console.log(\"블록: \", sports); // 농구 } 2. console.log(\"글로벌: \", sports); // 축구 if문 앞에 같은 이름의 sports 변수가 있지만 블록{}을 기준으로스코프가 다르므로 각 sports 변수에 값이 할당되어“축구”가 “농구”로 대체되지 않고 각 값이 유지됩니다. let과 this 키워드123451. var music = \"음악\"; //var (this) console.log(this.music); 2. let sports = \"축구\"; //let (this) console.log(this.sports); var 키워드는 현재 글로벌 오브젝트의 상태이고this는 글로벌 오브젝트를 참조하게 되어music 변수 값인 “음악”이 출력됩니다. let 키워드로 선언,할당한 후this로 sports값을 출력하면 undefined가 출력됩니다.this가 글로벌 오브젝트를 의미하여 window 오브젝트를 참조하는데window 오브젝트에 let 변수가 없다는 것은window 오브젝트에 let 변수가 설정되지 않는다는 의미 입니다.이점이 var변수와 let변수의 차이입니다. functionfunction도 스코프를 가지므로 하나의 블록 스코프입니다.function 안에 선언된 모든 변수가 function내의 스코프에 속하고function안에 if 블록{}은 스코프 안에 스코프를 가지는 계층 구조의 형성입니다. 12345678let sports = \"축구\", music = \"재즈\"; // get 함수 밖에 sports 와 music을 선언하고 값을 설정했습니다. function get(){ let music = \"클래식\"; //get 함수안에 music을 선언,할당했습니다. 1. console.log(music); 2. console.log(sports); } get(); var 변수와 마찬가지로 함수안에서 music 변수를 검색하고,없으면함수 밖으로 나가 검색합니다. 함수안에 music변수가 있으므로“클래식”이 출력됩니다. 함수안에 sports변수가 없으므로 함수 밖의 sports값인 “축구”를 출력합니다. 이와 같이 let 변수도 가장 가까운 스코프에 있는 변수를 먼저 사용합니다. 예시2123456789101112131415var sports = \"축구\"; // var sports let music = \"재즈\"; // let music function get(){ var sports = \"농구\"; let music = \"클래식\"; 1. console.log(\"1:\", sports); 2. console.log(\"2:\", this.sports); 3 .console.log(\"3:\", this.music); }; // 1번째 호출 window.get(); // 2번째 호출 get(); strict 모드에서 window.get과 같이 get() 앞의 오브젝트 위치에window를 작성하면 function get() 내의 this가 window 오브젝트를 참조합니다. 함수 안에 sport 변수가 있으므로 그 값인 “농구”를 출력합니다. window.get()형태로 호출했으므로 this가 window 오브젝트를 참조하여get()함수 밖의 var 변수 sports의 값 “축구”를 출력합니다. undefinedthis가 window 오브젝트를 참조하여 get()함수 밖의 music 변수를 찾지만music 변수가 let으로 선언되어 있어 this(window 오브젝트)로 참조할 수 없어 undefined가 출력됩니다. get()과 같이 오브젝트를 지정하지 않고 호출하면 this가 window 오브젝트를 참조하지 않습니다. sports는 var 변수입니다.var변수는 window 오브젝트 지정과 관계없이 함수 안의 변수를 참조하여“농구”가 출력됩니다. ,3. 에러window 오브젝트를 작성하지 않고 호출하여 this가 window 오브젝트를 참조 &gt;하지못하고 엔진은 참조할 오브젝트 위치에 undefined를 설정합니다.this는 참조할 오브젝트 위치에 있는 undefined를 참조하게 되고TypeError가 발생합니다. try-catchtry-catch문에서 try 블록{}기준으로 블록 스코프를 갖습니다.catch 블록은 스코프를 가지지 않으며 try 블록 스코프에 속합니다. 12345678910let sports = \"축구\"; //try문 밖의 let sports try { let sports = \"농구\"; //try문 안에 let sports 1. console.log(sports); } catch (e) {}; 2. console.log(sports); 1. try문 블록{} 스코프의 sports 값 출력 “농구”2. try문 밖의 sports 값 출력 “축구” switch-caseswitch-case 문에서 switch 블록이 블록 스코프입니다.switch 안에 case는 별도의 스코프를 갖지 않으며 switch 스코프에 속합니다. 12345678var count = 1; // switch문의 case1:을 실행하기 위해 count에 1할당 let sports = \"축구\"; //switch문 밖의 let sports switch (count) { case 1: let sports = \"농구\"; //switch문 내의 let sports console.log(sports); // \"농구\"가 출력됩니다. }; console.log(sports); //\"축구\"가 출력됩니다. for()for()문에서 var변수로 작성하는 것과 let변수로 작성하는 것에는큰 차이가 있습니다.let 변수는 반복할 때 마다 스코프를 갖는 반면,var 변수는 스코프를 갖지 않습니다. 12345&lt;ul&gt; &lt;li&gt;1~10&lt;/li&gt; &lt;li&gt;11~20&lt;/li&gt; &lt;li&gt;21~30&lt;/li&gt; &lt;/ul&gt; var12345678var nodes = document.querySelector(\"ul\"); for (var k = 0; k &lt; nodes.children.length; k++){ var el = nodes.children[k]; el.onclick = function(event){ event.target.style.backgroundColor = \"yellow\"; console.log(k); } }; querySelector(“ul”)으로 html에 작성된 li 요소 3개를 nodes 변수에 할당합니다.nodes.childern.length는 NodeList의 요소 수로 3입니다.for문을 반복하면서 각 li 요소마다 onclick 이벤트를 설정합니다.클릭시 배경색을 변경하고 for문의 K 변수 값을 출력합니다.어떤 li요소를 클릭하더라도 콘솔에 K값 3이 출력되며 3이 K의 최종값 입니다. 클릭한 li 요소에 해당하는 K변수 값을 출력하고 싶다면let변수를 사용하면 됩니다. let12345678var nodes = document.querySelector(\"ul\"); for (let k = 0; k &lt; nodes.children.length; k++){ var el = nodes.children[k]; el.onclick = function(event){ event.target.style.backgroundColor = \"yellow\"; console.log(k); } } li요소를 클릭하면 onclick이벤트를 설정했을 때사용한 K변수 값을 출력합니다. 0,1,2이는 let변수가 스코프를 갖기 때문입니다. constconst 변수에 할당된 값은 상수가 됩니다.상수는 재할당 할 수 없으며 재선언 할 수도 없습니다. const 변수는 선언-초기화-할당을 한번에 합니다.즉, const a; 처럼 선언만 해놓을 수 없습니다.반드시 const a = 0; 처럼 초기값을 할당해 줘야 합니다. 상수 선언에는 대소문자 모두 사용할 수 있지만,일반적인 관습은 모두 대문자를 사용하는 것입니다.","link":"/2020/03/16/%ED%82%A4%EC%9B%8C%EB%93%9C,%20%EB%B8%94%EB%A1%9D%20%EC%8A%A4%EC%BD%94%ED%94%84%20-ECMAScript/"},{"title":"효과 및 애니메이션 -jQuery","text":"jQuery Effects jQuery Hide/Show jQuery Fade jQuery Slide jQuery Animate jQuery stop() jQuery delay() jQuery queue() jQuery finish() jQuery Callback jQuery Chaining hide() / show() / toggle() -------------------------- $(selector).hide(speed,callback); $(selector).show(speed,callback); speed : 효과속도 vlaue:[ “fast” | “normarl” | “slow” | (milliseconds) ] callback : 콜백 함수 실행문 (콜백 매개 변수는 hide () 또는 show () 메소드가 완료된 후 실행될 함수입니다) 선택 요소를 효과 속도에 맞춰 숨긴 후 콜백 실행 선택 요소가 숨겨져 있는 경우 속도에 맞춰 노출시키고 콜백 실행 1234567$(\"#hide\").click(function(){ $(\"p\").hide(); }); $(\"#show\").click(function(){ $(\"p\").show(); }); toggle() 메서드로 요소를 숨기거나 보여지게 할 수 있습니다. 123$(\"button\").click(function(){ $(\"p\").toggle(); }); speed : normarl 값을 제외한 “fast”, “slow” ,milliseconds 값을 사용할 수 있습니다. fadeIn() / fadeOut() / fadeToggle() / fadeTo() ---------------------------------------------- fadeIn() 메소드는 숨겨진 요소를 서서히 보여지게 합니다. 12345$(\"button\").click(function(){ $(\"#div1\").fadeIn(); $(\"#div2\").fadeIn(\"slow\"); $(\"#div3\").fadeIn(3000); }); fadeOut() 메소드는 보여지는 요소를 서서히 감춥니다. fadeToggle() 메소드는요소가 숨겨져 있다면 서서히 보여지게,보여지고 있는 요소라면 서서히 감추게 해줍니다. fadeTo() 메소드를 사용하면opacity (0~1사이) 값을 지정해서 요소를 사라지게 할 수 있습니다. 12345$(\"button\").click(function(){ $(\"#div1\").fadeTo(\"slow\", 0.15); $(\"#div2\").fadeTo(\"slow\", 0.4); $(\"#div3\").fadeTo(\"slow\", 0.7); }); slideDown() / slideUp() / slideToggle() --------------------------------------- $(selector).slide메소드(speed,callback);speed: “slow”, “fast”, or millisecondscallback: 콜백 함수는 슬라이딩이 완료된 후 실행될 함수 입니다. slideDown() 메소드는 요소를 슬라이드-다운(펼침) 하게 해줍니다. slideUp() 메소드는slideDown되어 펼쳐져 있는 요소를 슬라이드-업(닫음) 하게 해줍니다. slideToggle() 메소드는요소가 슬라이드 닫혀 있다면 펼쳐주고,펼쳐 있다면 닫아줍니다. 1234$(\"#flip\").click(function(){ // 클릭 했을 때 실행됩니다. $(\"#panel\").slideToggle(); // 클릭 이벤트가 발생한 요소 아래에 slide이벤트를 발생 시킵니다. }); animate ------- animate() 메소드를 사용하여 animation을 커스텀 할 수 있습니다. 기본형$(selector).animate({params},speed,callback); params 매개 변수는 애니메이션효과를 줄 CSS 특성을 말합니다. 사용 예시123$(\"button\").click(function(){ $(\"div\").animate({left: '250px'}); }); 기본적으로 HTML 요소들은 정적위치를 가지기에 이동할 수 없습니다.위치를 이동시키려면 우선 이동시킬 요소의 CSS 속성 position 값을position: relative, fixed, or absolute으로 설정해 줘야 합니다. animate() 메소드를 이용하여 여러CSS속성을 한번에 조작 할 수도 있습니다. 12345678$(\"button\").click(function(){ $(\"div\").animate({ left: '250px', opacity: '0.5', height: '150px', width: '150px' }); }); animate() 메소드를 사용할 때 camel 네이밍 문법으로 사용했는지 유의하며 사용해야합니다. padding-left (x) : paddingLeft (o)margin-right (x) : marginRight (o) 또한 색상 애니메이션은 jQuery핵심 파일에 포함되어 있지 않습니다.색상에 애니메이션을 주고 싶다면Color Animations plugin from https://jQuery.com다운받아야 합니다. 애니메이션 효과를 현재 값을 기준으로 상대적으로 줄 수 있습니다. 단지 값앞에 += 또는 -= 을 넣어주는 것 만으로 됩니다. 1234567$(\"button\").click(function(){ $(\"div\").animate({ left: '250px', height: '+=150px', width: '+=150px' }); }); 사전 정의된 값(Pre-defined Values)을 사용 할 수 있습니다. 예를 들어 animate()값을 hide,show,toggle 으로 줄 수 있습니다. toggle1234567$(\"button\").click(function(){ $(\"div\").animate({ height: 'toggle' //버튼이 클릭될 때 마다 height 속성이 //사라지거나 보여집니다. }); }); Uses Queue Functionality 기본적으로 jQuery에는 애니메이션 대기열 기능이 포함되어있습니다. 이 말은 jQuery animate()메소드를 여러 줄로 작성했을 때jQuery 자체적으로 애니메이션들의 대기열을 만들어animate()메소드 들을 한번에 실행시키는 것이 아니라한개씩 불러와 순차적으로 실행 시키는 기능을 말합니다. 따라서, animate()끼리의 순차적으로 다른 애니메이션효과를 원할때 사용합니다. 1234567$(\"button\").click(function(){ var div = $(\"div\"); 1. div.animate({height: '300px', opacity: '0.4'}, \"slow\"); 2. div.animate({width: '300px', opacity: '0.8'}, \"slow\"); 3. div.animate({height: '100px', opacity: '0.4'}, \"slow\"); 4 .div.animate({width: '100px', opacity: '0.8'}, \"slow\"); }); animate가 동시에 실행 되는 것이 아니라 1.animate 효과가 끝난 후2.animate가 실행 / 3,4번까지순차적으로 실행됩니다. stop() ------ jQuery stop () 메서드는 애니메이션이나 효과가 끝나기 전에 중지하는 데 사용됩니다. stop () 메소드는 슬라이딩, 페이딩 및 사용자 정의 애니메이션을 포함한 모든 jQuery 효과 함수에 작동합니다. $(selector).stop(stopAll,goToEnd); stopAll 선택적 매개 변수입니다.애니메이션 큐도 지워야하는지 여부를 지정합니다.기본값은 false입니다. 즉, 활성 애니메이션 만 중지되어대기중인 애니메이션을 나중에 수행 할 수 있습니다. goToEnd 선택적 매개 변수입니다.현재 애니메이션을 즉시 완료할지 여부를 지정합니다.기본값은 false입니다. 따라서 기본적으로 stop() 메서드는선택한 요소에서 수행중인 현재 애니메이션만 종료합니다. 123$(\"#stop\").click(function(){ $(\"#panel\").stop(); }); delay() ------- delay() 메소드는 queue에서 다음 항목의 실행을 지연시킵니다. 대기중인 effect가 지정된 시간만큼 지연된 후 발생합니다. $(selector).delay(speed,queueName) queueName : queue이름을 직접 지정해 줄 수있습니다.기본값은 effect queue의 표준인 “fx”입니다. 12345$(\"button\").click(function(){ $(\"#div1\").delay(\"slow\").fadeIn(); $(\"#div2\").delay(\"fast\").fadeIn(); $(\"#div3\").delay(1000).fadeIn(); }); queue() / clearQueue() / dequeue() queue란 특정 요소에 실행 대기 중인method 또는 function의 저장소를 말합니다. 1. $(&quot;요소 선택&quot;).queue(); 2. $(&quot;요소 선택&quot;).queue(function(){...}); 선택한 요소의 queue에 대기중인 메서드를 반환합니다. 선택한 요소의 queue에 function을 저장합니다.저장된 이후에 대기중인 메서드는 모두 제거합니다. clearQueue() 메서드는요소의 queue에서 가장 앞에 있는 메서드만 뺴고나머지 queue에서 대기중인 모든 메서드를 제거합니다. dequeue() 메서드는선택한 요소 큐에 대기중인 모든 메서드를 제거합니다. finish() finish()메소드는animation의 현재 동작상태를 모두 무시하고완료 시켜버립니다. (최종 완료 시점만 보여줌) 123$(\"#complete\").click(function(){ $(\"div\").finish(); }); 구동 원리: 현재 실행중인 애니메이션을 중지하고queue에 대기중인 모든 애니메이션을 제거하고선택한 요소에 대한 모든 애니메이션을 완료합니다. Callback callback() function은 현재 실행중인 효과가완전히 끝난후 실행될 function을 의미합니다. Javascript문은 기본적으로 한줄씩 실행됩니다.그러나 코드 내에 effect 들이 있다면첫 줄 effect가 완료되기 전에 다음 코드 줄에 있는 effect가 실행되어오류가 발생할 수 있습니다. 이를 방지하기 위해 callback function을 만드는 것 입니다. callback function 없이 사용했을 때 1234$(\"button\").click(function(){ $(\"p\").hide(1000); alert(\"The paragraph is now hidden\"); }); 위에 코드는 button요소를 클릭 했을 때 실행되지만p요소가 완전히 숨겨지고 나서경고창이 나오지 않습니다.숨겨지기전에 경고창이 나오게 될 것입니다. callback function 이용한 바른 예12345$(\"button\").click(function(){ $(\"p\").hide(1000, function(){ alert(\"The paragraph is now hidden\"); }); }); 먼저 실행될 hide메소드에 callback function을 넣어줘정상적으로 p 요소가 완전히 hide 된 후경고창이 표시됩니다. chaining jQuery를 사용하면 액션 / 메소드를 함께 연결할 수 있습니다.체인을 사용하면 단일 명령문 내에서 동일한 요소를여러 jQuery 메소드로 실행할 수 있습니다. 이 방법으로 브라우저는 동일한 요소를 두 번 이상 찾을 필요가 없습니다. 12345$(\"#p1\").css(\"color\", \"red\").slideUp(2000).slideDown(2000); === $(\"#p1\").css(\"color\", \"red\") .slideUp(2000) .slideDown(2000); 첫번째로 p요소의 색상이 변하고두번째로 슬라이드가 닫히고,세번째로 슬라이드가 펼쳐집니다. 체인 방식으로 작성하다보면 코드줄이 길어질 수있습니다. jQuery는 구문에 엄격하지 않으므로가독성을 위해 줄 바꿈 및 들여쓰기를 사용하여 써도 잘 작동 합니다.","link":"/2020/03/12/%ED%9A%A8%EA%B3%BC%20%EB%B0%8F%20%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%20-jQuery/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"ECMAScript6","slug":"ECMAScript6","link":"/tags/ECMAScript6/"},{"name":"jQuery","slug":"jQuery","link":"/tags/jQuery/"},{"name":"Core JavaScript","slug":"Core-JavaScript","link":"/tags/Core-JavaScript/"}],"categories":[{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"},{"name":"ECMAScript6","slug":"ECMAScript6","link":"/categories/ECMAScript6/"},{"name":"jQuery","slug":"jQuery","link":"/categories/jQuery/"},{"name":"Core JavaScript","slug":"Core-JavaScript","link":"/categories/Core-JavaScript/"}]}